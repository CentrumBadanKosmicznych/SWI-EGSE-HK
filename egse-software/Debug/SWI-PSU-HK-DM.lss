
SWI-PSU-HK-DM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000178  00800200  00001e2a  00001ebe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002c0  00800378  00800378  00002036  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002036  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002094  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c0  00000000  00000000  000020d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a9f7  00000000  00000000  00002494  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002199  00000000  00000000  0000ce8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000207b  00000000  00000000  0000f024  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a98  00000000  00000000  000110a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001942  00000000  00000000  00011b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d0a  00000000  00000000  0001347a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000390  00000000  00000000  00016184  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	56 c2       	rjmp	.+1196   	; 0x4ae <__ctors_end>
       2:	00 00       	nop
       4:	7d c2       	rjmp	.+1274   	; 0x500 <__bad_interrupt>
       6:	00 00       	nop
       8:	7b c2       	rjmp	.+1270   	; 0x500 <__bad_interrupt>
       a:	00 00       	nop
       c:	79 c2       	rjmp	.+1266   	; 0x500 <__bad_interrupt>
       e:	00 00       	nop
      10:	77 c2       	rjmp	.+1262   	; 0x500 <__bad_interrupt>
      12:	00 00       	nop
      14:	75 c2       	rjmp	.+1258   	; 0x500 <__bad_interrupt>
      16:	00 00       	nop
      18:	73 c2       	rjmp	.+1254   	; 0x500 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	71 c2       	rjmp	.+1250   	; 0x500 <__bad_interrupt>
      1e:	00 00       	nop
      20:	6f c2       	rjmp	.+1246   	; 0x500 <__bad_interrupt>
      22:	00 00       	nop
      24:	6d c2       	rjmp	.+1242   	; 0x500 <__bad_interrupt>
      26:	00 00       	nop
      28:	6b c2       	rjmp	.+1238   	; 0x500 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	69 c2       	rjmp	.+1234   	; 0x500 <__bad_interrupt>
      2e:	00 00       	nop
      30:	67 c2       	rjmp	.+1230   	; 0x500 <__bad_interrupt>
      32:	00 00       	nop
      34:	65 c2       	rjmp	.+1226   	; 0x500 <__bad_interrupt>
      36:	00 00       	nop
      38:	63 c2       	rjmp	.+1222   	; 0x500 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	61 c2       	rjmp	.+1218   	; 0x500 <__bad_interrupt>
      3e:	00 00       	nop
      40:	5f c2       	rjmp	.+1214   	; 0x500 <__bad_interrupt>
      42:	00 00       	nop
      44:	5d c2       	rjmp	.+1210   	; 0x500 <__bad_interrupt>
      46:	00 00       	nop
      48:	5b c2       	rjmp	.+1206   	; 0x500 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	59 c2       	rjmp	.+1202   	; 0x500 <__bad_interrupt>
      4e:	00 00       	nop
      50:	57 c2       	rjmp	.+1198   	; 0x500 <__bad_interrupt>
      52:	00 00       	nop
      54:	55 c2       	rjmp	.+1194   	; 0x500 <__bad_interrupt>
      56:	00 00       	nop
      58:	53 c2       	rjmp	.+1190   	; 0x500 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	51 c2       	rjmp	.+1186   	; 0x500 <__bad_interrupt>
      5e:	00 00       	nop
      60:	4f c2       	rjmp	.+1182   	; 0x500 <__bad_interrupt>
      62:	00 00       	nop
      64:	4d c2       	rjmp	.+1178   	; 0x500 <__bad_interrupt>
      66:	00 00       	nop
      68:	4b c2       	rjmp	.+1174   	; 0x500 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	49 c2       	rjmp	.+1170   	; 0x500 <__bad_interrupt>
      6e:	00 00       	nop
      70:	47 c2       	rjmp	.+1166   	; 0x500 <__bad_interrupt>
      72:	00 00       	nop
      74:	45 c2       	rjmp	.+1162   	; 0x500 <__bad_interrupt>
      76:	00 00       	nop
      78:	43 c2       	rjmp	.+1158   	; 0x500 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	41 c2       	rjmp	.+1154   	; 0x500 <__bad_interrupt>
      7e:	00 00       	nop
      80:	3f c2       	rjmp	.+1150   	; 0x500 <__bad_interrupt>
      82:	00 00       	nop
      84:	3d c2       	rjmp	.+1146   	; 0x500 <__bad_interrupt>
      86:	00 00       	nop
      88:	3b c2       	rjmp	.+1142   	; 0x500 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	39 c2       	rjmp	.+1138   	; 0x500 <__bad_interrupt>
      8e:	00 00       	nop
      90:	37 c2       	rjmp	.+1134   	; 0x500 <__bad_interrupt>
      92:	00 00       	nop
      94:	35 c2       	rjmp	.+1130   	; 0x500 <__bad_interrupt>
      96:	00 00       	nop
      98:	33 c2       	rjmp	.+1126   	; 0x500 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	31 c2       	rjmp	.+1122   	; 0x500 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	2f c2       	rjmp	.+1118   	; 0x500 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2d c2       	rjmp	.+1114   	; 0x500 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	2b c2       	rjmp	.+1110   	; 0x500 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	29 c2       	rjmp	.+1106   	; 0x500 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	27 c2       	rjmp	.+1102   	; 0x500 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	25 c2       	rjmp	.+1098   	; 0x500 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	23 c2       	rjmp	.+1094   	; 0x500 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	21 c2       	rjmp	.+1090   	; 0x500 <__bad_interrupt>
      be:	00 00       	nop
      c0:	1f c2       	rjmp	.+1086   	; 0x500 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1d c2       	rjmp	.+1082   	; 0x500 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	1b c2       	rjmp	.+1078   	; 0x500 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	19 c2       	rjmp	.+1074   	; 0x500 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	17 c2       	rjmp	.+1070   	; 0x500 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	15 c2       	rjmp	.+1066   	; 0x500 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	13 c2       	rjmp	.+1062   	; 0x500 <__bad_interrupt>
      da:	00 00       	nop
      dc:	11 c2       	rjmp	.+1058   	; 0x500 <__bad_interrupt>
      de:	00 00       	nop
      e0:	0f c2       	rjmp	.+1054   	; 0x500 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	00 00       	nop
      ea:	00 33       	cpi	r16, 0x30	; 48
      ec:	00 34       	cpi	r16, 0x40	; 64
      ee:	00 32       	cpi	r16, 0x20	; 32
      f0:	00 05       	cpc	r16, r0
      f2:	2d 00       	.word	0x002d	; ????
      f4:	2e 00       	.word	0x002e	; ????
      f6:	2c 00       	.word	0x002c	; ????
      f8:	00 2d       	mov	r16, r0
      fa:	00 2e       	mov	r0, r16
      fc:	00 2c       	mov	r0, r0
      fe:	00 01       	movw	r0, r0
     100:	2d 00       	.word	0x002d	; ????
     102:	2e 00       	.word	0x002e	; ????
     104:	2c 00       	.word	0x002c	; ????
     106:	02 2d       	mov	r16, r2
     108:	00 2e       	mov	r0, r16
     10a:	00 2c       	mov	r0, r0
     10c:	00 03       	mulsu	r16, r16
     10e:	2d 00       	.word	0x002d	; ????
     110:	2e 00       	.word	0x002e	; ????
     112:	2c 00       	.word	0x002c	; ????
     114:	04 2d       	mov	r16, r4
     116:	00 2e       	mov	r0, r16
     118:	00 2c       	mov	r0, r0
     11a:	00 05       	cpc	r16, r0
     11c:	2d 00       	.word	0x002d	; ????
     11e:	2e 00       	.word	0x002e	; ????
     120:	2c 00       	.word	0x002c	; ????
     122:	06 2d       	mov	r16, r6
     124:	00 2e       	mov	r0, r16
     126:	00 2c       	mov	r0, r0
     128:	00 07       	cpc	r16, r16
	...
     136:	00 00       	nop
     138:	01 01       	movw	r0, r2
     13a:	02 01       	movw	r0, r4
     13c:	00 01       	movw	r0, r0
     13e:	00 01       	movw	r0, r0
     140:	01 02       	muls	r16, r17
     142:	01 00       	.word	0x0001	; ????
     144:	01 01       	movw	r0, r2
     146:	01 01       	movw	r0, r2
     148:	02 01       	movw	r0, r4
     14a:	00 01       	movw	r0, r0
     14c:	02 01       	movw	r0, r4
     14e:	01 02       	muls	r16, r17
     150:	01 00       	.word	0x0001	; ????
     152:	01 03       	mulsu	r16, r17
     154:	01 01       	movw	r0, r2
     156:	02 01       	movw	r0, r4
     158:	00 01       	movw	r0, r0
     15a:	04 01       	movw	r0, r8
     15c:	01 02       	muls	r16, r17
     15e:	01 00       	.word	0x0001	; ????
     160:	01 05       	cpc	r16, r1
     162:	01 01       	movw	r0, r2
     164:	02 01       	movw	r0, r4
     166:	00 01       	movw	r0, r0
     168:	06 24       	eor	r0, r6
     16a:	00 25       	eor	r16, r0
     16c:	00 23       	and	r16, r16
     16e:	00 00       	nop
     170:	24 00       	.word	0x0024	; ????
     172:	25 00       	.word	0x0025	; ????
     174:	23 00       	.word	0x0023	; ????
     176:	01 24       	eor	r0, r1
     178:	00 25       	eor	r16, r0
     17a:	00 23       	and	r16, r16
     17c:	00 02       	muls	r16, r16
     17e:	24 00       	.word	0x0024	; ????
     180:	25 00       	.word	0x0025	; ????
     182:	23 00       	.word	0x0023	; ????
     184:	03 24       	eor	r0, r3
     186:	00 25       	eor	r16, r0
     188:	00 23       	and	r16, r16
     18a:	00 04       	cpc	r0, r0
     18c:	24 00       	.word	0x0024	; ????
     18e:	25 00       	.word	0x0025	; ????
     190:	23 00       	.word	0x0023	; ????
     192:	05 24       	eor	r0, r5
     194:	00 25       	eor	r16, r0
     196:	00 23       	and	r16, r16
     198:	00 06       	cpc	r0, r16
     19a:	24 00       	.word	0x0024	; ????
     19c:	25 00       	.word	0x0025	; ????
     19e:	23 00       	.word	0x0023	; ????
     1a0:	07 01       	movw	r0, r14
     1a2:	01 02       	muls	r16, r17
     1a4:	01 00       	.word	0x0001	; ????
     1a6:	01 07       	cpc	r16, r17
     1a8:	33 00       	.word	0x0033	; ????
     1aa:	34 00       	.word	0x0034	; ????
     1ac:	32 00       	.word	0x0032	; ????
     1ae:	03 33       	cpi	r16, 0x33	; 51
     1b0:	00 34       	cpi	r16, 0x40	; 64
     1b2:	00 32       	cpi	r16, 0x20	; 32
     1b4:	00 04       	cpc	r0, r0
	...
     1d6:	00 00       	nop
     1d8:	00 0a       	sbc	r0, r16
     1da:	01 0b       	sbc	r16, r17
     1dc:	01 09       	sbc	r16, r1
     1de:	01 00       	.word	0x0001	; ????
     1e0:	0a 01       	movw	r0, r20
     1e2:	0b 01       	movw	r0, r22
     1e4:	09 01       	movw	r0, r18
     1e6:	01 0a       	sbc	r0, r17
     1e8:	01 0b       	sbc	r16, r17
     1ea:	01 09       	sbc	r16, r1
     1ec:	01 02       	muls	r16, r17
     1ee:	0a 01       	movw	r0, r20
     1f0:	0b 01       	movw	r0, r22
     1f2:	09 01       	movw	r0, r18
     1f4:	03 0a       	sbc	r0, r19
     1f6:	01 0b       	sbc	r16, r17
     1f8:	01 09       	sbc	r16, r1
     1fa:	01 04       	cpc	r0, r1
     1fc:	0a 01       	movw	r0, r20
     1fe:	0b 01       	movw	r0, r22
     200:	09 01       	movw	r0, r18
     202:	05 0a       	sbc	r0, r21
     204:	01 0b       	sbc	r16, r17
     206:	01 09       	sbc	r16, r1
     208:	01 06       	cpc	r0, r17
     20a:	0a 01       	movw	r0, r20
     20c:	0b 01       	movw	r0, r22
     20e:	09 01       	movw	r0, r18
     210:	07 2a       	or	r0, r23
     212:	00 2b       	or	r16, r16
     214:	00 29       	or	r16, r0
     216:	00 00       	nop
     218:	2a 00       	.word	0x002a	; ????
     21a:	2b 00       	.word	0x002b	; ????
     21c:	29 00       	.word	0x0029	; ????
     21e:	01 2a       	or	r0, r17
     220:	00 2b       	or	r16, r16
     222:	00 29       	or	r16, r0
     224:	00 02       	muls	r16, r16
     226:	2a 00       	.word	0x002a	; ????
     228:	2b 00       	.word	0x002b	; ????
     22a:	29 00       	.word	0x0029	; ????
     22c:	03 2a       	or	r0, r19
     22e:	00 2b       	or	r16, r16
     230:	00 29       	or	r16, r0
     232:	00 04       	cpc	r0, r0
     234:	2a 00       	.word	0x002a	; ????
     236:	2b 00       	.word	0x002b	; ????
     238:	29 00       	.word	0x0029	; ????
     23a:	05 2a       	or	r0, r21
     23c:	00 2b       	or	r16, r16
     23e:	00 29       	or	r16, r0
     240:	00 06       	cpc	r0, r16
     242:	2a 00       	.word	0x002a	; ????
     244:	2b 00       	.word	0x002b	; ????
     246:	29 00       	.word	0x0029	; ????
     248:	07 33       	cpi	r16, 0x37	; 55
     24a:	00 34       	cpi	r16, 0x40	; 64
     24c:	00 32       	cpi	r16, 0x20	; 32
     24e:	00 00       	nop
     250:	33 00       	.word	0x0033	; ????
     252:	34 00       	.word	0x0034	; ????
     254:	32 00       	.word	0x0032	; ????
     256:	01 27       	eor	r16, r17
     258:	00 28       	or	r0, r0
     25a:	00 26       	eor	r0, r16
     25c:	00 00       	nop
     25e:	27 00       	.word	0x0027	; ????
     260:	28 00       	.word	0x0028	; ????
     262:	26 00       	.word	0x0026	; ????
     264:	01 27       	eor	r16, r17
     266:	00 28       	or	r0, r0
     268:	00 26       	eor	r0, r16
     26a:	00 02       	muls	r16, r16
     26c:	27 00       	.word	0x0027	; ????
     26e:	28 00       	.word	0x0028	; ????
     270:	26 00       	.word	0x0026	; ????
     272:	03 27       	eor	r16, r19
     274:	00 28       	or	r0, r0
     276:	00 26       	eor	r0, r16
     278:	00 04       	cpc	r0, r0
     27a:	27 00       	.word	0x0027	; ????
     27c:	28 00       	.word	0x0028	; ????
     27e:	26 00       	.word	0x0026	; ????
     280:	05 27       	eor	r16, r21
     282:	00 28       	or	r0, r0
     284:	00 26       	eor	r0, r16
     286:	00 06       	cpc	r0, r16
     288:	27 00       	.word	0x0027	; ????
     28a:	28 00       	.word	0x0028	; ????
     28c:	26 00       	.word	0x0026	; ????
     28e:	07 00       	.word	0x0007	; ????
	...
     29c:	00 04       	cpc	r0, r0
     29e:	01 05       	cpc	r16, r1
     2a0:	01 03       	mulsu	r16, r17
     2a2:	01 00       	.word	0x0001	; ????
     2a4:	04 01       	movw	r0, r8
     2a6:	05 01       	movw	r0, r10
     2a8:	03 01       	movw	r0, r6
     2aa:	01 04       	cpc	r0, r1
     2ac:	01 05       	cpc	r16, r1
     2ae:	01 03       	mulsu	r16, r17
     2b0:	01 02       	muls	r16, r17
     2b2:	04 01       	movw	r0, r8
     2b4:	05 01       	movw	r0, r10
     2b6:	03 01       	movw	r0, r6
     2b8:	03 04       	cpc	r0, r3
     2ba:	01 05       	cpc	r16, r1
     2bc:	01 03       	mulsu	r16, r17
     2be:	01 04       	cpc	r0, r1
     2c0:	04 01       	movw	r0, r8
     2c2:	05 01       	movw	r0, r10
     2c4:	03 01       	movw	r0, r6
     2c6:	05 04       	cpc	r0, r5
     2c8:	01 05       	cpc	r16, r1
     2ca:	01 03       	mulsu	r16, r17
     2cc:	01 06       	cpc	r0, r17
     2ce:	33 00       	.word	0x0033	; ????
     2d0:	34 00       	.word	0x0034	; ????
     2d2:	32 00       	.word	0x0032	; ????
     2d4:	02 21       	and	r16, r2
     2d6:	00 22       	and	r0, r16
     2d8:	00 20       	and	r0, r0
     2da:	00 07       	cpc	r16, r16
     2dc:	21 00       	.word	0x0021	; ????
     2de:	22 00       	.word	0x0022	; ????
     2e0:	20 00       	.word	0x0020	; ????
     2e2:	06 21       	and	r16, r6
     2e4:	00 22       	and	r0, r16
     2e6:	00 20       	and	r0, r0
     2e8:	00 05       	cpc	r16, r0
     2ea:	21 00       	.word	0x0021	; ????
     2ec:	22 00       	.word	0x0022	; ????
     2ee:	20 00       	.word	0x0020	; ????
     2f0:	04 21       	and	r16, r4
     2f2:	00 22       	and	r0, r16
     2f4:	00 20       	and	r0, r0
     2f6:	00 03       	mulsu	r16, r16
     2f8:	21 00       	.word	0x0021	; ????
     2fa:	22 00       	.word	0x0022	; ????
     2fc:	20 00       	.word	0x0020	; ????
     2fe:	02 21       	and	r16, r2
     300:	00 22       	and	r0, r16
     302:	00 20       	and	r0, r0
     304:	00 01       	movw	r0, r0
     306:	21 00       	.word	0x0021	; ????
     308:	22 00       	.word	0x0022	; ????
     30a:	20 00       	.word	0x0020	; ????
     30c:	00 04       	cpc	r0, r0
     30e:	01 05       	cpc	r16, r1
     310:	01 03       	mulsu	r16, r17
     312:	01 07       	cpc	r16, r17
	...
     320:	00 00       	nop
     322:	07 01       	movw	r0, r14
     324:	08 01       	movw	r0, r16
     326:	06 01       	movw	r0, r12
     328:	07 07       	cpc	r16, r23
     32a:	01 08       	sbc	r0, r1
     32c:	01 06       	cpc	r0, r17
     32e:	01 06       	cpc	r0, r17
     330:	07 01       	movw	r0, r14
     332:	08 01       	movw	r0, r16
     334:	06 01       	movw	r0, r12
     336:	05 07       	cpc	r16, r21
     338:	01 08       	sbc	r0, r1
     33a:	01 06       	cpc	r0, r17
     33c:	01 04       	cpc	r0, r1
     33e:	07 01       	movw	r0, r14
     340:	08 01       	movw	r0, r16
     342:	06 01       	movw	r0, r12
     344:	03 07       	cpc	r16, r19
     346:	01 08       	sbc	r0, r1
     348:	01 06       	cpc	r0, r17
     34a:	01 02       	muls	r16, r17
     34c:	07 01       	movw	r0, r14
     34e:	08 01       	movw	r0, r16
     350:	06 01       	movw	r0, r12
     352:	01 07       	cpc	r16, r17
     354:	01 08       	sbc	r0, r1
     356:	01 06       	cpc	r0, r17
     358:	01 00       	.word	0x0001	; ????
     35a:	30 00       	.word	0x0030	; ????
     35c:	31 00       	.word	0x0031	; ????
     35e:	2f 00       	.word	0x002f	; ????
     360:	07 30       	cpi	r16, 0x07	; 7
     362:	00 31       	cpi	r16, 0x10	; 16
     364:	00 2f       	mov	r16, r16
     366:	00 06       	cpc	r0, r16
     368:	30 00       	.word	0x0030	; ????
     36a:	31 00       	.word	0x0031	; ????
     36c:	2f 00       	.word	0x002f	; ????
     36e:	05 30       	cpi	r16, 0x05	; 5
     370:	00 31       	cpi	r16, 0x10	; 16
     372:	00 2f       	mov	r16, r16
     374:	00 04       	cpc	r0, r0
     376:	30 00       	.word	0x0030	; ????
     378:	31 00       	.word	0x0031	; ????
     37a:	2f 00       	.word	0x002f	; ????
     37c:	03 30       	cpi	r16, 0x03	; 3
     37e:	00 31       	cpi	r16, 0x10	; 16
     380:	00 2f       	mov	r16, r16
     382:	00 02       	muls	r16, r16
     384:	30 00       	.word	0x0030	; ????
     386:	31 00       	.word	0x0031	; ????
     388:	2f 00       	.word	0x002f	; ????
     38a:	01 30       	cpi	r16, 0x01	; 1
     38c:	00 31       	cpi	r16, 0x10	; 16
     38e:	00 2f       	mov	r16, r16
	...

000003a7 <__c.2179>:
     3a7:	6e 61 6e 00                                         nan.

000003ab <__c.2177>:
     3ab:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     3bb:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     3cb:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     3db:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     3eb:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     3fb:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     40b:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     41b:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     42b:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     43b:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     44b:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     45b:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     46b:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     47b:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     48b:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     49b:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

000004aa <__ctors_start>:
     4aa:	1d 04       	cpc	r1, r13
     4ac:	c2 09       	sbc	r28, r2

000004ae <__ctors_end>:
     4ae:	11 24       	eor	r1, r1
     4b0:	1f be       	out	0x3f, r1	; 63
     4b2:	cf ef       	ldi	r28, 0xFF	; 255
     4b4:	d1 e2       	ldi	r29, 0x21	; 33
     4b6:	de bf       	out	0x3e, r29	; 62
     4b8:	cd bf       	out	0x3d, r28	; 61

000004ba <__do_copy_data>:
     4ba:	13 e0       	ldi	r17, 0x03	; 3
     4bc:	a0 e0       	ldi	r26, 0x00	; 0
     4be:	b2 e0       	ldi	r27, 0x02	; 2
     4c0:	ea e2       	ldi	r30, 0x2A	; 42
     4c2:	fe e1       	ldi	r31, 0x1E	; 30
     4c4:	00 e0       	ldi	r16, 0x00	; 0
     4c6:	0b bf       	out	0x3b, r16	; 59
     4c8:	02 c0       	rjmp	.+4      	; 0x4ce <__do_copy_data+0x14>
     4ca:	07 90       	elpm	r0, Z+
     4cc:	0d 92       	st	X+, r0
     4ce:	a8 37       	cpi	r26, 0x78	; 120
     4d0:	b1 07       	cpc	r27, r17
     4d2:	d9 f7       	brne	.-10     	; 0x4ca <__do_copy_data+0x10>

000004d4 <__do_clear_bss>:
     4d4:	26 e0       	ldi	r18, 0x06	; 6
     4d6:	a8 e7       	ldi	r26, 0x78	; 120
     4d8:	b3 e0       	ldi	r27, 0x03	; 3
     4da:	01 c0       	rjmp	.+2      	; 0x4de <.do_clear_bss_start>

000004dc <.do_clear_bss_loop>:
     4dc:	1d 92       	st	X+, r1

000004de <.do_clear_bss_start>:
     4de:	a8 33       	cpi	r26, 0x38	; 56
     4e0:	b2 07       	cpc	r27, r18
     4e2:	e1 f7       	brne	.-8      	; 0x4dc <.do_clear_bss_loop>

000004e4 <__do_global_ctors>:
     4e4:	12 e0       	ldi	r17, 0x02	; 2
     4e6:	c7 e5       	ldi	r28, 0x57	; 87
     4e8:	d2 e0       	ldi	r29, 0x02	; 2
     4ea:	04 c0       	rjmp	.+8      	; 0x4f4 <__do_global_ctors+0x10>
     4ec:	21 97       	sbiw	r28, 0x01	; 1
     4ee:	fe 01       	movw	r30, r28
     4f0:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <__tablejump2__>
     4f4:	c5 35       	cpi	r28, 0x55	; 85
     4f6:	d1 07       	cpc	r29, r17
     4f8:	c9 f7       	brne	.-14     	; 0x4ec <__do_global_ctors+0x8>
     4fa:	7d d6       	rcall	.+3322   	; 0x11f6 <main>
     4fc:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <_exit>

00000500 <__bad_interrupt>:
     500:	7f cd       	rjmp	.-1282   	; 0x0 <__vectors>

00000502 <_ZN8Buffer_t3getEv>:
	buffer[index] = byte;
}

uint8_t Buffer_t::getByte(uint8_t index){
	return buffer[index];
}
     502:	08 95       	ret

00000504 <_ZN8Buffer_t5clearEv>:

void Buffer_t::clear(void){
     504:	fc 01       	movw	r30, r24
     506:	81 50       	subi	r24, 0x01	; 1
     508:	9f 4f       	sbci	r25, 0xFF	; 255
	for(uint8_t i=0; i<255; i++){
		buffer[i]=0;
     50a:	11 92       	st	Z+, r1
uint8_t Buffer_t::getByte(uint8_t index){
	return buffer[index];
}

void Buffer_t::clear(void){
	for(uint8_t i=0; i<255; i++){
     50c:	e8 17       	cp	r30, r24
     50e:	f9 07       	cpc	r31, r25
     510:	e1 f7       	brne	.-8      	; 0x50a <_ZN8Buffer_t5clearEv+0x6>
		buffer[i]=0;
	}
     512:	08 95       	ret

00000514 <_ZN8Buffer_tC1Ev>:
 */ 

#include "Buffer.h"

Buffer_t::Buffer_t() {
	this->clear();
     514:	f7 cf       	rjmp	.-18     	; 0x504 <_ZN8Buffer_t5clearEv>
     516:	08 95       	ret

00000518 <_Z4initv>:
    void begin(const uint32_t _b) {
        /* Set baud rate */
        uint16_t ubrr;
        ubrr = static_cast<uint16_t>(((F_CPU / 16.)/ (_b)) - 0.5);

        REGGEN(UBRR0H) = static_cast<uint8_t> (ubrr >> 8);
     518:	10 92 c5 00 	sts	0x00C5, r1
        REGGEN(UBRR0L) = static_cast<uint8_t> (ubrr & 0xFF);
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	80 93 c4 00 	sts	0x00C4, r24

        /* Enable receiver and transmitter */
        REGGEN(UCSR0B) = (1 << REGGEN(RXEN0)) | (1 << REGGEN(TXEN0));
     522:	88 e1       	ldi	r24, 0x18	; 24
     524:	80 93 c1 00 	sts	0x00C1, r24
		/* Set frame format: 8data, 1stop bit */
		REGGEN(UCSR0C) = (1 << REGGEN(UCSZ01)) | (1 << REGGEN(UCSZ00));	
     528:	86 e0       	ldi	r24, 0x06	; 6
     52a:	80 93 c2 00 	sts	0x00C2, r24
#define set(a, b) (a) |= (1 << (b))
#define reset(a, b) (a) &= ~(1 << (b))

void init(void){
	Serial0.begin(250000);
	DDRB = 0xFF;
     52e:	8f ef       	ldi	r24, 0xFF	; 255
     530:	84 b9       	out	0x04, r24	; 4
	set(PORTB, 7);
     532:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     534:	2f ef       	ldi	r18, 0xFF	; 255
     536:	81 ee       	ldi	r24, 0xE1	; 225
     538:	94 e0       	ldi	r25, 0x04	; 4
     53a:	21 50       	subi	r18, 0x01	; 1
     53c:	80 40       	sbci	r24, 0x00	; 0
     53e:	90 40       	sbci	r25, 0x00	; 0
     540:	e1 f7       	brne	.-8      	; 0x53a <_Z4initv+0x22>
     542:	00 c0       	rjmp	.+0      	; 0x544 <_Z4initv+0x2c>
     544:	00 00       	nop
	_delay_ms(200);
	reset(PORTB, 7);
     546:	2f 98       	cbi	0x05, 7	; 5
     548:	08 95       	ret

0000054a <_ZN8SerialX_ILi0EE6printfEPKcz>:
        while (*data) {
            this->print_byte(*data);
            data++;
        }
    }
    void printf(const char* format, ...) {
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
     556:	0f 81       	ldd	r16, Y+7	; 0x07
     558:	18 85       	ldd	r17, Y+8	; 0x08
        va_list aptr;
        va_start(aptr, format);
        vsnprintf(buffer, BUFFER_SIZE, format, aptr);
     55a:	9e 01       	movw	r18, r28
     55c:	25 5f       	subi	r18, 0xF5	; 245
     55e:	3f 4f       	sbci	r19, 0xFF	; 255
     560:	49 85       	ldd	r20, Y+9	; 0x09
     562:	5a 85       	ldd	r21, Y+10	; 0x0a
     564:	62 e3       	ldi	r22, 0x32	; 50
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	c8 01       	movw	r24, r16
     56a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <vsnprintf>
            this->print_byte(*data);
            data++;
        }
    }
    void print_string(const char * data) {
        while (*data) {
     56e:	d8 01       	movw	r26, r16
     570:	2c 91       	ld	r18, X
     572:	22 23       	and	r18, r18
     574:	81 f0       	breq	.+32     	; 0x596 <_ZN8SerialX_ILi0EE6printfEPKcz+0x4c>
     576:	0f 5f       	subi	r16, 0xFF	; 255
     578:	1f 4f       	sbci	r17, 0xFF	; 255
		REGGEN(UCSR0C) = (1 << REGGEN(UCSZ01)) | (1 << REGGEN(UCSZ00));	
    }

    void print_byte(const uint8_t byte) {
        /* Wait for transmit last data buffer */
        while (!(REGGEN(UCSR0A) & (1 << REGGEN(UDRE0)))) {
     57a:	e0 ec       	ldi	r30, 0xC0	; 192
     57c:	f0 e0       	ldi	r31, 0x00	; 0
        }
		/* Put data into buffer, sends the data */
        REGGEN(UDR0) = byte;
     57e:	46 ec       	ldi	r20, 0xC6	; 198
     580:	50 e0       	ldi	r21, 0x00	; 0
		REGGEN(UCSR0C) = (1 << REGGEN(UCSZ01)) | (1 << REGGEN(UCSZ00));	
    }

    void print_byte(const uint8_t byte) {
        /* Wait for transmit last data buffer */
        while (!(REGGEN(UCSR0A) & (1 << REGGEN(UDRE0)))) {
     582:	90 81       	ld	r25, Z
     584:	95 ff       	sbrs	r25, 5
     586:	fd cf       	rjmp	.-6      	; 0x582 <_ZN8SerialX_ILi0EE6printfEPKcz+0x38>
        }
		/* Put data into buffer, sends the data */
        REGGEN(UDR0) = byte;
     588:	da 01       	movw	r26, r20
     58a:	2c 93       	st	X, r18
            this->print_byte(*data);
            data++;
        }
    }
    void print_string(const char * data) {
        while (*data) {
     58c:	d8 01       	movw	r26, r16
     58e:	2d 91       	ld	r18, X+
     590:	8d 01       	movw	r16, r26
     592:	21 11       	cpse	r18, r1
     594:	f6 cf       	rjmp	.-20     	; 0x582 <_ZN8SerialX_ILi0EE6printfEPKcz+0x38>
        va_start(aptr, format);
        vsnprintf(buffer, BUFFER_SIZE, format, aptr);
        va_end(aptr);

        this->print_string(this->buffer);
    }
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	1f 91       	pop	r17
     59c:	0f 91       	pop	r16
     59e:	08 95       	ret

000005a0 <_Z5beginv>:
}

void begin(void){
	
	init();
     5a0:	bb df       	rcall	.-138    	; 0x518 <_Z4initv>
				Frame.printFrame(Commands.REPLY_ERROR_UNDEFINED_COMMAND);
				
			Buffer.clear();
		}
		else
			Frame.printFrame(Commands.REPLY_ERROR_FRAME);
     5a2:	c0 e0       	ldi	r28, 0x00	; 0
     5a4:	d2 e0       	ldi	r29, 0x02	; 2
					Frame.printFrame(Commands.REPLY_ERROR_PARAM_OUT_OF_RANGE);
				else
					Frame.printFrame(Commands.REPLY_ERROR_INWALID_PARAMS);
			} else if(Frame.receivedCommand(Buffer.get(), received_bytes, Commands.COMMAND_DISABLE_SW)){
				if ((Switches.loadParameter(Buffer.get())>=0)&&(Switches.loadParameter(Buffer.get())<=10)){
					Serial0.printf(Commands.COMMAND_DISABLE_SW);
     5a6:	03 e8       	ldi	r16, 0x83	; 131
     5a8:	15 e0       	ldi	r17, 0x05	; 5
					Frame.printCommandDataSeparator();
					Serial0.printf("%i", Switches.loadParameter(Buffer.get()));
     5aa:	0f 2e       	mov	r0, r31
     5ac:	f0 e2       	ldi	r31, 0x20	; 32
     5ae:	ef 2e       	mov	r14, r31
     5b0:	f2 e0       	ldi	r31, 0x02	; 2
     5b2:	ff 2e       	mov	r15, r31
     5b4:	f0 2d       	mov	r31, r0
void begin(void){
	
	init();

	while(1) {
		reset(PORTB, 7);
     5b6:	2f 98       	cbi	0x05, 7	; 5
		
		received_bytes = Frame.readFrame(Buffer.get());
     5b8:	83 e8       	ldi	r24, 0x83	; 131
     5ba:	94 e0       	ldi	r25, 0x04	; 4
     5bc:	a2 df       	rcall	.-188    	; 0x502 <_ZN8Buffer_t3getEv>
     5be:	bc 01       	movw	r22, r24
     5c0:	8e e7       	ldi	r24, 0x7E	; 126
     5c2:	94 e0       	ldi	r25, 0x04	; 4
     5c4:	7d d1       	rcall	.+762    	; 0x8c0 <_ZN7Frame_t9readFrameEPh>
     5c6:	80 93 7d 04 	sts	0x047D, r24
		
		if (Frame.headerIsValid(Buffer.get())){
     5ca:	83 e8       	ldi	r24, 0x83	; 131
     5cc:	94 e0       	ldi	r25, 0x04	; 4
     5ce:	99 df       	rcall	.-206    	; 0x502 <_ZN8Buffer_t3getEv>
     5d0:	bc 01       	movw	r22, r24
     5d2:	8e e7       	ldi	r24, 0x7E	; 126
     5d4:	94 e0       	ldi	r25, 0x04	; 4
     5d6:	50 d1       	rcall	.+672    	; 0x878 <_ZN7Frame_t13headerIsValidEPh>
     5d8:	88 23       	and	r24, r24
     5da:	09 f4       	brne	.+2      	; 0x5de <_Z5beginv+0x3e>
     5dc:	28 c1       	rjmp	.+592    	; 0x82e <_Z5beginv+0x28e>
			set(PORTB, 7);
     5de:	2f 9a       	sbi	0x05, 7	; 5
			if(Frame.receivedCommand(Buffer.get(), received_bytes, Commands.COMMAND_GET_ADC)){
     5e0:	a8 80       	ld	r10, Y
     5e2:	b9 80       	ldd	r11, Y+1	; 0x01
     5e4:	d0 90 7d 04 	lds	r13, 0x047D
     5e8:	83 e8       	ldi	r24, 0x83	; 131
     5ea:	94 e0       	ldi	r25, 0x04	; 4
     5ec:	8a df       	rcall	.-236    	; 0x502 <_ZN8Buffer_t3getEv>
     5ee:	95 01       	movw	r18, r10
     5f0:	4d 2d       	mov	r20, r13
     5f2:	bc 01       	movw	r22, r24
     5f4:	8e e7       	ldi	r24, 0x7E	; 126
     5f6:	94 e0       	ldi	r25, 0x04	; 4
     5f8:	d8 d1       	rcall	.+944    	; 0x9aa <_ZN7Frame_t15receivedCommandEPhhPKc>
     5fa:	88 23       	and	r24, r24
     5fc:	69 f0       	breq	.+26     	; 0x618 <_Z5beginv+0x78>
     5fe:	2f e7       	ldi	r18, 0x7F	; 127
     600:	88 e3       	ldi	r24, 0x38	; 56
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	21 50       	subi	r18, 0x01	; 1
     606:	80 40       	sbci	r24, 0x00	; 0
     608:	90 40       	sbci	r25, 0x00	; 0
     60a:	e1 f7       	brne	.-8      	; 0x604 <_Z5beginv+0x64>
     60c:	00 c0       	rjmp	.+0      	; 0x60e <_Z5beginv+0x6e>
     60e:	00 00       	nop
				_delay_ms(50);
				HK.printHK();
     610:	8e e2       	ldi	r24, 0x2E	; 46
     612:	94 e0       	ldi	r25, 0x04	; 4
     614:	8b d3       	rcall	.+1814   	; 0xd2c <_ZN4Hk_t7printHKEv>
     616:	07 c1       	rjmp	.+526    	; 0x826 <_Z5beginv+0x286>
			} else if(Frame.receivedCommand(Buffer.get(), received_bytes, Commands.COMMAND_GET_VERSION)){
     618:	a8 84       	ldd	r10, Y+8	; 0x08
     61a:	b9 84       	ldd	r11, Y+9	; 0x09
     61c:	d0 90 7d 04 	lds	r13, 0x047D
     620:	83 e8       	ldi	r24, 0x83	; 131
     622:	94 e0       	ldi	r25, 0x04	; 4
     624:	6e df       	rcall	.-292    	; 0x502 <_ZN8Buffer_t3getEv>
     626:	95 01       	movw	r18, r10
     628:	4d 2d       	mov	r20, r13
     62a:	bc 01       	movw	r22, r24
     62c:	8e e7       	ldi	r24, 0x7E	; 126
     62e:	94 e0       	ldi	r25, 0x04	; 4
     630:	bc d1       	rcall	.+888    	; 0x9aa <_ZN7Frame_t15receivedCommandEPhhPKc>
     632:	88 23       	and	r24, r24
     634:	29 f1       	breq	.+74     	; 0x680 <_Z5beginv+0xe0>
				Serial0.printf(Commands.REPLY_GET_VERSION_0);
     636:	89 8d       	ldd	r24, Y+25	; 0x19
     638:	8f 93       	push	r24
     63a:	88 8d       	ldd	r24, Y+24	; 0x18
     63c:	8f 93       	push	r24
     63e:	1f 93       	push	r17
     640:	0f 93       	push	r16
     642:	83 df       	rcall	.-250    	; 0x54a <_ZN8SerialX_ILi0EE6printfEPKcz>
				Serial0.printf(Commands.REPLY_GET_VERSION_1);
     644:	8b 8d       	ldd	r24, Y+27	; 0x1b
     646:	8f 93       	push	r24
     648:	8a 8d       	ldd	r24, Y+26	; 0x1a
     64a:	8f 93       	push	r24
     64c:	1f 93       	push	r17
     64e:	0f 93       	push	r16
     650:	7c df       	rcall	.-264    	; 0x54a <_ZN8SerialX_ILi0EE6printfEPKcz>
				Serial0.printf(Commands.REPLY_GET_VERSION_2);
     652:	8d 8d       	ldd	r24, Y+29	; 0x1d
     654:	8f 93       	push	r24
     656:	8c 8d       	ldd	r24, Y+28	; 0x1c
     658:	8f 93       	push	r24
     65a:	1f 93       	push	r17
     65c:	0f 93       	push	r16
     65e:	75 df       	rcall	.-278    	; 0x54a <_ZN8SerialX_ILi0EE6printfEPKcz>
				Serial0.printf(Commands.REPLY_GET_VERSION_3);
     660:	8f 8d       	ldd	r24, Y+31	; 0x1f
     662:	8f 93       	push	r24
     664:	8e 8d       	ldd	r24, Y+30	; 0x1e
     666:	8f 93       	push	r24
     668:	1f 93       	push	r17
     66a:	0f 93       	push	r16
     66c:	6e df       	rcall	.-292    	; 0x54a <_ZN8SerialX_ILi0EE6printfEPKcz>
     66e:	8d b7       	in	r24, 0x3d	; 61
     670:	9e b7       	in	r25, 0x3e	; 62
     672:	40 96       	adiw	r24, 0x10	; 16
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	f8 94       	cli
     678:	9e bf       	out	0x3e, r25	; 62
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	8d bf       	out	0x3d, r24	; 61
     67e:	d3 c0       	rjmp	.+422    	; 0x826 <_Z5beginv+0x286>
			} else if(Frame.receivedCommand(Buffer.get(), received_bytes, Commands.COMMAND_ENABLE_SW)){ 
     680:	ac 80       	ldd	r10, Y+4	; 0x04
     682:	bd 80       	ldd	r11, Y+5	; 0x05
     684:	d0 90 7d 04 	lds	r13, 0x047D
     688:	83 e8       	ldi	r24, 0x83	; 131
     68a:	94 e0       	ldi	r25, 0x04	; 4
     68c:	3a df       	rcall	.-396    	; 0x502 <_ZN8Buffer_t3getEv>
     68e:	95 01       	movw	r18, r10
     690:	4d 2d       	mov	r20, r13
     692:	bc 01       	movw	r22, r24
     694:	8e e7       	ldi	r24, 0x7E	; 126
     696:	94 e0       	ldi	r25, 0x04	; 4
     698:	88 d1       	rcall	.+784    	; 0x9aa <_ZN7Frame_t15receivedCommandEPhhPKc>
     69a:	88 23       	and	r24, r24
     69c:	09 f4       	brne	.+2      	; 0x6a0 <_Z5beginv+0x100>
     69e:	57 c0       	rjmp	.+174    	; 0x74e <_Z5beginv+0x1ae>
				if ((Switches.loadParameter(Buffer.get())>=0)&&(Switches.loadParameter(Buffer.get())<=10)){
     6a0:	83 e8       	ldi	r24, 0x83	; 131
     6a2:	94 e0       	ldi	r25, 0x04	; 4
     6a4:	2e df       	rcall	.-420    	; 0x502 <_ZN8Buffer_t3getEv>
     6a6:	bc 01       	movw	r22, r24
     6a8:	88 e7       	ldi	r24, 0x78	; 120
     6aa:	93 e0       	ldi	r25, 0x03	; 3
     6ac:	3f d4       	rcall	.+2174   	; 0xf2c <_ZN10Switches_t13loadParameterEPh>
     6ae:	99 23       	and	r25, r25
     6b0:	0c f4       	brge	.+2      	; 0x6b4 <_Z5beginv+0x114>
     6b2:	38 c0       	rjmp	.+112    	; 0x724 <_Z5beginv+0x184>
     6b4:	83 e8       	ldi	r24, 0x83	; 131
     6b6:	94 e0       	ldi	r25, 0x04	; 4
     6b8:	24 df       	rcall	.-440    	; 0x502 <_ZN8Buffer_t3getEv>
     6ba:	bc 01       	movw	r22, r24
     6bc:	88 e7       	ldi	r24, 0x78	; 120
     6be:	93 e0       	ldi	r25, 0x03	; 3
     6c0:	35 d4       	rcall	.+2154   	; 0xf2c <_ZN10Switches_t13loadParameterEPh>
     6c2:	0b 97       	sbiw	r24, 0x0b	; 11
     6c4:	7c f5       	brge	.+94     	; 0x724 <_Z5beginv+0x184>
					Serial0.printf(Commands.COMMAND_ENABLE_SW);
     6c6:	8d 81       	ldd	r24, Y+5	; 0x05
     6c8:	8f 93       	push	r24
     6ca:	8c 81       	ldd	r24, Y+4	; 0x04
     6cc:	8f 93       	push	r24
     6ce:	1f 93       	push	r17
     6d0:	0f 93       	push	r16
     6d2:	3b df       	rcall	.-394    	; 0x54a <_ZN8SerialX_ILi0EE6printfEPKcz>
					Frame.printCommandDataSeparator();
     6d4:	8e e7       	ldi	r24, 0x7E	; 126
     6d6:	94 e0       	ldi	r25, 0x04	; 4
     6d8:	4e d1       	rcall	.+668    	; 0x976 <_ZN7Frame_t25printCommandDataSeparatorEv>
					Serial0.printf("%i", Switches.loadParameter(Buffer.get()));
     6da:	83 e8       	ldi	r24, 0x83	; 131
     6dc:	94 e0       	ldi	r25, 0x04	; 4
     6de:	11 df       	rcall	.-478    	; 0x502 <_ZN8Buffer_t3getEv>
     6e0:	bc 01       	movw	r22, r24
     6e2:	88 e7       	ldi	r24, 0x78	; 120
     6e4:	93 e0       	ldi	r25, 0x03	; 3
     6e6:	22 d4       	rcall	.+2116   	; 0xf2c <_ZN10Switches_t13loadParameterEPh>
     6e8:	9f 93       	push	r25
     6ea:	8f 93       	push	r24
     6ec:	ff 92       	push	r15
     6ee:	ef 92       	push	r14
     6f0:	1f 93       	push	r17
     6f2:	0f 93       	push	r16
     6f4:	2a df       	rcall	.-428    	; 0x54a <_ZN8SerialX_ILi0EE6printfEPKcz>
					Frame.printTerminator();
     6f6:	8e e7       	ldi	r24, 0x7E	; 126
     6f8:	94 e0       	ldi	r25, 0x04	; 4
     6fa:	fa d0       	rcall	.+500    	; 0x8f0 <_ZN7Frame_t15printTerminatorEv>
					Switches.enableOneSwitch(Switches.loadParameter(Buffer.get()));
     6fc:	83 e8       	ldi	r24, 0x83	; 131
     6fe:	94 e0       	ldi	r25, 0x04	; 4
     700:	00 df       	rcall	.-512    	; 0x502 <_ZN8Buffer_t3getEv>
     702:	bc 01       	movw	r22, r24
     704:	88 e7       	ldi	r24, 0x78	; 120
     706:	93 e0       	ldi	r25, 0x03	; 3
     708:	11 d4       	rcall	.+2082   	; 0xf2c <_ZN10Switches_t13loadParameterEPh>
     70a:	68 2f       	mov	r22, r24
     70c:	88 e7       	ldi	r24, 0x78	; 120
     70e:	93 e0       	ldi	r25, 0x03	; 3
     710:	bc d3       	rcall	.+1912   	; 0xe8a <_ZN10Switches_t15enableOneSwitchEh>
     712:	8d b7       	in	r24, 0x3d	; 61
     714:	9e b7       	in	r25, 0x3e	; 62
     716:	0a 96       	adiw	r24, 0x0a	; 10
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	f8 94       	cli
     71c:	9e bf       	out	0x3e, r25	; 62
     71e:	0f be       	out	0x3f, r0	; 63
     720:	8d bf       	out	0x3d, r24	; 61
     722:	81 c0       	rjmp	.+258    	; 0x826 <_Z5beginv+0x286>
				} else if(Switches.loadParameter(Buffer.get())>10)	
     724:	83 e8       	ldi	r24, 0x83	; 131
     726:	94 e0       	ldi	r25, 0x04	; 4
     728:	ec de       	rcall	.-552    	; 0x502 <_ZN8Buffer_t3getEv>
     72a:	bc 01       	movw	r22, r24
     72c:	88 e7       	ldi	r24, 0x78	; 120
     72e:	93 e0       	ldi	r25, 0x03	; 3
     730:	fd d3       	rcall	.+2042   	; 0xf2c <_ZN10Switches_t13loadParameterEPh>
     732:	0b 97       	sbiw	r24, 0x0b	; 11
     734:	34 f0       	brlt	.+12     	; 0x742 <_Z5beginv+0x1a2>
					Frame.printFrame(Commands.REPLY_ERROR_PARAM_OUT_OF_RANGE);
     736:	6a 89       	ldd	r22, Y+18	; 0x12
     738:	7b 89       	ldd	r23, Y+19	; 0x13
     73a:	8e e7       	ldi	r24, 0x7E	; 126
     73c:	94 e0       	ldi	r25, 0x04	; 4
     73e:	6f d1       	rcall	.+734    	; 0xa1e <_ZN7Frame_t10printFrameEPKc>
     740:	72 c0       	rjmp	.+228    	; 0x826 <_Z5beginv+0x286>
				else
					Frame.printFrame(Commands.REPLY_ERROR_INWALID_PARAMS);
     742:	68 89       	ldd	r22, Y+16	; 0x10
     744:	79 89       	ldd	r23, Y+17	; 0x11
     746:	8e e7       	ldi	r24, 0x7E	; 126
     748:	94 e0       	ldi	r25, 0x04	; 4
     74a:	69 d1       	rcall	.+722    	; 0xa1e <_ZN7Frame_t10printFrameEPKc>
     74c:	6c c0       	rjmp	.+216    	; 0x826 <_Z5beginv+0x286>
			} else if(Frame.receivedCommand(Buffer.get(), received_bytes, Commands.COMMAND_DISABLE_SW)){
     74e:	ae 80       	ldd	r10, Y+6	; 0x06
     750:	bf 80       	ldd	r11, Y+7	; 0x07
     752:	d0 90 7d 04 	lds	r13, 0x047D
     756:	83 e8       	ldi	r24, 0x83	; 131
     758:	94 e0       	ldi	r25, 0x04	; 4
     75a:	d3 de       	rcall	.-602    	; 0x502 <_ZN8Buffer_t3getEv>
     75c:	95 01       	movw	r18, r10
     75e:	4d 2d       	mov	r20, r13
     760:	bc 01       	movw	r22, r24
     762:	8e e7       	ldi	r24, 0x7E	; 126
     764:	94 e0       	ldi	r25, 0x04	; 4
     766:	21 d1       	rcall	.+578    	; 0x9aa <_ZN7Frame_t15receivedCommandEPhhPKc>
     768:	88 23       	and	r24, r24
     76a:	09 f4       	brne	.+2      	; 0x76e <_Z5beginv+0x1ce>
     76c:	57 c0       	rjmp	.+174    	; 0x81c <_Z5beginv+0x27c>
				if ((Switches.loadParameter(Buffer.get())>=0)&&(Switches.loadParameter(Buffer.get())<=10)){
     76e:	83 e8       	ldi	r24, 0x83	; 131
     770:	94 e0       	ldi	r25, 0x04	; 4
     772:	c7 de       	rcall	.-626    	; 0x502 <_ZN8Buffer_t3getEv>
     774:	bc 01       	movw	r22, r24
     776:	88 e7       	ldi	r24, 0x78	; 120
     778:	93 e0       	ldi	r25, 0x03	; 3
     77a:	d8 d3       	rcall	.+1968   	; 0xf2c <_ZN10Switches_t13loadParameterEPh>
     77c:	99 23       	and	r25, r25
     77e:	0c f4       	brge	.+2      	; 0x782 <_Z5beginv+0x1e2>
     780:	38 c0       	rjmp	.+112    	; 0x7f2 <_Z5beginv+0x252>
     782:	83 e8       	ldi	r24, 0x83	; 131
     784:	94 e0       	ldi	r25, 0x04	; 4
     786:	bd de       	rcall	.-646    	; 0x502 <_ZN8Buffer_t3getEv>
     788:	bc 01       	movw	r22, r24
     78a:	88 e7       	ldi	r24, 0x78	; 120
     78c:	93 e0       	ldi	r25, 0x03	; 3
     78e:	ce d3       	rcall	.+1948   	; 0xf2c <_ZN10Switches_t13loadParameterEPh>
     790:	0b 97       	sbiw	r24, 0x0b	; 11
     792:	7c f5       	brge	.+94     	; 0x7f2 <_Z5beginv+0x252>
					Serial0.printf(Commands.COMMAND_DISABLE_SW);
     794:	8f 81       	ldd	r24, Y+7	; 0x07
     796:	8f 93       	push	r24
     798:	8e 81       	ldd	r24, Y+6	; 0x06
     79a:	8f 93       	push	r24
     79c:	1f 93       	push	r17
     79e:	0f 93       	push	r16
     7a0:	d4 de       	rcall	.-600    	; 0x54a <_ZN8SerialX_ILi0EE6printfEPKcz>
					Frame.printCommandDataSeparator();
     7a2:	8e e7       	ldi	r24, 0x7E	; 126
     7a4:	94 e0       	ldi	r25, 0x04	; 4
     7a6:	e7 d0       	rcall	.+462    	; 0x976 <_ZN7Frame_t25printCommandDataSeparatorEv>
					Serial0.printf("%i", Switches.loadParameter(Buffer.get()));
     7a8:	83 e8       	ldi	r24, 0x83	; 131
     7aa:	94 e0       	ldi	r25, 0x04	; 4
     7ac:	aa de       	rcall	.-684    	; 0x502 <_ZN8Buffer_t3getEv>
     7ae:	bc 01       	movw	r22, r24
     7b0:	88 e7       	ldi	r24, 0x78	; 120
     7b2:	93 e0       	ldi	r25, 0x03	; 3
     7b4:	bb d3       	rcall	.+1910   	; 0xf2c <_ZN10Switches_t13loadParameterEPh>
     7b6:	9f 93       	push	r25
     7b8:	8f 93       	push	r24
     7ba:	ff 92       	push	r15
     7bc:	ef 92       	push	r14
     7be:	1f 93       	push	r17
     7c0:	0f 93       	push	r16
     7c2:	c3 de       	rcall	.-634    	; 0x54a <_ZN8SerialX_ILi0EE6printfEPKcz>
					Frame.printTerminator();
     7c4:	8e e7       	ldi	r24, 0x7E	; 126
     7c6:	94 e0       	ldi	r25, 0x04	; 4
     7c8:	93 d0       	rcall	.+294    	; 0x8f0 <_ZN7Frame_t15printTerminatorEv>
					Switches.disableOneSwitch(Switches.loadParameter(Buffer.get()));
     7ca:	83 e8       	ldi	r24, 0x83	; 131
     7cc:	94 e0       	ldi	r25, 0x04	; 4
     7ce:	99 de       	rcall	.-718    	; 0x502 <_ZN8Buffer_t3getEv>
     7d0:	bc 01       	movw	r22, r24
     7d2:	88 e7       	ldi	r24, 0x78	; 120
     7d4:	93 e0       	ldi	r25, 0x03	; 3
     7d6:	aa d3       	rcall	.+1876   	; 0xf2c <_ZN10Switches_t13loadParameterEPh>
     7d8:	68 2f       	mov	r22, r24
     7da:	88 e7       	ldi	r24, 0x78	; 120
     7dc:	93 e0       	ldi	r25, 0x03	; 3
     7de:	70 d3       	rcall	.+1760   	; 0xec0 <_ZN10Switches_t16disableOneSwitchEh>
     7e0:	8d b7       	in	r24, 0x3d	; 61
     7e2:	9e b7       	in	r25, 0x3e	; 62
     7e4:	0a 96       	adiw	r24, 0x0a	; 10
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	f8 94       	cli
     7ea:	9e bf       	out	0x3e, r25	; 62
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	8d bf       	out	0x3d, r24	; 61
     7f0:	1a c0       	rjmp	.+52     	; 0x826 <_Z5beginv+0x286>
				} else if(Switches.loadParameter(Buffer.get())>10)
     7f2:	83 e8       	ldi	r24, 0x83	; 131
     7f4:	94 e0       	ldi	r25, 0x04	; 4
     7f6:	85 de       	rcall	.-758    	; 0x502 <_ZN8Buffer_t3getEv>
     7f8:	bc 01       	movw	r22, r24
     7fa:	88 e7       	ldi	r24, 0x78	; 120
     7fc:	93 e0       	ldi	r25, 0x03	; 3
     7fe:	96 d3       	rcall	.+1836   	; 0xf2c <_ZN10Switches_t13loadParameterEPh>
     800:	0b 97       	sbiw	r24, 0x0b	; 11
     802:	34 f0       	brlt	.+12     	; 0x810 <_Z5beginv+0x270>
				Frame.printFrame(Commands.REPLY_ERROR_PARAM_OUT_OF_RANGE);
     804:	6a 89       	ldd	r22, Y+18	; 0x12
     806:	7b 89       	ldd	r23, Y+19	; 0x13
     808:	8e e7       	ldi	r24, 0x7E	; 126
     80a:	94 e0       	ldi	r25, 0x04	; 4
     80c:	08 d1       	rcall	.+528    	; 0xa1e <_ZN7Frame_t10printFrameEPKc>
     80e:	0b c0       	rjmp	.+22     	; 0x826 <_Z5beginv+0x286>
				else
				Frame.printFrame(Commands.REPLY_ERROR_INWALID_PARAMS);
     810:	68 89       	ldd	r22, Y+16	; 0x10
     812:	79 89       	ldd	r23, Y+17	; 0x11
     814:	8e e7       	ldi	r24, 0x7E	; 126
     816:	94 e0       	ldi	r25, 0x04	; 4
     818:	02 d1       	rcall	.+516    	; 0xa1e <_ZN7Frame_t10printFrameEPKc>
     81a:	05 c0       	rjmp	.+10     	; 0x826 <_Z5beginv+0x286>
			} else 
				Frame.printFrame(Commands.REPLY_ERROR_UNDEFINED_COMMAND);
     81c:	6a 85       	ldd	r22, Y+10	; 0x0a
     81e:	7b 85       	ldd	r23, Y+11	; 0x0b
     820:	8e e7       	ldi	r24, 0x7E	; 126
     822:	94 e0       	ldi	r25, 0x04	; 4
     824:	fc d0       	rcall	.+504    	; 0xa1e <_ZN7Frame_t10printFrameEPKc>
				
			Buffer.clear();
     826:	83 e8       	ldi	r24, 0x83	; 131
     828:	94 e0       	ldi	r25, 0x04	; 4
     82a:	6c de       	rcall	.-808    	; 0x504 <_ZN8Buffer_t5clearEv>
     82c:	c4 ce       	rjmp	.-632    	; 0x5b6 <_Z5beginv+0x16>
		}
		else
			Frame.printFrame(Commands.REPLY_ERROR_FRAME);
     82e:	6c 85       	ldd	r22, Y+12	; 0x0c
     830:	7d 85       	ldd	r23, Y+13	; 0x0d
     832:	8e e7       	ldi	r24, 0x7E	; 126
     834:	94 e0       	ldi	r25, 0x04	; 4
     836:	f3 d0       	rcall	.+486    	; 0xa1e <_ZN7Frame_t10printFrameEPKc>
     838:	be ce       	rjmp	.-644    	; 0x5b6 <_Z5beginv+0x16>

0000083a <_GLOBAL__sub_I_String>:
 * Created: 2016-04-05 03:22:11
 *  Author: Piotr Kuligowski
 */ 

#include "app.h"
String_t String;
     83a:	82 e8       	ldi	r24, 0x82	; 130
     83c:	95 e0       	ldi	r25, 0x05	; 5
     83e:	09 d1       	rcall	.+530    	; 0xa52 <_ZN8String_tC1Ev>
Buffer_t Buffer;
     840:	83 e8       	ldi	r24, 0x83	; 131
     842:	94 e0       	ldi	r25, 0x04	; 4
     844:	67 de       	rcall	.-818    	; 0x514 <_ZN8Buffer_tC1Ev>
Frame_t Frame;
     846:	8e e7       	ldi	r24, 0x7E	; 126
     848:	94 e0       	ldi	r25, 0x04	; 4
     84a:	0a d0       	rcall	.+20     	; 0x860 <_ZN7Frame_tC1Ev>
uint8_t received_bytes;
Commands_t Commands;
Hk_t HK;
     84c:	8e e2       	ldi	r24, 0x2E	; 46
     84e:	94 e0       	ldi	r25, 0x04	; 4
     850:	15 d2       	rcall	.+1066   	; 0xc7c <_ZN4Hk_tC1Ev>
Dac_t DAC;
     852:	84 e8       	ldi	r24, 0x84	; 132
     854:	93 e0       	ldi	r25, 0x03	; 3
     856:	af d1       	rcall	.+862    	; 0xbb6 <_ZN5Dac_tC1Ev>
uint16_t* dac_values;
Switches_t Switches;
     858:	88 e7       	ldi	r24, 0x78	; 120
     85a:	93 e0       	ldi	r25, 0x03	; 3
     85c:	09 c3       	rjmp	.+1554   	; 0xe70 <_ZN10Switches_tC1Ev>
     85e:	08 95       	ret

00000860 <_ZN7Frame_tC1Ev>:
 *  Author: Piotr Kuligowski
 */ 

#include "Frame.h"

Frame_t::Frame_t() {
     860:	fc 01       	movw	r30, r24
     862:	86 e6       	ldi	r24, 0x66	; 102
     864:	93 e0       	ldi	r25, 0x03	; 3
     866:	91 83       	std	Z+1, r25	; 0x01
     868:	80 83       	st	Z, r24
     86a:	8a e0       	ldi	r24, 0x0A	; 10
     86c:	82 83       	std	Z+2, r24	; 0x02
     86e:	80 e2       	ldi	r24, 0x20	; 32
     870:	83 83       	std	Z+3, r24	; 0x03
     872:	8c e2       	ldi	r24, 0x2C	; 44
     874:	84 83       	std	Z+4, r24	; 0x04
     876:	08 95       	ret

00000878 <_ZN7Frame_t13headerIsValidEPh>:
}

bool Frame_t::headerIsValid(uint8_t * data_buffer){
     878:	ef 92       	push	r14
     87a:	ff 92       	push	r15
     87c:	0f 93       	push	r16
     87e:	1f 93       	push	r17
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	1f 92       	push	r1
     886:	cd b7       	in	r28, 0x3d	; 61
     888:	de b7       	in	r29, 0x3e	; 62
     88a:	8c 01       	movw	r16, r24
     88c:	7b 01       	movw	r14, r22
	String_t String;
     88e:	ce 01       	movw	r24, r28
     890:	01 96       	adiw	r24, 0x01	; 1
     892:	df d0       	rcall	.+446    	; 0xa52 <_ZN8String_tC1Ev>
	return String.compare(data_buffer, this->FRAME_HEADER, String.length(this->FRAME_HEADER));
     894:	f8 01       	movw	r30, r16
     896:	60 81       	ld	r22, Z
     898:	71 81       	ldd	r23, Z+1	; 0x01
     89a:	ce 01       	movw	r24, r28
     89c:	01 96       	adiw	r24, 0x01	; 1
     89e:	28 d1       	rcall	.+592    	; 0xaf0 <_ZN8String_t6lengthEPKc>
     8a0:	f8 01       	movw	r30, r16
     8a2:	40 81       	ld	r20, Z
     8a4:	51 81       	ldd	r21, Z+1	; 0x01
     8a6:	28 2f       	mov	r18, r24
     8a8:	b7 01       	movw	r22, r14
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	d2 d0       	rcall	.+420    	; 0xa54 <_ZN8String_t7compareEPhPKch>
}
     8b0:	0f 90       	pop	r0
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	0f 91       	pop	r16
     8ba:	ff 90       	pop	r15
     8bc:	ef 90       	pop	r14
     8be:	08 95       	ret

000008c0 <_ZN7Frame_t9readFrameEPh>:

uint8_t Frame_t::readFrame(uint8_t * data_buffer){
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	db 01       	movw	r26, r22
	uint8_t max_length=255, data_bytes;
	data_bytes = Serial0.read_byte_array_until_term(data_buffer, this->FRAME_TERMINATOR, max_length);
     8c6:	fc 01       	movw	r30, r24
     8c8:	22 81       	ldd	r18, Z+2	; 0x02
            (*out_data) = this->read_byte();
            out_data++;
        }
    }
    uint8_t read_byte_array_until_term(uint8_t * out_data, const uint8_t terminator, uint8_t max_length) {
        uint8_t counter = 0;
     8ca:	80 e0       	ldi	r24, 0x00	; 0
        va_end(aptr);

        this->print_string(this->buffer);
    }
    bool available() {
        return ((REGGEN(UCSR0A) & (1 << REGGEN(RXC0))));
     8cc:	e0 ec       	ldi	r30, 0xC0	; 192
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t read_byte() {
        /* Wait for data to be received */
        while (!this->available()) {
        }
        /* Get and return received data from buffer */
        return REGGEN(UDR0);
     8d0:	c6 ec       	ldi	r28, 0xC6	; 198
     8d2:	d0 e0       	ldi	r29, 0x00	; 0
        va_end(aptr);

        this->print_string(this->buffer);
    }
    bool available() {
        return ((REGGEN(UCSR0A) & (1 << REGGEN(RXC0))));
     8d4:	90 81       	ld	r25, Z
    }
    uint8_t read_byte() {
        /* Wait for data to be received */
        while (!this->available()) {
     8d6:	99 23       	and	r25, r25
     8d8:	ec f7       	brge	.-6      	; 0x8d4 <_ZN7Frame_t9readFrameEPh+0x14>
        }
        /* Get and return received data from buffer */
        return REGGEN(UDR0);
     8da:	98 81       	ld	r25, Y
    }
    uint8_t read_byte_array_until_term(uint8_t * out_data, const uint8_t terminator, uint8_t max_length) {
        uint8_t counter = 0;
        while (max_length--) {
            uint8_t now = this->read_byte();
            (*out_data) = now;
     8dc:	9d 93       	st	X+, r25
            out_data++;
            counter++;
     8de:	8f 5f       	subi	r24, 0xFF	; 255
            if ( now == terminator ) {
     8e0:	29 17       	cp	r18, r25
     8e2:	11 f0       	breq	.+4      	; 0x8e8 <_ZN7Frame_t9readFrameEPh+0x28>
            out_data++;
        }
    }
    uint8_t read_byte_array_until_term(uint8_t * out_data, const uint8_t terminator, uint8_t max_length) {
        uint8_t counter = 0;
        while (max_length--) {
     8e4:	8f 3f       	cpi	r24, 0xFF	; 255
     8e6:	b1 f7       	brne	.-20     	; 0x8d4 <_ZN7Frame_t9readFrameEPh+0x14>
	data_bytes--;
	return data_bytes;
}
     8e8:	81 50       	subi	r24, 0x01	; 1
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	08 95       	ret

000008f0 <_ZN7Frame_t15printTerminatorEv>:

void Frame_t::printTerminator(void){
	Serial0.print_byte(this->FRAME_TERMINATOR);
     8f0:	fc 01       	movw	r30, r24
     8f2:	92 81       	ldd	r25, Z+2	; 0x02
		REGGEN(UCSR0C) = (1 << REGGEN(UCSZ01)) | (1 << REGGEN(UCSZ00));	
    }

    void print_byte(const uint8_t byte) {
        /* Wait for transmit last data buffer */
        while (!(REGGEN(UCSR0A) & (1 << REGGEN(UDRE0)))) {
     8f4:	e0 ec       	ldi	r30, 0xC0	; 192
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	80 81       	ld	r24, Z
     8fa:	85 ff       	sbrs	r24, 5
     8fc:	fd cf       	rjmp	.-6      	; 0x8f8 <_ZN7Frame_t15printTerminatorEv+0x8>
        }
		/* Put data into buffer, sends the data */
        REGGEN(UDR0) = byte;
     8fe:	90 93 c6 00 	sts	0x00C6, r25
     902:	08 95       	ret

00000904 <_ZN7Frame_t11printHeaderEv>:
}

void Frame_t::printHeader(void){
     904:	af 92       	push	r10
     906:	bf 92       	push	r11
     908:	cf 92       	push	r12
     90a:	df 92       	push	r13
     90c:	ff 92       	push	r15
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	1f 92       	push	r1
     918:	cd b7       	in	r28, 0x3d	; 61
     91a:	de b7       	in	r29, 0x3e	; 62
     91c:	6c 01       	movw	r12, r24
	String_t String;
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	97 d0       	rcall	.+302    	; 0xa52 <_ZN8String_tC1Ev>
	for(uint8_t i=0; i<String.length(this->FRAME_HEADER); i++){
     924:	f1 2c       	mov	r15, r1
		REGGEN(UCSR0C) = (1 << REGGEN(UCSZ01)) | (1 << REGGEN(UCSZ00));	
    }

    void print_byte(const uint8_t byte) {
        /* Wait for transmit last data buffer */
        while (!(REGGEN(UCSR0A) & (1 << REGGEN(UDRE0)))) {
     926:	00 ec       	ldi	r16, 0xC0	; 192
     928:	10 e0       	ldi	r17, 0x00	; 0
        }
		/* Put data into buffer, sends the data */
        REGGEN(UDR0) = byte;
     92a:	0f 2e       	mov	r0, r31
     92c:	f6 ec       	ldi	r31, 0xC6	; 198
     92e:	af 2e       	mov	r10, r31
     930:	b1 2c       	mov	r11, r1
     932:	f0 2d       	mov	r31, r0
     934:	0d c0       	rjmp	.+26     	; 0x950 <_ZN7Frame_t11printHeaderEv+0x4c>
		Serial0.print_byte(this->FRAME_HEADER[i]);
     936:	d6 01       	movw	r26, r12
     938:	ed 91       	ld	r30, X+
     93a:	fc 91       	ld	r31, X
     93c:	ef 0d       	add	r30, r15
     93e:	f1 1d       	adc	r31, r1
     940:	80 81       	ld	r24, Z
		REGGEN(UCSR0C) = (1 << REGGEN(UCSZ01)) | (1 << REGGEN(UCSZ00));	
    }

    void print_byte(const uint8_t byte) {
        /* Wait for transmit last data buffer */
        while (!(REGGEN(UCSR0A) & (1 << REGGEN(UDRE0)))) {
     942:	f8 01       	movw	r30, r16
     944:	90 81       	ld	r25, Z
     946:	95 ff       	sbrs	r25, 5
     948:	fc cf       	rjmp	.-8      	; 0x942 <_ZN7Frame_t11printHeaderEv+0x3e>
        }
		/* Put data into buffer, sends the data */
        REGGEN(UDR0) = byte;
     94a:	d5 01       	movw	r26, r10
     94c:	8c 93       	st	X, r24
	Serial0.print_byte(this->FRAME_TERMINATOR);
}

void Frame_t::printHeader(void){
	String_t String;
	for(uint8_t i=0; i<String.length(this->FRAME_HEADER); i++){
     94e:	f3 94       	inc	r15
     950:	f6 01       	movw	r30, r12
     952:	60 81       	ld	r22, Z
     954:	71 81       	ldd	r23, Z+1	; 0x01
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	ca d0       	rcall	.+404    	; 0xaf0 <_ZN8String_t6lengthEPKc>
     95c:	f8 16       	cp	r15, r24
     95e:	58 f3       	brcs	.-42     	; 0x936 <_ZN7Frame_t11printHeaderEv+0x32>
		Serial0.print_byte(this->FRAME_HEADER[i]);
	}
}
     960:	0f 90       	pop	r0
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	1f 91       	pop	r17
     968:	0f 91       	pop	r16
     96a:	ff 90       	pop	r15
     96c:	df 90       	pop	r13
     96e:	cf 90       	pop	r12
     970:	bf 90       	pop	r11
     972:	af 90       	pop	r10
     974:	08 95       	ret

00000976 <_ZN7Frame_t25printCommandDataSeparatorEv>:
	Serial0.printf(frame);
	this->printTerminator();
}

void Frame_t::printCommandDataSeparator(void){
	Serial0.print_byte(this->FRAME_COMMAND_DATA_SEPARATOR);
     976:	fc 01       	movw	r30, r24
     978:	93 81       	ldd	r25, Z+3	; 0x03
		REGGEN(UCSR0C) = (1 << REGGEN(UCSZ01)) | (1 << REGGEN(UCSZ00));	
    }

    void print_byte(const uint8_t byte) {
        /* Wait for transmit last data buffer */
        while (!(REGGEN(UCSR0A) & (1 << REGGEN(UDRE0)))) {
     97a:	e0 ec       	ldi	r30, 0xC0	; 192
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	80 81       	ld	r24, Z
     980:	85 ff       	sbrs	r24, 5
     982:	fd cf       	rjmp	.-6      	; 0x97e <_ZN7Frame_t25printCommandDataSeparatorEv+0x8>
        }
		/* Put data into buffer, sends the data */
        REGGEN(UDR0) = byte;
     984:	90 93 c6 00 	sts	0x00C6, r25
     988:	08 95       	ret

0000098a <_ZN7Frame_t23getCommandDataSeparatorEv>:
}

uint8_t Frame_t::getCommandDataSeparator(void){
	return this->FRAME_COMMAND_DATA_SEPARATOR;
}
     98a:	fc 01       	movw	r30, r24
     98c:	83 81       	ldd	r24, Z+3	; 0x03
     98e:	08 95       	ret

00000990 <_ZN7Frame_t19printParamSeparatorEv>:

void Frame_t::printParamSeparator(){
	Serial0.print_byte(this->FRAME_PARAM_SEPARATOR);
     990:	fc 01       	movw	r30, r24
     992:	94 81       	ldd	r25, Z+4	; 0x04
		REGGEN(UCSR0C) = (1 << REGGEN(UCSZ01)) | (1 << REGGEN(UCSZ00));	
    }

    void print_byte(const uint8_t byte) {
        /* Wait for transmit last data buffer */
        while (!(REGGEN(UCSR0A) & (1 << REGGEN(UDRE0)))) {
     994:	e0 ec       	ldi	r30, 0xC0	; 192
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	80 81       	ld	r24, Z
     99a:	85 ff       	sbrs	r24, 5
     99c:	fd cf       	rjmp	.-6      	; 0x998 <_ZN7Frame_t19printParamSeparatorEv+0x8>
        }
		/* Put data into buffer, sends the data */
        REGGEN(UDR0) = byte;
     99e:	90 93 c6 00 	sts	0x00C6, r25
     9a2:	08 95       	ret

000009a4 <_ZN7Frame_t17getParamSeparatorEv>:
}

uint8_t Frame_t::getParamSeparator(void){
	return this->FRAME_PARAM_SEPARATOR;
}
     9a4:	fc 01       	movw	r30, r24
     9a6:	84 81       	ldd	r24, Z+4	; 0x04
     9a8:	08 95       	ret

000009aa <_ZN7Frame_t15receivedCommandEPhhPKc>:

bool Frame_t::receivedCommand(uint8_t * data_buffer, uint8_t data_bytes, const char* command){
     9aa:	9f 92       	push	r9
     9ac:	af 92       	push	r10
     9ae:	bf 92       	push	r11
     9b0:	cf 92       	push	r12
     9b2:	df 92       	push	r13
     9b4:	ef 92       	push	r14
     9b6:	ff 92       	push	r15
     9b8:	0f 93       	push	r16
     9ba:	1f 93       	push	r17
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	1f 92       	push	r1
     9c2:	cd b7       	in	r28, 0x3d	; 61
     9c4:	de b7       	in	r29, 0x3e	; 62
     9c6:	8c 01       	movw	r16, r24
     9c8:	7b 01       	movw	r14, r22
     9ca:	a4 2e       	mov	r10, r20
     9cc:	69 01       	movw	r12, r18
	String_t String;
     9ce:	ce 01       	movw	r24, r28
     9d0:	01 96       	adiw	r24, 0x01	; 1
     9d2:	3f d0       	rcall	.+126    	; 0xa52 <_ZN8String_tC1Ev>
	return	(String.length(command)==String.lengthUpToTerminator(data_buffer, this->FRAME_COMMAND_DATA_SEPARATOR))
     9d4:	b6 01       	movw	r22, r12
     9d6:	ce 01       	movw	r24, r28
     9d8:	01 96       	adiw	r24, 0x01	; 1
     9da:	8a d0       	rcall	.+276    	; 0xaf0 <_ZN8String_t6lengthEPKc>
     9dc:	98 2e       	mov	r9, r24
     9de:	f8 01       	movw	r30, r16
     9e0:	43 81       	ldd	r20, Z+3	; 0x03
     9e2:	b7 01       	movw	r22, r14
     9e4:	ce 01       	movw	r24, r28
     9e6:	01 96       	adiw	r24, 0x01	; 1
     9e8:	b1 d0       	rcall	.+354    	; 0xb4c <_ZN8String_t20lengthUpToTerminatorEPhh>
     9ea:	bb 24       	eor	r11, r11
     9ec:	b3 94       	inc	r11
     9ee:	98 12       	cpse	r9, r24
     9f0:	b1 2c       	mov	r11, r1
			&(String.compareUpToTerminator(data_buffer, command, data_bytes, this->FRAME_COMMAND_DATA_SEPARATOR));
     9f2:	f8 01       	movw	r30, r16
     9f4:	03 81       	ldd	r16, Z+3	; 0x03
     9f6:	2a 2d       	mov	r18, r10
     9f8:	a6 01       	movw	r20, r12
     9fa:	b7 01       	movw	r22, r14
     9fc:	ce 01       	movw	r24, r28
     9fe:	01 96       	adiw	r24, 0x01	; 1
     a00:	4b d0       	rcall	.+150    	; 0xa98 <_ZN8String_t21compareUpToTerminatorEPhPKchh>
}
     a02:	8b 21       	and	r24, r11
     a04:	0f 90       	pop	r0
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	ff 90       	pop	r15
     a10:	ef 90       	pop	r14
     a12:	df 90       	pop	r13
     a14:	cf 90       	pop	r12
     a16:	bf 90       	pop	r11
     a18:	af 90       	pop	r10
     a1a:	9f 90       	pop	r9
     a1c:	08 95       	ret

00000a1e <_ZN7Frame_t10printFrameEPKc>:
	for(uint8_t i=0; i<String.length(this->FRAME_HEADER); i++){
		Serial0.print_byte(this->FRAME_HEADER[i]);
	}
}

void Frame_t::printFrame(const char* frame){
     a1e:	0f 93       	push	r16
     a20:	1f 93       	push	r17
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	ec 01       	movw	r28, r24
     a28:	16 2f       	mov	r17, r22
     a2a:	07 2f       	mov	r16, r23
	this->printHeader();
     a2c:	6b df       	rcall	.-298    	; 0x904 <_ZN7Frame_t11printHeaderEv>
	Serial0.printf(frame);
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
     a32:	85 eb       	ldi	r24, 0xB5	; 181
     a34:	95 e0       	ldi	r25, 0x05	; 5
     a36:	9f 93       	push	r25
     a38:	8f 93       	push	r24
     a3a:	87 dd       	rcall	.-1266   	; 0x54a <_ZN8SerialX_ILi0EE6printfEPKcz>
	this->printTerminator();
     a3c:	ce 01       	movw	r24, r28
     a3e:	58 df       	rcall	.-336    	; 0x8f0 <_ZN7Frame_t15printTerminatorEv>
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
}
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	0f 91       	pop	r16
     a50:	08 95       	ret

00000a52 <_ZN8String_tC1Ev>:
 *  Author: Piotr Kuligowski
 */ 

#include "String.h"

String_t::String_t() {
     a52:	08 95       	ret

00000a54 <_ZN8String_t7compareEPhPKch>:
}

bool String_t::compare(uint8_t * string_a, const char * string_b, uint8_t ln){
	for(uint8_t i=0; i<ln; i++){
     a54:	22 23       	and	r18, r18
     a56:	d1 f0       	breq	.+52     	; 0xa8c <_ZN8String_t7compareEPhPKch+0x38>
		if(!(string_a[i]==string_b[i]))
     a58:	fb 01       	movw	r30, r22
     a5a:	90 81       	ld	r25, Z
     a5c:	fa 01       	movw	r30, r20
     a5e:	80 81       	ld	r24, Z
     a60:	98 13       	cpse	r25, r24
     a62:	16 c0       	rjmp	.+44     	; 0xa90 <_ZN8String_t7compareEPhPKch+0x3c>
     a64:	fb 01       	movw	r30, r22
     a66:	31 96       	adiw	r30, 0x01	; 1
     a68:	da 01       	movw	r26, r20
     a6a:	11 96       	adiw	r26, 0x01	; 1
     a6c:	21 50       	subi	r18, 0x01	; 1
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	2f 5f       	subi	r18, 0xFF	; 255
     a72:	3f 4f       	sbci	r19, 0xFF	; 255
     a74:	62 0f       	add	r22, r18
     a76:	73 1f       	adc	r23, r19
     a78:	04 c0       	rjmp	.+8      	; 0xa82 <_ZN8String_t7compareEPhPKch+0x2e>
     a7a:	91 91       	ld	r25, Z+
     a7c:	8d 91       	ld	r24, X+
     a7e:	98 13       	cpse	r25, r24
     a80:	09 c0       	rjmp	.+18     	; 0xa94 <_ZN8String_t7compareEPhPKch+0x40>

String_t::String_t() {
}

bool String_t::compare(uint8_t * string_a, const char * string_b, uint8_t ln){
	for(uint8_t i=0; i<ln; i++){
     a82:	e6 17       	cp	r30, r22
     a84:	f7 07       	cpc	r31, r23
     a86:	c9 f7       	brne	.-14     	; 0xa7a <_ZN8String_t7compareEPhPKch+0x26>
		if(!(string_a[i]==string_b[i]))
		return false;
	}
	return true;
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	08 95       	ret
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	08 95       	ret
}

bool String_t::compare(uint8_t * string_a, const char * string_b, uint8_t ln){
	for(uint8_t i=0; i<ln; i++){
		if(!(string_a[i]==string_b[i]))
		return false;
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	08 95       	ret
     a94:	80 e0       	ldi	r24, 0x00	; 0
	}
	return true;
}
     a96:	08 95       	ret

00000a98 <_ZN8String_t21compareUpToTerminatorEPhPKchh>:

bool String_t::compareUpToTerminator(uint8_t * string_a, const char * string_b, uint8_t ln, const uint8_t terminator){
     a98:	0f 93       	push	r16
	for(uint8_t i=0; i<ln; i++){
     a9a:	22 23       	and	r18, r18
     a9c:	f1 f0       	breq	.+60     	; 0xada <_ZN8String_t21compareUpToTerminatorEPhPKchh+0x42>
		if (string_a[i]==terminator)
     a9e:	fb 01       	movw	r30, r22
     aa0:	80 81       	ld	r24, Z
     aa2:	80 17       	cp	r24, r16
     aa4:	e1 f0       	breq	.+56     	; 0xade <_ZN8String_t21compareUpToTerminatorEPhPKchh+0x46>
			return true;
		if(!(string_a[i]==string_b[i]))
     aa6:	fa 01       	movw	r30, r20
     aa8:	90 81       	ld	r25, Z
     aaa:	89 13       	cpse	r24, r25
     aac:	1a c0       	rjmp	.+52     	; 0xae2 <_ZN8String_t21compareUpToTerminatorEPhPKchh+0x4a>
     aae:	da 01       	movw	r26, r20
     ab0:	11 96       	adiw	r26, 0x01	; 1
     ab2:	fb 01       	movw	r30, r22
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	21 50       	subi	r18, 0x01	; 1
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	2f 5f       	subi	r18, 0xFF	; 255
     abc:	3f 4f       	sbci	r19, 0xFF	; 255
     abe:	62 0f       	add	r22, r18
     ac0:	73 1f       	adc	r23, r19
     ac2:	06 c0       	rjmp	.+12     	; 0xad0 <_ZN8String_t21compareUpToTerminatorEPhPKchh+0x38>
	return true;
}

bool String_t::compareUpToTerminator(uint8_t * string_a, const char * string_b, uint8_t ln, const uint8_t terminator){
	for(uint8_t i=0; i<ln; i++){
		if (string_a[i]==terminator)
     ac4:	81 91       	ld	r24, Z+
     ac6:	80 17       	cp	r24, r16
     ac8:	71 f0       	breq	.+28     	; 0xae6 <_ZN8String_t21compareUpToTerminatorEPhPKchh+0x4e>
			return true;
		if(!(string_a[i]==string_b[i]))
     aca:	9d 91       	ld	r25, X+
     acc:	89 13       	cpse	r24, r25
     ace:	0d c0       	rjmp	.+26     	; 0xaea <_ZN8String_t21compareUpToTerminatorEPhPKchh+0x52>
	}
	return true;
}

bool String_t::compareUpToTerminator(uint8_t * string_a, const char * string_b, uint8_t ln, const uint8_t terminator){
	for(uint8_t i=0; i<ln; i++){
     ad0:	e6 17       	cp	r30, r22
     ad2:	f7 07       	cpc	r31, r23
     ad4:	b9 f7       	brne	.-18     	; 0xac4 <_ZN8String_t21compareUpToTerminatorEPhPKchh+0x2c>
		if (string_a[i]==terminator)
			return true;
		if(!(string_a[i]==string_b[i]))
			return false;
	}
	return true;
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	09 c0       	rjmp	.+18     	; 0xaec <_ZN8String_t21compareUpToTerminatorEPhPKchh+0x54>
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	07 c0       	rjmp	.+14     	; 0xaec <_ZN8String_t21compareUpToTerminatorEPhPKchh+0x54>
}

bool String_t::compareUpToTerminator(uint8_t * string_a, const char * string_b, uint8_t ln, const uint8_t terminator){
	for(uint8_t i=0; i<ln; i++){
		if (string_a[i]==terminator)
			return true;
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <_ZN8String_t21compareUpToTerminatorEPhPKchh+0x54>
		if(!(string_a[i]==string_b[i]))
			return false;
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	03 c0       	rjmp	.+6      	; 0xaec <_ZN8String_t21compareUpToTerminatorEPhPKchh+0x54>
}

bool String_t::compareUpToTerminator(uint8_t * string_a, const char * string_b, uint8_t ln, const uint8_t terminator){
	for(uint8_t i=0; i<ln; i++){
		if (string_a[i]==terminator)
			return true;
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	01 c0       	rjmp	.+2      	; 0xaec <_ZN8String_t21compareUpToTerminatorEPhPKchh+0x54>
		if(!(string_a[i]==string_b[i]))
			return false;
     aea:	80 e0       	ldi	r24, 0x00	; 0
	}
	return true;
}
     aec:	0f 91       	pop	r16
     aee:	08 95       	ret

00000af0 <_ZN8String_t6lengthEPKc>:

uint8_t String_t::length(const char * string){
	uint8_t i=0;
	for(i=0; string[i]<255; i++){
		if (string[i]==0)
     af0:	fb 01       	movw	r30, r22
     af2:	80 81       	ld	r24, Z
     af4:	81 50       	subi	r24, 0x01	; 1
     af6:	8e 3f       	cpi	r24, 0xFE	; 254
     af8:	50 f4       	brcc	.+20     	; 0xb0e <_ZN8String_t6lengthEPKc+0x1e>
     afa:	80 e0       	ldi	r24, 0x00	; 0
	return true;
}

uint8_t String_t::length(const char * string){
	uint8_t i=0;
	for(i=0; string[i]<255; i++){
     afc:	8f 5f       	subi	r24, 0xFF	; 255
     afe:	fb 01       	movw	r30, r22
     b00:	e8 0f       	add	r30, r24
     b02:	f1 1d       	adc	r31, r1
		if (string[i]==0)
     b04:	90 81       	ld	r25, Z
     b06:	91 50       	subi	r25, 0x01	; 1
     b08:	9e 3f       	cpi	r25, 0xFE	; 254
     b0a:	c0 f3       	brcs	.-16     	; 0xafc <_ZN8String_t6lengthEPKc+0xc>
     b0c:	08 95       	ret
	return true;
}

uint8_t String_t::length(const char * string){
	uint8_t i=0;
	for(i=0; string[i]<255; i++){
     b0e:	80 e0       	ldi	r24, 0x00	; 0
		if (string[i]==0)
		break;
	}
	return i;
}
     b10:	08 95       	ret

00000b12 <_ZN8String_t20lengthUpToTerminatorEPhhh>:
	return this->lengthUpToTerminator(string, terminator, 0);
}

uint8_t String_t::lengthUpToTerminator(uint8_t * string, const uint8_t terminator, uint8_t start_index){
	uint8_t i=0;
	for(i=start_index; string[i]<255; i++){
     b12:	fb 01       	movw	r30, r22
     b14:	e2 0f       	add	r30, r18
     b16:	f1 1d       	adc	r31, r1
     b18:	80 81       	ld	r24, Z
     b1a:	8f 3f       	cpi	r24, 0xFF	; 255
     b1c:	a9 f0       	breq	.+42     	; 0xb48 <_ZN8String_t20lengthUpToTerminatorEPhhh+0x36>
		if (string[i]==0)
     b1e:	88 23       	and	r24, r24
     b20:	29 f0       	breq	.+10     	; 0xb2c <_ZN8String_t20lengthUpToTerminatorEPhhh+0x1a>
		return i-1;
		if (string[i]==terminator)
     b22:	84 13       	cpse	r24, r20
     b24:	0a c0       	rjmp	.+20     	; 0xb3a <_ZN8String_t20lengthUpToTerminatorEPhhh+0x28>
     b26:	07 c0       	rjmp	.+14     	; 0xb36 <_ZN8String_t20lengthUpToTerminatorEPhhh+0x24>
}

uint8_t String_t::lengthUpToTerminator(uint8_t * string, const uint8_t terminator, uint8_t start_index){
	uint8_t i=0;
	for(i=start_index; string[i]<255; i++){
		if (string[i]==0)
     b28:	91 11       	cpse	r25, r1
     b2a:	03 c0       	rjmp	.+6      	; 0xb32 <_ZN8String_t20lengthUpToTerminatorEPhhh+0x20>
		return i-1;
     b2c:	8f ef       	ldi	r24, 0xFF	; 255
     b2e:	82 0f       	add	r24, r18
     b30:	08 95       	ret
		if (string[i]==terminator)
     b32:	94 13       	cpse	r25, r20
     b34:	02 c0       	rjmp	.+4      	; 0xb3a <_ZN8String_t20lengthUpToTerminatorEPhhh+0x28>
		return i;
     b36:	82 2f       	mov	r24, r18
     b38:	08 95       	ret
	return this->lengthUpToTerminator(string, terminator, 0);
}

uint8_t String_t::lengthUpToTerminator(uint8_t * string, const uint8_t terminator, uint8_t start_index){
	uint8_t i=0;
	for(i=start_index; string[i]<255; i++){
     b3a:	2f 5f       	subi	r18, 0xFF	; 255
     b3c:	fb 01       	movw	r30, r22
     b3e:	e2 0f       	add	r30, r18
     b40:	f1 1d       	adc	r31, r1
     b42:	90 81       	ld	r25, Z
     b44:	9f 3f       	cpi	r25, 0xFF	; 255
     b46:	81 f7       	brne	.-32     	; 0xb28 <_ZN8String_t20lengthUpToTerminatorEPhhh+0x16>
		if (string[i]==0)
		return i-1;
		if (string[i]==terminator)
		return i;
	}
	return i;
     b48:	82 2f       	mov	r24, r18
}
     b4a:	08 95       	ret

00000b4c <_ZN8String_t20lengthUpToTerminatorEPhh>:
	}
	return i;
}

uint8_t String_t::lengthUpToTerminator(uint8_t * string, const uint8_t terminator){
	return this->lengthUpToTerminator(string, terminator, 0);
     b4c:	20 e0       	ldi	r18, 0x00	; 0
     b4e:	e1 cf       	rjmp	.-62     	; 0xb12 <_ZN8String_t20lengthUpToTerminatorEPhhh>
}
     b50:	08 95       	ret

00000b52 <_ZN8String_t8isNumberEh>:
	}
	return i;
}

bool String_t::isNumber(uint8_t character){
	if ((character>=48)&(character<=57))
     b52:	60 53       	subi	r22, 0x30	; 48
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	6a 30       	cpi	r22, 0x0A	; 10
     b58:	08 f0       	brcs	.+2      	; 0xb5c <_ZN8String_t8isNumberEh+0xa>
     b5a:	80 e0       	ldi	r24, 0x00	; 0
		return true;
	else
		return false;
}
     b5c:	08 95       	ret

00000b5e <_ZN8String_t8toNumberEh>:
	}
	return i;
}

bool String_t::isNumber(uint8_t character){
	if ((character>=48)&(character<=57))
     b5e:	80 ed       	ldi	r24, 0xD0	; 208
     b60:	86 0f       	add	r24, r22
	else
		return false;
}

uint8_t String_t::toNumber(uint8_t character){
	if (this->isNumber(character))
     b62:	8a 30       	cpi	r24, 0x0A	; 10
     b64:	08 f0       	brcs	.+2      	; 0xb68 <_ZN8String_t8toNumberEh+0xa>
		return (character-48);
	else
		return 0;
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	08 95       	ret

00000b6a <_ZN5Dac_t4initEv>:

Dac_t::Dac_t() {
	this->init();
}

void Dac_t::init(void){
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	ec 01       	movw	r28, r24
	MUX.init();
     b74:	8c 01       	movw	r16, r24
     b76:	0f 5f       	subi	r16, 0xFF	; 255
     b78:	1f 4f       	sbci	r17, 0xFF	; 255
     b7a:	c8 01       	movw	r24, r16
     b7c:	fc d2       	rcall	.+1528   	; 0x1176 <_ZN17MAX306EWIdouble_t4initEv>
	DAC121.init();
     b7e:	ce 01       	movw	r24, r28
     b80:	f1 d2       	rcall	.+1506   	; 0x1164 <_ZN12DAC121S101_t4initEv>
	MUX.select(21);
     b82:	65 e1       	ldi	r22, 0x15	; 21
     b84:	c8 01       	movw	r24, r16
     b86:	15 d3       	rcall	.+1578   	; 0x11b2 <_ZN17MAX306EWIdouble_t6selectEh>
     b88:	fe 01       	movw	r30, r28
     b8a:	e6 58       	subi	r30, 0x86	; 134
     b8c:	ff 4f       	sbci	r31, 0xFF	; 255
     b8e:	de 01       	movw	r26, r28
     b90:	a6 5b       	subi	r26, 0xB6	; 182
     b92:	bf 4f       	sbci	r27, 0xFF	; 255
     b94:	ce 01       	movw	r24, r28
     b96:	86 56       	subi	r24, 0x66	; 102
     b98:	9f 4f       	sbci	r25, 0xFF	; 255

	for(uint8_t i=0; i<16; i++){
		this->parameters_actual[i]=2047;
     b9a:	2f ef       	ldi	r18, 0xFF	; 255
     b9c:	37 e0       	ldi	r19, 0x07	; 7
     b9e:	21 93       	st	Z+, r18
     ba0:	31 93       	st	Z+, r19
		this->parameters_target[i]=2047;
     ba2:	2d 93       	st	X+, r18
     ba4:	3d 93       	st	X+, r19
void Dac_t::init(void){
	MUX.init();
	DAC121.init();
	MUX.select(21);

	for(uint8_t i=0; i<16; i++){
     ba6:	e8 17       	cp	r30, r24
     ba8:	f9 07       	cpc	r31, r25
     baa:	c9 f7       	brne	.-14     	; 0xb9e <_ZN5Dac_t4initEv+0x34>
		this->parameters_actual[i]=2047;
		this->parameters_target[i]=2047;
	}
}
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	1f 91       	pop	r17
     bb2:	0f 91       	pop	r16
     bb4:	08 95       	ret

00000bb6 <_ZN5Dac_tC1Ev>:
 *  Author: Piotr Kuligowski
 */ 

#include "Dac.h"

Dac_t::Dac_t() {
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	ec 01       	movw	r28, r24
     bbc:	da d2       	rcall	.+1460   	; 0x1172 <_ZN12DAC121S101_tC1Ev>
     bbe:	ce 01       	movw	r24, r28
     bc0:	01 96       	adiw	r24, 0x01	; 1
     bc2:	e2 d2       	rcall	.+1476   	; 0x1188 <_ZN17MAX306EWIdouble_tC1Ev>
     bc4:	ce 01       	movw	r24, r28
     bc6:	84 96       	adiw	r24, 0x24	; 36
     bc8:	4b de       	rcall	.-874    	; 0x860 <_ZN7Frame_tC1Ev>


#ifndef COMMANDS_H_
#define COMMANDS_H_

class Commands_t {
     bca:	83 e2       	ldi	r24, 0x23	; 35
     bcc:	92 e0       	ldi	r25, 0x02	; 2
     bce:	9a a7       	std	Y+42, r25	; 0x2a
     bd0:	89 a7       	std	Y+41, r24	; 0x29
     bd2:	8e e2       	ldi	r24, 0x2E	; 46
     bd4:	92 e0       	ldi	r25, 0x02	; 2
     bd6:	9c a7       	std	Y+44, r25	; 0x2c
     bd8:	8b a7       	std	Y+43, r24	; 0x2b
     bda:	89 e3       	ldi	r24, 0x39	; 57
     bdc:	92 e0       	ldi	r25, 0x02	; 2
     bde:	9e a7       	std	Y+46, r25	; 0x2e
     be0:	8d a7       	std	Y+45, r24	; 0x2d
     be2:	86 e4       	ldi	r24, 0x46	; 70
     be4:	92 e0       	ldi	r25, 0x02	; 2
     be6:	98 ab       	std	Y+48, r25	; 0x30
     be8:	8f a7       	std	Y+47, r24	; 0x2f
     bea:	84 e5       	ldi	r24, 0x54	; 84
     bec:	92 e0       	ldi	r25, 0x02	; 2
     bee:	9a ab       	std	Y+50, r25	; 0x32
     bf0:	89 ab       	std	Y+49, r24	; 0x31
     bf2:	83 e6       	ldi	r24, 0x63	; 99
     bf4:	92 e0       	ldi	r25, 0x02	; 2
     bf6:	9c ab       	std	Y+52, r25	; 0x34
     bf8:	8b ab       	std	Y+51, r24	; 0x33
     bfa:	8a e7       	ldi	r24, 0x7A	; 122
     bfc:	92 e0       	ldi	r25, 0x02	; 2
     bfe:	9e ab       	std	Y+54, r25	; 0x36
     c00:	8d ab       	std	Y+53, r24	; 0x35
     c02:	86 e8       	ldi	r24, 0x86	; 134
     c04:	92 e0       	ldi	r25, 0x02	; 2
     c06:	98 af       	std	Y+56, r25	; 0x38
     c08:	8f ab       	std	Y+55, r24	; 0x37
     c0a:	85 e9       	ldi	r24, 0x95	; 149
     c0c:	92 e0       	ldi	r25, 0x02	; 2
     c0e:	9a af       	std	Y+58, r25	; 0x3a
     c10:	89 af       	std	Y+57, r24	; 0x39
     c12:	8d ea       	ldi	r24, 0xAD	; 173
     c14:	92 e0       	ldi	r25, 0x02	; 2
     c16:	9c af       	std	Y+60, r25	; 0x3c
     c18:	8b af       	std	Y+59, r24	; 0x3b
     c1a:	82 e3       	ldi	r24, 0x32	; 50
     c1c:	92 e0       	ldi	r25, 0x02	; 2
     c1e:	9e af       	std	Y+62, r25	; 0x3e
     c20:	8d af       	std	Y+61, r24	; 0x3d
     c22:	fe 01       	movw	r30, r28
     c24:	ff 96       	adiw	r30, 0x3f	; 63
     c26:	87 ec       	ldi	r24, 0xC7	; 199
     c28:	92 e0       	ldi	r25, 0x02	; 2
     c2a:	91 83       	std	Z+1, r25	; 0x01
     c2c:	80 83       	st	Z, r24
     c2e:	32 96       	adiw	r30, 0x02	; 2
     c30:	8d ec       	ldi	r24, 0xCD	; 205
     c32:	92 e0       	ldi	r25, 0x02	; 2
     c34:	91 83       	std	Z+1, r25	; 0x01
     c36:	80 83       	st	Z, r24
     c38:	32 96       	adiw	r30, 0x02	; 2
     c3a:	8b ef       	ldi	r24, 0xFB	; 251
     c3c:	92 e0       	ldi	r25, 0x02	; 2
     c3e:	91 83       	std	Z+1, r25	; 0x01
     c40:	80 83       	st	Z, r24
     c42:	32 96       	adiw	r30, 0x02	; 2
     c44:	8a e2       	ldi	r24, 0x2A	; 42
     c46:	93 e0       	ldi	r25, 0x03	; 3
     c48:	91 83       	std	Z+1, r25	; 0x01
     c4a:	80 83       	st	Z, r24
     c4c:	32 96       	adiw	r30, 0x02	; 2
     c4e:	88 e5       	ldi	r24, 0x58	; 88
     c50:	93 e0       	ldi	r25, 0x03	; 3
     c52:	91 83       	std	Z+1, r25	; 0x01
     c54:	80 83       	st	Z, r24
     c56:	ce 01       	movw	r24, r28
     c58:	87 5b       	subi	r24, 0xB7	; 183
     c5a:	9f 4f       	sbci	r25, 0xFF	; 255
     c5c:	fa de       	rcall	.-524    	; 0xa52 <_ZN8String_tC1Ev>
	this->init();
     c5e:	ce 01       	movw	r24, r28
     c60:	84 df       	rcall	.-248    	; 0xb6a <_ZN5Dac_t4initEv>
}
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	08 95       	ret

00000c68 <_ZN4Hk_t4initEv>:

Hk_t::Hk_t() {
	this->init();
}

void Hk_t::init(void){
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	ec 01       	movw	r28, r24
	MUX.init();
     c6e:	07 96       	adiw	r24, 0x07	; 7
     c70:	82 d2       	rcall	.+1284   	; 0x1176 <_ZN17MAX306EWIdouble_t4initEv>
	ADC128.init();
     c72:	ce 01       	movw	r24, r28
     c74:	ea d1       	rcall	.+980    	; 0x104a <_ZN12ADC128S102_t4initEv>
}
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	08 95       	ret

00000c7c <_ZN4Hk_tC1Ev>:
 *  Author: Piotr Kuligowski
 */ 

#include "Hk.h"

Hk_t::Hk_t() {
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	ec 01       	movw	r28, r24
     c82:	e1 d1       	rcall	.+962    	; 0x1046 <_ZN12ADC128S102_tC1Ev>
     c84:	ce 01       	movw	r24, r28
     c86:	07 96       	adiw	r24, 0x07	; 7
     c88:	7f d2       	rcall	.+1278   	; 0x1188 <_ZN17MAX306EWIdouble_tC1Ev>
     c8a:	ce 01       	movw	r24, r28
     c8c:	8a 96       	adiw	r24, 0x2a	; 42
     c8e:	e8 dd       	rcall	.-1072   	; 0x860 <_ZN7Frame_tC1Ev>
     c90:	83 e2       	ldi	r24, 0x23	; 35
     c92:	92 e0       	ldi	r25, 0x02	; 2
     c94:	98 ab       	std	Y+48, r25	; 0x30
     c96:	8f a7       	std	Y+47, r24	; 0x2f
     c98:	8e e2       	ldi	r24, 0x2E	; 46
     c9a:	92 e0       	ldi	r25, 0x02	; 2
     c9c:	9a ab       	std	Y+50, r25	; 0x32
     c9e:	89 ab       	std	Y+49, r24	; 0x31
     ca0:	89 e3       	ldi	r24, 0x39	; 57
     ca2:	92 e0       	ldi	r25, 0x02	; 2
     ca4:	9c ab       	std	Y+52, r25	; 0x34
     ca6:	8b ab       	std	Y+51, r24	; 0x33
     ca8:	86 e4       	ldi	r24, 0x46	; 70
     caa:	92 e0       	ldi	r25, 0x02	; 2
     cac:	9e ab       	std	Y+54, r25	; 0x36
     cae:	8d ab       	std	Y+53, r24	; 0x35
     cb0:	84 e5       	ldi	r24, 0x54	; 84
     cb2:	92 e0       	ldi	r25, 0x02	; 2
     cb4:	98 af       	std	Y+56, r25	; 0x38
     cb6:	8f ab       	std	Y+55, r24	; 0x37
     cb8:	83 e6       	ldi	r24, 0x63	; 99
     cba:	92 e0       	ldi	r25, 0x02	; 2
     cbc:	9a af       	std	Y+58, r25	; 0x3a
     cbe:	89 af       	std	Y+57, r24	; 0x39
     cc0:	8a e7       	ldi	r24, 0x7A	; 122
     cc2:	92 e0       	ldi	r25, 0x02	; 2
     cc4:	9c af       	std	Y+60, r25	; 0x3c
     cc6:	8b af       	std	Y+59, r24	; 0x3b
     cc8:	86 e8       	ldi	r24, 0x86	; 134
     cca:	92 e0       	ldi	r25, 0x02	; 2
     ccc:	9e af       	std	Y+62, r25	; 0x3e
     cce:	8d af       	std	Y+61, r24	; 0x3d
     cd0:	fe 01       	movw	r30, r28
     cd2:	ff 96       	adiw	r30, 0x3f	; 63
     cd4:	85 e9       	ldi	r24, 0x95	; 149
     cd6:	92 e0       	ldi	r25, 0x02	; 2
     cd8:	91 83       	std	Z+1, r25	; 0x01
     cda:	80 83       	st	Z, r24
     cdc:	32 96       	adiw	r30, 0x02	; 2
     cde:	8d ea       	ldi	r24, 0xAD	; 173
     ce0:	92 e0       	ldi	r25, 0x02	; 2
     ce2:	91 83       	std	Z+1, r25	; 0x01
     ce4:	80 83       	st	Z, r24
     ce6:	32 96       	adiw	r30, 0x02	; 2
     ce8:	82 e3       	ldi	r24, 0x32	; 50
     cea:	92 e0       	ldi	r25, 0x02	; 2
     cec:	91 83       	std	Z+1, r25	; 0x01
     cee:	80 83       	st	Z, r24
     cf0:	32 96       	adiw	r30, 0x02	; 2
     cf2:	87 ec       	ldi	r24, 0xC7	; 199
     cf4:	92 e0       	ldi	r25, 0x02	; 2
     cf6:	91 83       	std	Z+1, r25	; 0x01
     cf8:	80 83       	st	Z, r24
     cfa:	32 96       	adiw	r30, 0x02	; 2
     cfc:	8d ec       	ldi	r24, 0xCD	; 205
     cfe:	92 e0       	ldi	r25, 0x02	; 2
     d00:	91 83       	std	Z+1, r25	; 0x01
     d02:	80 83       	st	Z, r24
     d04:	32 96       	adiw	r30, 0x02	; 2
     d06:	8b ef       	ldi	r24, 0xFB	; 251
     d08:	92 e0       	ldi	r25, 0x02	; 2
     d0a:	91 83       	std	Z+1, r25	; 0x01
     d0c:	80 83       	st	Z, r24
     d0e:	32 96       	adiw	r30, 0x02	; 2
     d10:	8a e2       	ldi	r24, 0x2A	; 42
     d12:	93 e0       	ldi	r25, 0x03	; 3
     d14:	91 83       	std	Z+1, r25	; 0x01
     d16:	80 83       	st	Z, r24
     d18:	32 96       	adiw	r30, 0x02	; 2
     d1a:	88 e5       	ldi	r24, 0x58	; 88
     d1c:	93 e0       	ldi	r25, 0x03	; 3
     d1e:	91 83       	std	Z+1, r25	; 0x01
     d20:	80 83       	st	Z, r24
	this->init();
     d22:	ce 01       	movw	r24, r28
     d24:	a1 df       	rcall	.-190    	; 0xc68 <_ZN4Hk_t4initEv>
}
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	08 95       	ret

00000d2c <_ZN4Hk_t7printHKEv>:
void Hk_t::init(void){
	MUX.init();
	ADC128.init();
}

void Hk_t::printHK(void){
     d2c:	7f 92       	push	r7
     d2e:	8f 92       	push	r8
     d30:	9f 92       	push	r9
     d32:	af 92       	push	r10
     d34:	bf 92       	push	r11
     d36:	cf 92       	push	r12
     d38:	df 92       	push	r13
     d3a:	ef 92       	push	r14
     d3c:	ff 92       	push	r15
     d3e:	0f 93       	push	r16
     d40:	1f 93       	push	r17
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	4c 01       	movw	r8, r24
	Serial0.printf(Commands.COMMAND_GET_ADC);
     d48:	fc 01       	movw	r30, r24
     d4a:	80 a9       	ldd	r24, Z+48	; 0x30
     d4c:	8f 93       	push	r24
     d4e:	87 a5       	ldd	r24, Z+47	; 0x2f
     d50:	8f 93       	push	r24
     d52:	87 ee       	ldi	r24, 0xE7	; 231
     d54:	95 e0       	ldi	r25, 0x05	; 5
     d56:	9f 93       	push	r25
     d58:	8f 93       	push	r24
     d5a:	f7 db       	rcall	.-2066   	; 0x54a <_ZN8SerialX_ILi0EE6printfEPKcz>
	Frame.printCommandDataSeparator();
     d5c:	64 01       	movw	r12, r8
     d5e:	fa e2       	ldi	r31, 0x2A	; 42
     d60:	cf 0e       	add	r12, r31
     d62:	d1 1c       	adc	r13, r1
     d64:	c6 01       	movw	r24, r12
     d66:	07 de       	rcall	.-1010   	; 0x976 <_ZN7Frame_t25printCommandDataSeparatorEv>
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
	for(uint8_t cs=16; cs<48; cs++){
     d70:	d0 e1       	ldi	r29, 0x10	; 16
		MUX.select(cs);
     d72:	54 01       	movw	r10, r8
     d74:	87 e0       	ldi	r24, 0x07	; 7
     d76:	a8 0e       	add	r10, r24
     d78:	b1 1c       	adc	r11, r1
		for (uint8_t channel=0; channel<4; channel++){
     d7a:	71 2c       	mov	r7, r1
			_delay_ms(1);
			ADC128.getValue(channel);
			_delay_ms(5);

			if (!(cs==63&&channel==3)){
				Serial0.printf("%u", ADC128.getValue(channel));
     d7c:	0f 2e       	mov	r0, r31
     d7e:	fb e6       	ldi	r31, 0x6B	; 107
     d80:	ef 2e       	mov	r14, r31
     d82:	f3 e0       	ldi	r31, 0x03	; 3
     d84:	ff 2e       	mov	r15, r31
     d86:	f0 2d       	mov	r31, r0
     d88:	07 ee       	ldi	r16, 0xE7	; 231
     d8a:	15 e0       	ldi	r17, 0x05	; 5

void Hk_t::printHK(void){
	Serial0.printf(Commands.COMMAND_GET_ADC);
	Frame.printCommandDataSeparator();
	for(uint8_t cs=16; cs<48; cs++){
		MUX.select(cs);
     d8c:	6d 2f       	mov	r22, r29
     d8e:	c5 01       	movw	r24, r10
     d90:	10 d2       	rcall	.+1056   	; 0x11b2 <_ZN17MAX306EWIdouble_t6selectEh>
		for (uint8_t channel=0; channel<4; channel++){
     d92:	c7 2d       	mov	r28, r7
     d94:	ef ec       	ldi	r30, 0xCF	; 207
     d96:	f7 e0       	ldi	r31, 0x07	; 7
     d98:	31 97       	sbiw	r30, 0x01	; 1
     d9a:	f1 f7       	brne	.-4      	; 0xd98 <_ZN4Hk_t7printHKEv+0x6c>
     d9c:	00 c0       	rjmp	.+0      	; 0xd9e <_ZN4Hk_t7printHKEv+0x72>
     d9e:	00 00       	nop
			_delay_ms(1);
			ADC128.getValue(channel);
     da0:	6c 2f       	mov	r22, r28
     da2:	88 2d       	mov	r24, r8
     da4:	99 2d       	mov	r25, r9
     da6:	52 d1       	rcall	.+676    	; 0x104c <_ZN12ADC128S102_t8getValueEh>
     da8:	8f e0       	ldi	r24, 0x0F	; 15
     daa:	97 e2       	ldi	r25, 0x27	; 39
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	f1 f7       	brne	.-4      	; 0xdac <_ZN4Hk_t7printHKEv+0x80>
     db0:	00 c0       	rjmp	.+0      	; 0xdb2 <_ZN4Hk_t7printHKEv+0x86>
     db2:	00 00       	nop
			_delay_ms(5);

			if (!(cs==63&&channel==3)){
     db4:	df 33       	cpi	r29, 0x3F	; 63
     db6:	11 f4       	brne	.+4      	; 0xdbc <_ZN4Hk_t7printHKEv+0x90>
     db8:	c3 30       	cpi	r28, 0x03	; 3
     dba:	b9 f0       	breq	.+46     	; 0xdea <_ZN4Hk_t7printHKEv+0xbe>
				Serial0.printf("%u", ADC128.getValue(channel));
     dbc:	6c 2f       	mov	r22, r28
     dbe:	88 2d       	mov	r24, r8
     dc0:	99 2d       	mov	r25, r9
     dc2:	44 d1       	rcall	.+648    	; 0x104c <_ZN12ADC128S102_t8getValueEh>
     dc4:	9f 93       	push	r25
     dc6:	8f 93       	push	r24
     dc8:	ff 92       	push	r15
     dca:	ef 92       	push	r14
     dcc:	1f 93       	push	r17
     dce:	0f 93       	push	r16
     dd0:	bc db       	rcall	.-2184   	; 0x54a <_ZN8SerialX_ILi0EE6printfEPKcz>
				Frame.printParamSeparator();
     dd2:	c6 01       	movw	r24, r12
     dd4:	dd dd       	rcall	.-1094   	; 0x990 <_ZN7Frame_t19printParamSeparatorEv>
void Hk_t::printHK(void){
	Serial0.printf(Commands.COMMAND_GET_ADC);
	Frame.printCommandDataSeparator();
	for(uint8_t cs=16; cs<48; cs++){
		MUX.select(cs);
		for (uint8_t channel=0; channel<4; channel++){
     dd6:	cf 5f       	subi	r28, 0xFF	; 255
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	c4 30       	cpi	r28, 0x04	; 4
     de6:	b1 f6       	brne	.-84     	; 0xd94 <_ZN4Hk_t7printHKEv+0x68>
     de8:	15 c0       	rjmp	.+42     	; 0xe14 <_ZN4Hk_t7printHKEv+0xe8>
			if (!(cs==63&&channel==3)){
				Serial0.printf("%u", ADC128.getValue(channel));
				Frame.printParamSeparator();
			}
			else{
				Serial0.printf("%u", ADC128.getValue(channel));
     dea:	63 e0       	ldi	r22, 0x03	; 3
     dec:	88 2d       	mov	r24, r8
     dee:	99 2d       	mov	r25, r9
     df0:	2d d1       	rcall	.+602    	; 0x104c <_ZN12ADC128S102_t8getValueEh>
     df2:	9f 93       	push	r25
     df4:	8f 93       	push	r24
     df6:	ff 92       	push	r15
     df8:	ef 92       	push	r14
     dfa:	1f 93       	push	r17
     dfc:	0f 93       	push	r16
     dfe:	a5 db       	rcall	.-2230   	; 0x54a <_ZN8SerialX_ILi0EE6printfEPKcz>
				Frame.printCommandDataSeparator();
     e00:	c6 01       	movw	r24, r12
     e02:	b9 dd       	rcall	.-1166   	; 0x976 <_ZN7Frame_t25printCommandDataSeparatorEv>
}

void Hk_t::printHK(void){
	Serial0.printf(Commands.COMMAND_GET_ADC);
	Frame.printCommandDataSeparator();
	for(uint8_t cs=16; cs<48; cs++){
     e04:	df 5f       	subi	r29, 0xFF	; 255
     e06:	0f 90       	pop	r0
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	bc cf       	rjmp	.-136    	; 0xd8c <_ZN4Hk_t7printHKEv+0x60>
     e14:	df 5f       	subi	r29, 0xFF	; 255
     e16:	d0 33       	cpi	r29, 0x30	; 48
     e18:	09 f0       	breq	.+2      	; 0xe1c <_ZN4Hk_t7printHKEv+0xf0>
     e1a:	b8 cf       	rjmp	.-144    	; 0xd8c <_ZN4Hk_t7printHKEv+0x60>
			}
		}
	}
	
	
	Serial0.printf("CheckSum\n");
     e1c:	8e e6       	ldi	r24, 0x6E	; 110
     e1e:	93 e0       	ldi	r25, 0x03	; 3
     e20:	9f 93       	push	r25
     e22:	8f 93       	push	r24
     e24:	87 ee       	ldi	r24, 0xE7	; 231
     e26:	95 e0       	ldi	r25, 0x05	; 5
     e28:	9f 93       	push	r25
     e2a:	8f 93       	push	r24
     e2c:	8e db       	rcall	.-2276   	; 0x54a <_ZN8SerialX_ILi0EE6printfEPKcz>
     e2e:	0f 90       	pop	r0
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
}
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	ff 90       	pop	r15
     e40:	ef 90       	pop	r14
     e42:	df 90       	pop	r13
     e44:	cf 90       	pop	r12
     e46:	bf 90       	pop	r11
     e48:	af 90       	pop	r10
     e4a:	9f 90       	pop	r9
     e4c:	8f 90       	pop	r8
     e4e:	7f 90       	pop	r7
     e50:	08 95       	ret

00000e52 <_ZN10Switches_t4initEv>:
		set(PORTA, 6);
		set(PORTA, 7);
		
		set(PORTC, 0);
		set(PORTC, 1);
		set(PORTC, 2);
     e52:	8f ef       	ldi	r24, 0xFF	; 255
     e54:	87 b9       	out	0x07, r24	; 7
     e56:	81 b9       	out	0x01, r24	; 1
     e58:	10 98       	cbi	0x02, 0	; 2
     e5a:	11 98       	cbi	0x02, 1	; 2
     e5c:	12 98       	cbi	0x02, 2	; 2
     e5e:	13 98       	cbi	0x02, 3	; 2
     e60:	14 98       	cbi	0x02, 4	; 2
     e62:	15 98       	cbi	0x02, 5	; 2
     e64:	16 98       	cbi	0x02, 6	; 2
     e66:	17 98       	cbi	0x02, 7	; 2
     e68:	40 98       	cbi	0x08, 0	; 8
     e6a:	41 98       	cbi	0x08, 1	; 8
     e6c:	42 98       	cbi	0x08, 2	; 8
     e6e:	08 95       	ret

00000e70 <_ZN10Switches_tC1Ev>:
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	ec 01       	movw	r28, r24
     e76:	06 96       	adiw	r24, 0x06	; 6
     e78:	f3 dc       	rcall	.-1562   	; 0x860 <_ZN7Frame_tC1Ev>
     e7a:	ce 01       	movw	r24, r28
     e7c:	0b 96       	adiw	r24, 0x0b	; 11
     e7e:	e9 dd       	rcall	.-1070   	; 0xa52 <_ZN8String_tC1Ev>
     e80:	ce 01       	movw	r24, r28
     e82:	e7 df       	rcall	.-50     	; 0xe52 <_ZN10Switches_t4initEv>
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	08 95       	ret

00000e8a <_ZN10Switches_t15enableOneSwitchEh>:
     e8a:	68 30       	cpi	r22, 0x08	; 8
     e8c:	58 f4       	brcc	.+22     	; 0xea4 <_ZN10Switches_t15enableOneSwitchEh+0x1a>
     e8e:	22 b1       	in	r18, 0x02	; 2
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <_ZN10Switches_t15enableOneSwitchEh+0x10>
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	6a 95       	dec	r22
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <_ZN10Switches_t15enableOneSwitchEh+0xc>
     e9e:	82 2b       	or	r24, r18
     ea0:	82 b9       	out	0x02, r24	; 2
     ea2:	08 95       	ret
     ea4:	60 31       	cpi	r22, 0x10	; 16
     ea6:	58 f4       	brcc	.+22     	; 0xebe <_ZN10Switches_t15enableOneSwitchEh+0x34>
     ea8:	28 b1       	in	r18, 0x08	; 8
     eaa:	68 50       	subi	r22, 0x08	; 8
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <_ZN10Switches_t15enableOneSwitchEh+0x2c>
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	6a 95       	dec	r22
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <_ZN10Switches_t15enableOneSwitchEh+0x28>
     eba:	82 2b       	or	r24, r18
     ebc:	88 b9       	out	0x08, r24	; 8
     ebe:	08 95       	ret

00000ec0 <_ZN10Switches_t16disableOneSwitchEh>:
     ec0:	68 30       	cpi	r22, 0x08	; 8
     ec2:	60 f4       	brcc	.+24     	; 0xedc <_ZN10Switches_t16disableOneSwitchEh+0x1c>
     ec4:	22 b1       	in	r18, 0x02	; 2
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <_ZN10Switches_t16disableOneSwitchEh+0x10>
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	6a 95       	dec	r22
     ed2:	e2 f7       	brpl	.-8      	; 0xecc <_ZN10Switches_t16disableOneSwitchEh+0xc>
     ed4:	80 95       	com	r24
     ed6:	82 23       	and	r24, r18
     ed8:	82 b9       	out	0x02, r24	; 2
     eda:	08 95       	ret
     edc:	60 31       	cpi	r22, 0x10	; 16
     ede:	60 f4       	brcc	.+24     	; 0xef8 <_ZN10Switches_t16disableOneSwitchEh+0x38>
     ee0:	28 b1       	in	r18, 0x08	; 8
     ee2:	68 50       	subi	r22, 0x08	; 8
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <_ZN10Switches_t16disableOneSwitchEh+0x2e>
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	6a 95       	dec	r22
     ef0:	e2 f7       	brpl	.-8      	; 0xeea <_ZN10Switches_t16disableOneSwitchEh+0x2a>
     ef2:	80 95       	com	r24
     ef4:	82 23       	and	r24, r18
     ef6:	88 b9       	out	0x08, r24	; 8
     ef8:	08 95       	ret

00000efa <_ZN10Switches_t5powerEhh>:
}

uint16_t Switches_t::power(uint8_t x, uint8_t y){
	uint16_t out=x;
	
	if(y==0)
     efa:	44 23       	and	r20, r20
     efc:	a1 f0       	breq	.+40     	; 0xf26 <_ZN10Switches_t5powerEhh+0x2c>
	
	return parameters[0];
}

uint16_t Switches_t::power(uint8_t x, uint8_t y){
	uint16_t out=x;
     efe:	70 e0       	ldi	r23, 0x00	; 0
	
	if(y==0)
	return 1;
	else {
		for(uint8_t i=y; i>1; i--){
     f00:	42 30       	cpi	r20, 0x02	; 2
     f02:	68 f0       	brcs	.+26     	; 0xf1e <_ZN10Switches_t5powerEhh+0x24>
     f04:	9b 01       	movw	r18, r22
			out=out*x;
     f06:	c9 01       	movw	r24, r18
     f08:	86 9f       	mul	r24, r22
     f0a:	90 01       	movw	r18, r0
     f0c:	87 9f       	mul	r24, r23
     f0e:	30 0d       	add	r19, r0
     f10:	96 9f       	mul	r25, r22
     f12:	30 0d       	add	r19, r0
     f14:	11 24       	eor	r1, r1
	uint16_t out=x;
	
	if(y==0)
	return 1;
	else {
		for(uint8_t i=y; i>1; i--){
     f16:	41 50       	subi	r20, 0x01	; 1
     f18:	41 30       	cpi	r20, 0x01	; 1
     f1a:	a9 f7       	brne	.-22     	; 0xf06 <_ZN10Switches_t5powerEhh+0xc>
     f1c:	01 c0       	rjmp	.+2      	; 0xf20 <_ZN10Switches_t5powerEhh+0x26>
     f1e:	9b 01       	movw	r18, r22
			out=out*x;
		}
		return out;
     f20:	82 2f       	mov	r24, r18
     f22:	93 2f       	mov	r25, r19
     f24:	08 95       	ret

uint16_t Switches_t::power(uint8_t x, uint8_t y){
	uint16_t out=x;
	
	if(y==0)
	return 1;
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
		for(uint8_t i=y; i>1; i--){
			out=out*x;
		}
		return out;
	}
     f2a:	08 95       	ret

00000f2c <_ZN10Switches_t13loadParameterEPh>:
		set(PORTC, 0);
		set(PORTC, 1);
		set(PORTC, 2);
}

int Switches_t::loadParameter(uint8_t * data_buffer){
     f2c:	2f 92       	push	r2
     f2e:	3f 92       	push	r3
     f30:	4f 92       	push	r4
     f32:	5f 92       	push	r5
     f34:	6f 92       	push	r6
     f36:	7f 92       	push	r7
     f38:	8f 92       	push	r8
     f3a:	9f 92       	push	r9
     f3c:	af 92       	push	r10
     f3e:	bf 92       	push	r11
     f40:	cf 92       	push	r12
     f42:	df 92       	push	r13
     f44:	ef 92       	push	r14
     f46:	ff 92       	push	r15
     f48:	0f 93       	push	r16
     f4a:	1f 93       	push	r17
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
     f50:	6c 01       	movw	r12, r24
     f52:	4b 01       	movw	r8, r22
	uint8_t start_index = String.lengthUpToTerminator(data_buffer, Frame.getCommandDataSeparator(), 0);
     f54:	3c 01       	movw	r6, r24
     f56:	26 e0       	ldi	r18, 0x06	; 6
     f58:	62 0e       	add	r6, r18
     f5a:	71 1c       	adc	r7, r1
     f5c:	c3 01       	movw	r24, r6
     f5e:	15 dd       	rcall	.-1494   	; 0x98a <_ZN7Frame_t23getCommandDataSeparatorEv>
     f60:	56 01       	movw	r10, r12
     f62:	3b e0       	ldi	r19, 0x0B	; 11
     f64:	a3 0e       	add	r10, r19
     f66:	b1 1c       	adc	r11, r1
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	48 2f       	mov	r20, r24
     f6c:	b4 01       	movw	r22, r8
     f6e:	c5 01       	movw	r24, r10
     f70:	d0 dd       	rcall	.-1120   	; 0xb12 <_ZN8String_t20lengthUpToTerminatorEPhhh>
	start_index++;
     f72:	22 24       	eor	r2, r2
     f74:	23 94       	inc	r2
     f76:	28 0e       	add	r2, r24
	uint8_t stop_index = String.lengthUpToTerminator(data_buffer, Frame.getCommandDataSeparator(), start_index);
     f78:	c3 01       	movw	r24, r6
     f7a:	07 dd       	rcall	.-1522   	; 0x98a <_ZN7Frame_t23getCommandDataSeparatorEv>
     f7c:	22 2d       	mov	r18, r2
     f7e:	48 2f       	mov	r20, r24
     f80:	b4 01       	movw	r22, r8
     f82:	c5 01       	movw	r24, r10
     f84:	c6 dd       	rcall	.-1140   	; 0xb12 <_ZN8String_t20lengthUpToTerminatorEPhhh>
	stop_index--;
     f86:	55 24       	eor	r5, r5
     f88:	5a 94       	dec	r5
     f8a:	58 0e       	add	r5, r24
	
	if (start_index>stop_index)
     f8c:	52 14       	cp	r5, r2
     f8e:	08 f4       	brcc	.+2      	; 0xf92 <_ZN10Switches_t13loadParameterEPh+0x66>
     f90:	42 c0       	rjmp	.+132    	; 0x1016 <_ZN10Switches_t13loadParameterEPh+0xea>
	return -1;

	uint8_t power=0;
	uint8_t parameter_index=0;
	parameters[0]=0;
     f92:	f6 01       	movw	r30, r12
     f94:	11 82       	std	Z+1, r1	; 0x01
     f96:	10 82       	st	Z, r1
     f98:	31 2c       	mov	r3, r1
     f9a:	41 2c       	mov	r4, r1
	
	for(uint8_t character=stop_index; character>=start_index; character--){
		if(String.isNumber(data_buffer[character])){
     f9c:	84 01       	movw	r16, r8
     f9e:	05 0d       	add	r16, r5
     fa0:	11 1d       	adc	r17, r1
     fa2:	f8 01       	movw	r30, r16
     fa4:	60 81       	ld	r22, Z
     fa6:	c5 01       	movw	r24, r10
     fa8:	d4 dd       	rcall	.-1112   	; 0xb52 <_ZN8String_t8isNumberEh>
     faa:	88 23       	and	r24, r24
     fac:	e9 f0       	breq	.+58     	; 0xfe8 <_ZN10Switches_t13loadParameterEPh+0xbc>
     fae:	c3 2d       	mov	r28, r3
     fb0:	d0 e0       	ldi	r29, 0x00	; 0
     fb2:	cc 0f       	add	r28, r28
     fb4:	dd 1f       	adc	r29, r29
     fb6:	cc 0d       	add	r28, r12
     fb8:	dd 1d       	adc	r29, r13
			parameters[parameter_index]=static_cast<uint16_t>(parameters[parameter_index]+String.toNumber(data_buffer[character])*(this->power(10,power)));
     fba:	e8 80       	ld	r14, Y
     fbc:	f9 80       	ldd	r15, Y+1	; 0x01
     fbe:	f8 01       	movw	r30, r16
     fc0:	60 81       	ld	r22, Z
     fc2:	c5 01       	movw	r24, r10
     fc4:	cc dd       	rcall	.-1128   	; 0xb5e <_ZN8String_t8toNumberEh>
     fc6:	18 2f       	mov	r17, r24
     fc8:	44 2d       	mov	r20, r4
     fca:	6a e0       	ldi	r22, 0x0A	; 10
     fcc:	c6 01       	movw	r24, r12
     fce:	95 df       	rcall	.-214    	; 0xefa <_ZN10Switches_t5powerEhh>
     fd0:	9c 01       	movw	r18, r24
     fd2:	12 9f       	mul	r17, r18
     fd4:	c0 01       	movw	r24, r0
     fd6:	13 9f       	mul	r17, r19
     fd8:	90 0d       	add	r25, r0
     fda:	11 24       	eor	r1, r1
     fdc:	e8 0e       	add	r14, r24
     fde:	f9 1e       	adc	r15, r25
     fe0:	f9 82       	std	Y+1, r15	; 0x01
     fe2:	e8 82       	st	Y, r14
			power++;
     fe4:	43 94       	inc	r4
     fe6:	10 c0       	rjmp	.+32     	; 0x1008 <_ZN10Switches_t13loadParameterEPh+0xdc>
		} else if(data_buffer[character]==Frame.getParamSeparator()){
     fe8:	f8 01       	movw	r30, r16
     fea:	c0 81       	ld	r28, Z
     fec:	c3 01       	movw	r24, r6
     fee:	da dc       	rcall	.-1612   	; 0x9a4 <_ZN7Frame_t17getParamSeparatorEv>
     ff0:	c8 13       	cpse	r28, r24
     ff2:	14 c0       	rjmp	.+40     	; 0x101c <_ZN10Switches_t13loadParameterEPh+0xf0>
			power = 0;
			parameter_index++;
     ff4:	33 94       	inc	r3
			parameters[parameter_index] = 0;
     ff6:	e3 2d       	mov	r30, r3
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	ee 0f       	add	r30, r30
     ffc:	ff 1f       	adc	r31, r31
     ffe:	ec 0d       	add	r30, r12
    1000:	fd 1d       	adc	r31, r13
    1002:	11 82       	std	Z+1, r1	; 0x01
    1004:	10 82       	st	Z, r1
	for(uint8_t character=stop_index; character>=start_index; character--){
		if(String.isNumber(data_buffer[character])){
			parameters[parameter_index]=static_cast<uint16_t>(parameters[parameter_index]+String.toNumber(data_buffer[character])*(this->power(10,power)));
			power++;
		} else if(data_buffer[character]==Frame.getParamSeparator()){
			power = 0;
    1006:	41 2c       	mov	r4, r1

	uint8_t power=0;
	uint8_t parameter_index=0;
	parameters[0]=0;
	
	for(uint8_t character=stop_index; character>=start_index; character--){
    1008:	5a 94       	dec	r5
    100a:	52 14       	cp	r5, r2
    100c:	38 f6       	brcc	.-114    	; 0xf9c <_ZN10Switches_t13loadParameterEPh+0x70>
			parameters[parameter_index] = 0;
		} else
			return -2;
	}
	
	return parameters[0];
    100e:	f6 01       	movw	r30, r12
    1010:	80 81       	ld	r24, Z
    1012:	91 81       	ldd	r25, Z+1	; 0x01
    1014:	05 c0       	rjmp	.+10     	; 0x1020 <_ZN10Switches_t13loadParameterEPh+0xf4>
	start_index++;
	uint8_t stop_index = String.lengthUpToTerminator(data_buffer, Frame.getCommandDataSeparator(), start_index);
	stop_index--;
	
	if (start_index>stop_index)
	return -1;
    1016:	8f ef       	ldi	r24, 0xFF	; 255
    1018:	9f ef       	ldi	r25, 0xFF	; 255
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <_ZN10Switches_t13loadParameterEPh+0xf4>
		} else if(data_buffer[character]==Frame.getParamSeparator()){
			power = 0;
			parameter_index++;
			parameters[parameter_index] = 0;
		} else
			return -2;
    101c:	8e ef       	ldi	r24, 0xFE	; 254
    101e:	9f ef       	ldi	r25, 0xFF	; 255
	}
	
	return parameters[0];
}
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	ff 90       	pop	r15
    102a:	ef 90       	pop	r14
    102c:	df 90       	pop	r13
    102e:	cf 90       	pop	r12
    1030:	bf 90       	pop	r11
    1032:	af 90       	pop	r10
    1034:	9f 90       	pop	r9
    1036:	8f 90       	pop	r8
    1038:	7f 90       	pop	r7
    103a:	6f 90       	pop	r6
    103c:	5f 90       	pop	r5
    103e:	4f 90       	pop	r4
    1040:	3f 90       	pop	r3
    1042:	2f 90       	pop	r2
    1044:	08 95       	ret

00001046 <_ZN12ADC128S102_tC1Ev>:


#define set(a, b) (a) |= (1 << (b))
#define reset(a, b) (a) &= ~(1 << (b))

ADC128S102_t::ADC128S102_t() {
    1046:	98 c1       	rjmp	.+816    	; 0x1378 <_ZN12SPI_Device_tC1Ev>
    1048:	08 95       	ret

0000104a <_ZN12ADC128S102_t4initEv>:
	this->init();
}

void ADC128S102_t::init(){
    104a:	08 95       	ret

0000104c <_ZN12ADC128S102_t8getValueEh>:
	
}

uint16_t ADC128S102_t::getValue(uint8_t channel){
    104c:	ef 92       	push	r14
    104e:	ff 92       	push	r15
    1050:	1f 93       	push	r17
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	00 d0       	rcall	.+0      	; 0x1058 <_ZN12ADC128S102_t8getValueEh+0xc>
    1058:	00 d0       	rcall	.+0      	; 0x105a <_ZN12ADC128S102_t8getValueEh+0xe>
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	7c 01       	movw	r14, r24
    1060:	16 2f       	mov	r17, r22
	uint8_t mask, l_byte, h_byte;
	uint16_t value;
	
	DDRB = 0xFF;
    1062:	8f ef       	ldi	r24, 0xFF	; 255
    1064:	84 b9       	out	0x04, r24	; 4
	set(PORTB, 0);
    1066:	28 9a       	sbi	0x05, 0	; 5
	
	SPI.init({SPI_t::SPI_idle_high, SPI_t::SPI_trailing_sample, SPI_t::SPI_MSB_First, SPI_t::SPI_Clk_Div_16});
    1068:	91 e0       	ldi	r25, 0x01	; 1
    106a:	99 83       	std	Y+1, r25	; 0x01
    106c:	9a 83       	std	Y+2, r25	; 0x02
    106e:	1b 82       	std	Y+3, r1	; 0x03
    1070:	9c 83       	std	Y+4, r25	; 0x04
    1072:	be 01       	movw	r22, r28
    1074:	6f 5f       	subi	r22, 0xFF	; 255
    1076:	7f 4f       	sbci	r23, 0xFF	; 255
    1078:	8c e1       	ldi	r24, 0x1C	; 28
    107a:	96 e0       	ldi	r25, 0x06	; 6
    107c:	46 d1       	rcall	.+652    	; 0x130a <_ZN5SPI_t4initERKNS_13InitTypeDef_tE>
	
	reset(PORTB, 0);
    107e:	28 98       	cbi	0x05, 0	; 5
	
	mask = 0x7;
	channel = static_cast<uint8_t>(channel & mask);
    1080:	61 2f       	mov	r22, r17
    1082:	67 70       	andi	r22, 0x07	; 7
	channel = channel << 3;
    1084:	66 0f       	add	r22, r22
    1086:	66 0f       	add	r22, r22
    1088:	66 0f       	add	r22, r22
	h_byte = ADC_SPI.shift(channel);
    108a:	c7 01       	movw	r24, r14
    108c:	77 d1       	rcall	.+750    	; 0x137c <_ZN12SPI_Device_t5shiftEh>
    108e:	18 2f       	mov	r17, r24
	h_byte = static_cast<uint8_t>(h_byte & 0x0F);
	l_byte = ADC_SPI.shift(0);
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	c7 01       	movw	r24, r14
    1094:	73 d1       	rcall	.+742    	; 0x137c <_ZN12SPI_Device_t5shiftEh>
	
	set(PORTB, 0);
    1096:	28 9a       	sbi	0x05, 0	; 5
	
	mask = 0x7;
	channel = static_cast<uint8_t>(channel & mask);
	channel = channel << 3;
	h_byte = ADC_SPI.shift(channel);
	h_byte = static_cast<uint8_t>(h_byte & 0x0F);
    1098:	1f 70       	andi	r17, 0x0F	; 15
	l_byte = ADC_SPI.shift(0);
	
	set(PORTB, 0);
	
	value = static_cast<uint16_t>((h_byte << 8)|l_byte);
    109a:	21 2f       	mov	r18, r17
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	32 2f       	mov	r19, r18
    10a0:	22 27       	eor	r18, r18
	
	return value;
}
    10a2:	a9 01       	movw	r20, r18
    10a4:	48 2b       	or	r20, r24
    10a6:	ca 01       	movw	r24, r20
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	1f 91       	pop	r17
    10b6:	ff 90       	pop	r15
    10b8:	ef 90       	pop	r14
    10ba:	08 95       	ret

000010bc <_ZN12DAC121S101_t8setValueEj>:
void DAC121S101_t::init(){
	this->setMode(POWER_DOWN_100K_TO_GND);
	this->setValue(0);
}

void DAC121S101_t::setValue(uint16_t value){
    10bc:	ef 92       	push	r14
    10be:	ff 92       	push	r15
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <_ZN12DAC121S101_t8setValueEj+0xe>
    10ca:	00 d0       	rcall	.+0      	; 0x10cc <_ZN12DAC121S101_t8setValueEj+0x10>
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	7c 01       	movw	r14, r24
    10d2:	06 2f       	mov	r16, r22
    10d4:	17 2f       	mov	r17, r23
	static uint8_t	l_byte, h_byte, mask;
	
	SPI.init({SPI_t::SPI_idle_high, SPI_t::SPI_leading_sample, SPI_t::SPI_MSB_First, SPI_t::SPI_Clk_Div_4});
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	89 83       	std	Y+1, r24	; 0x01
    10da:	1a 82       	std	Y+2, r1	; 0x02
    10dc:	1b 82       	std	Y+3, r1	; 0x03
    10de:	1c 82       	std	Y+4, r1	; 0x04
    10e0:	be 01       	movw	r22, r28
    10e2:	6f 5f       	subi	r22, 0xFF	; 255
    10e4:	7f 4f       	sbci	r23, 0xFF	; 255
    10e6:	8c e1       	ldi	r24, 0x1C	; 28
    10e8:	96 e0       	ldi	r25, 0x06	; 6
    10ea:	0f d1       	rcall	.+542    	; 0x130a <_ZN5SPI_t4initERKNS_13InitTypeDef_tE>
	
	mask = 0xFF;
	h_byte = static_cast<uint8_t>((value >> 8) & mask);
	mask = 0x0F;
    10ec:	8f e0       	ldi	r24, 0x0F	; 15
    10ee:	80 93 1b 06 	sts	0x061B, r24
	h_byte = h_byte & mask;
    10f2:	71 2f       	mov	r23, r17
    10f4:	7f 70       	andi	r23, 0x0F	; 15
    10f6:	70 93 1a 06 	sts	0x061A, r23
	if (this->actual_mode == POWER_DOWN_1K_TO_GND)
    10fa:	f7 01       	movw	r30, r14
    10fc:	80 81       	ld	r24, Z
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	19 f4       	brne	.+6      	; 0x1108 <_ZN12DAC121S101_t8setValueEj+0x4c>
		mask = 1;
    1102:	80 93 1b 06 	sts	0x061B, r24
    1106:	0c c0       	rjmp	.+24     	; 0x1120 <_ZN12DAC121S101_t8setValueEj+0x64>
	else if (this->actual_mode == POWER_DOWN_100K_TO_GND)
    1108:	82 30       	cpi	r24, 0x02	; 2
    110a:	19 f4       	brne	.+6      	; 0x1112 <_ZN12DAC121S101_t8setValueEj+0x56>
		mask = 2;
    110c:	80 93 1b 06 	sts	0x061B, r24
    1110:	07 c0       	rjmp	.+14     	; 0x1120 <_ZN12DAC121S101_t8setValueEj+0x64>
	else if (this->actual_mode == POWER_DOWN_HIGH_IMPEDANCE)
    1112:	83 30       	cpi	r24, 0x03	; 3
    1114:	19 f4       	brne	.+6      	; 0x111c <_ZN12DAC121S101_t8setValueEj+0x60>
		mask = 3;
    1116:	80 93 1b 06 	sts	0x061B, r24
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <_ZN12DAC121S101_t8setValueEj+0x64>
	else
		mask = 0;
    111c:	10 92 1b 06 	sts	0x061B, r1
	h_byte = h_byte | (mask << 4);
    1120:	90 91 1b 06 	lds	r25, 0x061B
    1124:	f0 e1       	ldi	r31, 0x10	; 16
    1126:	9f 9f       	mul	r25, r31
    1128:	c0 01       	movw	r24, r0
    112a:	11 24       	eor	r1, r1
    112c:	67 2f       	mov	r22, r23
    112e:	68 2b       	or	r22, r24
    1130:	60 93 1a 06 	sts	0x061A, r22
	
	mask = 0xFF;
    1134:	9f ef       	ldi	r25, 0xFF	; 255
    1136:	90 93 1b 06 	sts	0x061B, r25
	l_byte = static_cast<uint8_t>(value & mask);
    113a:	00 93 19 06 	sts	0x0619, r16
	
	SPI.shift(h_byte);
    113e:	8c e1       	ldi	r24, 0x1C	; 28
    1140:	96 e0       	ldi	r25, 0x06	; 6
    1142:	14 d1       	rcall	.+552    	; 0x136c <_ZN5SPI_t5shiftEh>
	SPI.shift(l_byte);
    1144:	60 91 19 06 	lds	r22, 0x0619
    1148:	8c e1       	ldi	r24, 0x1C	; 28
    114a:	96 e0       	ldi	r25, 0x06	; 6
    114c:	0f d1       	rcall	.+542    	; 0x136c <_ZN5SPI_t5shiftEh>
}
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	1f 91       	pop	r17
    115c:	0f 91       	pop	r16
    115e:	ff 90       	pop	r15
    1160:	ef 90       	pop	r14
    1162:	08 95       	ret

00001164 <_ZN12DAC121S101_t4initEv>:

void DAC121S101_t::setMode(DAC_Mode mode){
	actual_mode = mode;
    1164:	22 e0       	ldi	r18, 0x02	; 2
    1166:	fc 01       	movw	r30, r24
    1168:	20 83       	st	Z, r18
	this->init();
}

void DAC121S101_t::init(){
	this->setMode(POWER_DOWN_100K_TO_GND);
	this->setValue(0);
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	a6 cf       	rjmp	.-180    	; 0x10bc <_ZN12DAC121S101_t8setValueEj>
    1170:	08 95       	ret

00001172 <_ZN12DAC121S101_tC1Ev>:
#include "DAC121S101.h"



DAC121S101_t::DAC121S101_t() {
	this->init();
    1172:	f8 cf       	rjmp	.-16     	; 0x1164 <_ZN12DAC121S101_t4initEv>
    1174:	08 95       	ret

00001176 <_ZN17MAX306EWIdouble_t4initEv>:
MAX306EWIdouble_t::MAX306EWIdouble_t() {
	this->init();
}

void MAX306EWIdouble_t::init(){
	DDRF = 0xFF;
    1176:	8f ef       	ldi	r24, 0xFF	; 255
    1178:	80 bb       	out	0x10, r24	; 16
	reset(PORTF, 0);
    117a:	88 98       	cbi	0x11, 0	; 17
	reset(PORTF, 1);
    117c:	89 98       	cbi	0x11, 1	; 17
	reset(PORTF, 2);
    117e:	8a 98       	cbi	0x11, 2	; 17
	reset(PORTF, 3);
    1180:	8b 98       	cbi	0x11, 3	; 17
	reset(PORTF, 4);
    1182:	8c 98       	cbi	0x11, 4	; 17
	reset(PORTF, 5);
    1184:	8d 98       	cbi	0x11, 5	; 17
    1186:	08 95       	ret

00001188 <_ZN17MAX306EWIdouble_tC1Ev>:
#include "MAX306EWIdouble.h"

#define set(a, b) (a) |= (1 << (b))
#define reset(a, b) (a) &= ~(1 << (b))

MAX306EWIdouble_t::MAX306EWIdouble_t() {
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	ec 01       	movw	r28, r24
    118e:	37 d0       	rcall	.+110    	; 0x11fe <_ZN9GPIOPin_tC1Ev>
    1190:	ce 01       	movw	r24, r28
    1192:	07 96       	adiw	r24, 0x07	; 7
    1194:	34 d0       	rcall	.+104    	; 0x11fe <_ZN9GPIOPin_tC1Ev>
    1196:	ce 01       	movw	r24, r28
    1198:	0e 96       	adiw	r24, 0x0e	; 14
    119a:	31 d0       	rcall	.+98     	; 0x11fe <_ZN9GPIOPin_tC1Ev>
    119c:	ce 01       	movw	r24, r28
    119e:	45 96       	adiw	r24, 0x15	; 21
    11a0:	2e d0       	rcall	.+92     	; 0x11fe <_ZN9GPIOPin_tC1Ev>
    11a2:	ce 01       	movw	r24, r28
    11a4:	4c 96       	adiw	r24, 0x1c	; 28
    11a6:	2b d0       	rcall	.+86     	; 0x11fe <_ZN9GPIOPin_tC1Ev>
	this->init();
    11a8:	ce 01       	movw	r24, r28
    11aa:	e5 df       	rcall	.-54     	; 0x1176 <_ZN17MAX306EWIdouble_t4initEv>
}
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	08 95       	ret

000011b2 <_ZN17MAX306EWIdouble_t6selectEh>:
	reset(PORTF, 3);
	reset(PORTF, 4);
	reset(PORTF, 5);
}

void MAX306EWIdouble_t::select(uint8_t channel) {
    11b2:	60 34       	cpi	r22, 0x40	; 64
    11b4:	08 f0       	brcs	.+2      	; 0x11b8 <_ZN17MAX306EWIdouble_t6selectEh+0x6>
    11b6:	6f e3       	ldi	r22, 0x3F	; 63
	if (channel>63)
		channel = 63;
	
	uint8_t mask=1;
	if (static_cast<bool>(channel & mask))
    11b8:	60 ff       	sbrs	r22, 0
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <_ZN17MAX306EWIdouble_t6selectEh+0xe>
		set(PORTF, 2);
    11bc:	8a 9a       	sbi	0x11, 2	; 17
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <_ZN17MAX306EWIdouble_t6selectEh+0x10>
	else
		reset(PORTF, 2);
    11c0:	8a 98       	cbi	0x11, 2	; 17
	
	mask=2;
	if ((channel & (mask)))
    11c2:	61 ff       	sbrs	r22, 1
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <_ZN17MAX306EWIdouble_t6selectEh+0x18>
		set(PORTF, 3);
    11c6:	8b 9a       	sbi	0x11, 3	; 17
    11c8:	01 c0       	rjmp	.+2      	; 0x11cc <_ZN17MAX306EWIdouble_t6selectEh+0x1a>
	else
		reset(PORTF, 3);
    11ca:	8b 98       	cbi	0x11, 3	; 17
	
	mask=4;
	if ((channel & (mask)))
    11cc:	62 ff       	sbrs	r22, 2
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <_ZN17MAX306EWIdouble_t6selectEh+0x22>
		set(PORTF, 4);
    11d0:	8c 9a       	sbi	0x11, 4	; 17
    11d2:	01 c0       	rjmp	.+2      	; 0x11d6 <_ZN17MAX306EWIdouble_t6selectEh+0x24>
	else
		reset(PORTF, 4);
    11d4:	8c 98       	cbi	0x11, 4	; 17
	
	mask=8;
	if ((channel & (mask)))
    11d6:	63 ff       	sbrs	r22, 3
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <_ZN17MAX306EWIdouble_t6selectEh+0x2c>
		set(PORTF, 5);
    11da:	8d 9a       	sbi	0x11, 5	; 17
    11dc:	01 c0       	rjmp	.+2      	; 0x11e0 <_ZN17MAX306EWIdouble_t6selectEh+0x2e>
	else
		reset(PORTF, 5);
    11de:	8d 98       	cbi	0x11, 5	; 17
	
	mask=16;
	if ((channel & (mask)))
    11e0:	64 ff       	sbrs	r22, 4
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <_ZN17MAX306EWIdouble_t6selectEh+0x36>
		set(PORTF, 0);
    11e4:	88 9a       	sbi	0x11, 0	; 17
    11e6:	01 c0       	rjmp	.+2      	; 0x11ea <_ZN17MAX306EWIdouble_t6selectEh+0x38>
	else
		reset(PORTF, 0);
    11e8:	88 98       	cbi	0x11, 0	; 17
		
	mask=32;
	if ((channel & (mask)))
    11ea:	65 ff       	sbrs	r22, 5
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <_ZN17MAX306EWIdouble_t6selectEh+0x40>
		set(PORTF, 1);
    11ee:	89 9a       	sbi	0x11, 1	; 17
    11f0:	08 95       	ret
	else
		reset(PORTF, 1);
    11f2:	89 98       	cbi	0x11, 1	; 17
    11f4:	08 95       	ret

000011f6 <main>:

#include "App/src/app.h"

int main(void)
{              
    begin();
    11f6:	d4 d9       	rcall	.-3160   	; 0x5a0 <_Z5beginv>
}
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	08 95       	ret

000011fe <_ZN9GPIOPin_tC1Ev>:
#include "bit_operations.h"
#include "pins.h"



GPIOPin_t::GPIOPin_t() {
    11fe:	08 95       	ret

00001200 <_ZN9GPIOPin_t4initENS_13InitTypeDef_tE>:

GPIOPin_t::GPIOPin_t(GPIOPin_t::InitTypeDef_t InitTypeDef) {
    this->init(InitTypeDef);
}

void GPIOPin_t::init(GPIOPin_t::InitTypeDef_t InitTypeDef) {
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	ec 01       	movw	r28, r24
    1206:	87 2f       	mov	r24, r23
    this->pin_reg.pin = pgm_read_byte(&(GPIOPin_t_descr[InitTypeDef.pin_nr].pin));
    1208:	97 e0       	ldi	r25, 0x07	; 7
    120a:	69 9f       	mul	r22, r25
    120c:	b0 01       	movw	r22, r0
    120e:	11 24       	eor	r1, r1
    1210:	fb 01       	movw	r30, r22
    1212:	e6 51       	subi	r30, 0x16	; 22
    1214:	ff 4f       	sbci	r31, 0xFF	; 255
    1216:	e4 91       	lpm	r30, Z
    1218:	ee 83       	std	Y+6, r30	; 0x06
    this->pin_reg.DDRx = reinterpret_cast<volatile uint8_t*>
                         pgm_read_byte(&(GPIOPin_t_descr[InitTypeDef.pin_nr].DDRx));
    121a:	fb 01       	movw	r30, r22
    121c:	ec 51       	subi	r30, 0x1C	; 28
    121e:	ff 4f       	sbci	r31, 0xFF	; 255
    1220:	e4 91       	lpm	r30, Z
    1222:	ae 2f       	mov	r26, r30
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	b9 83       	std	Y+1, r27	; 0x01
    1228:	a8 83       	st	Y, r26
    this->pin_reg.PINx = reinterpret_cast<volatile uint8_t*>
                         pgm_read_byte(&(GPIOPin_t_descr[InitTypeDef.pin_nr].PINx));
    122a:	fb 01       	movw	r30, r22
    122c:	e8 51       	subi	r30, 0x18	; 24
    122e:	ff 4f       	sbci	r31, 0xFF	; 255
    1230:	e4 91       	lpm	r30, Z
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	fd 83       	std	Y+5, r31	; 0x05
    1236:	ec 83       	std	Y+4, r30	; 0x04
    this->pin_reg.PORTx = reinterpret_cast<volatile uint8_t*>
                          pgm_read_byte(&(GPIOPin_t_descr[InitTypeDef.pin_nr].PORTx));
    1238:	fb 01       	movw	r30, r22
    123a:	ea 51       	subi	r30, 0x1A	; 26
    123c:	ff 4f       	sbci	r31, 0xFF	; 255
    123e:	64 91       	lpm	r22, Z
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	7b 83       	std	Y+3, r23	; 0x03
    1244:	6a 83       	std	Y+2, r22	; 0x02

    if (InitTypeDef.mode == input) {
    1246:	81 11       	cpse	r24, r1
    1248:	1a c0       	rjmp	.+52     	; 0x127e <_ZN9GPIOPin_t4initENS_13InitTypeDef_tE+0x7e>
        cbi((*this->pin_reg.DDRx), this->pin_reg.pin);
    124a:	4c 91       	ld	r20, X
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	9c 01       	movw	r18, r24
    1252:	0e 80       	ldd	r0, Y+6	; 0x06
    1254:	02 c0       	rjmp	.+4      	; 0x125a <_ZN9GPIOPin_t4initENS_13InitTypeDef_tE+0x5a>
    1256:	22 0f       	add	r18, r18
    1258:	33 1f       	adc	r19, r19
    125a:	0a 94       	dec	r0
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <_ZN9GPIOPin_t4initENS_13InitTypeDef_tE+0x56>
    125e:	20 95       	com	r18
    1260:	24 23       	and	r18, r20
    1262:	2c 93       	st	X, r18
        cbi((*this->pin_reg.PORTx), this->pin_reg.pin);
    1264:	ea 81       	ldd	r30, Y+2	; 0x02
    1266:	fb 81       	ldd	r31, Y+3	; 0x03
    1268:	20 81       	ld	r18, Z
    126a:	0e 80       	ldd	r0, Y+6	; 0x06
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <_ZN9GPIOPin_t4initENS_13InitTypeDef_tE+0x72>
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	0a 94       	dec	r0
    1274:	e2 f7       	brpl	.-8      	; 0x126e <_ZN9GPIOPin_t4initENS_13InitTypeDef_tE+0x6e>
    1276:	80 95       	com	r24
    1278:	82 23       	and	r24, r18
    127a:	80 83       	st	Z, r24
    127c:	33 c0       	rjmp	.+102    	; 0x12e4 <_ZN9GPIOPin_t4initENS_13InitTypeDef_tE+0xe4>
    } else if (InitTypeDef.mode == input_pullup) {
    127e:	82 30       	cpi	r24, 0x02	; 2
    1280:	c9 f4       	brne	.+50     	; 0x12b4 <_ZN9GPIOPin_t4initENS_13InitTypeDef_tE+0xb4>
        cbi((*this->pin_reg.DDRx), this->pin_reg.pin);
    1282:	4c 91       	ld	r20, X
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	9c 01       	movw	r18, r24
    128a:	0e 80       	ldd	r0, Y+6	; 0x06
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <_ZN9GPIOPin_t4initENS_13InitTypeDef_tE+0x92>
    128e:	22 0f       	add	r18, r18
    1290:	33 1f       	adc	r19, r19
    1292:	0a 94       	dec	r0
    1294:	e2 f7       	brpl	.-8      	; 0x128e <_ZN9GPIOPin_t4initENS_13InitTypeDef_tE+0x8e>
    1296:	20 95       	com	r18
    1298:	24 23       	and	r18, r20
    129a:	2c 93       	st	X, r18
        sbi((*this->pin_reg.PORTx), this->pin_reg.pin);
    129c:	ea 81       	ldd	r30, Y+2	; 0x02
    129e:	fb 81       	ldd	r31, Y+3	; 0x03
    12a0:	20 81       	ld	r18, Z
    12a2:	0e 80       	ldd	r0, Y+6	; 0x06
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <_ZN9GPIOPin_t4initENS_13InitTypeDef_tE+0xaa>
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	0a 94       	dec	r0
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <_ZN9GPIOPin_t4initENS_13InitTypeDef_tE+0xa6>
    12ae:	82 2b       	or	r24, r18
    12b0:	80 83       	st	Z, r24
    12b2:	18 c0       	rjmp	.+48     	; 0x12e4 <_ZN9GPIOPin_t4initENS_13InitTypeDef_tE+0xe4>
    } else {
        sbi((*this->pin_reg.DDRx), this->pin_reg.pin);
    12b4:	4c 91       	ld	r20, X
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	9c 01       	movw	r18, r24
    12bc:	0e 80       	ldd	r0, Y+6	; 0x06
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <_ZN9GPIOPin_t4initENS_13InitTypeDef_tE+0xc4>
    12c0:	22 0f       	add	r18, r18
    12c2:	33 1f       	adc	r19, r19
    12c4:	0a 94       	dec	r0
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <_ZN9GPIOPin_t4initENS_13InitTypeDef_tE+0xc0>
    12c8:	24 2b       	or	r18, r20
    12ca:	2c 93       	st	X, r18
        cbi((*this->pin_reg.PORTx), this->pin_reg.pin);
    12cc:	ea 81       	ldd	r30, Y+2	; 0x02
    12ce:	fb 81       	ldd	r31, Y+3	; 0x03
    12d0:	20 81       	ld	r18, Z
    12d2:	0e 80       	ldd	r0, Y+6	; 0x06
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <_ZN9GPIOPin_t4initENS_13InitTypeDef_tE+0xda>
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	0a 94       	dec	r0
    12dc:	e2 f7       	brpl	.-8      	; 0x12d6 <_ZN9GPIOPin_t4initENS_13InitTypeDef_tE+0xd6>
    12de:	80 95       	com	r24
    12e0:	82 23       	and	r24, r18
    12e2:	80 83       	st	Z, r24
    }
}
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	08 95       	ret

000012ea <_ZN5SPI_tC1Ev>:
        (*out_data) = tmp;
        in_data++;
        out_data++;
    }
    this->disable();
}
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	ec 01       	movw	r28, r24
    12f0:	86 df       	rcall	.-244    	; 0x11fe <_ZN9GPIOPin_tC1Ev>
    12f2:	ce 01       	movw	r24, r28
    12f4:	07 96       	adiw	r24, 0x07	; 7
    12f6:	83 df       	rcall	.-250    	; 0x11fe <_ZN9GPIOPin_tC1Ev>
    12f8:	ce 01       	movw	r24, r28
    12fa:	0e 96       	adiw	r24, 0x0e	; 14
    12fc:	80 df       	rcall	.-256    	; 0x11fe <_ZN9GPIOPin_tC1Ev>
    12fe:	ce 01       	movw	r24, r28
    1300:	45 96       	adiw	r24, 0x15	; 21
    1302:	7d df       	rcall	.-262    	; 0x11fe <_ZN9GPIOPin_tC1Ev>
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	08 95       	ret

0000130a <_ZN5SPI_t4initERKNS_13InitTypeDef_tE>:
    130a:	0f 93       	push	r16
    130c:	1f 93       	push	r17
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29
    1312:	8c 01       	movw	r16, r24
    1314:	eb 01       	movw	r28, r22
    1316:	65 e1       	ldi	r22, 0x15	; 21
    1318:	71 e0       	ldi	r23, 0x01	; 1
    131a:	72 df       	rcall	.-284    	; 0x1200 <_ZN9GPIOPin_t4initENS_13InitTypeDef_tE>
    131c:	66 e1       	ldi	r22, 0x16	; 22
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	c8 01       	movw	r24, r16
    1322:	07 96       	adiw	r24, 0x07	; 7
    1324:	6d df       	rcall	.-294    	; 0x1200 <_ZN9GPIOPin_t4initENS_13InitTypeDef_tE>
    1326:	64 e1       	ldi	r22, 0x14	; 20
    1328:	71 e0       	ldi	r23, 0x01	; 1
    132a:	c8 01       	movw	r24, r16
    132c:	0e 96       	adiw	r24, 0x0e	; 14
    132e:	68 df       	rcall	.-304    	; 0x1200 <_ZN9GPIOPin_t4initENS_13InitTypeDef_tE>
    1330:	63 e1       	ldi	r22, 0x13	; 19
    1332:	71 e0       	ldi	r23, 0x01	; 1
    1334:	c8 01       	movw	r24, r16
    1336:	45 96       	adiw	r24, 0x15	; 21
    1338:	63 df       	rcall	.-314    	; 0x1200 <_ZN9GPIOPin_t4initENS_13InitTypeDef_tE>
    133a:	9b 81       	ldd	r25, Y+3	; 0x03
    133c:	29 2f       	mov	r18, r25
    133e:	20 65       	ori	r18, 0x50	; 80
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	88 0f       	add	r24, r24
    1344:	88 0f       	add	r24, r24
    1346:	98 2f       	mov	r25, r24
    1348:	92 2b       	or	r25, r18
    134a:	88 81       	ld	r24, Y
    134c:	88 0f       	add	r24, r24
    134e:	88 0f       	add	r24, r24
    1350:	88 0f       	add	r24, r24
    1352:	89 2b       	or	r24, r25
    1354:	2a 81       	ldd	r18, Y+2	; 0x02
    1356:	90 e2       	ldi	r25, 0x20	; 32
    1358:	29 9f       	mul	r18, r25
    135a:	90 01       	movw	r18, r0
    135c:	11 24       	eor	r1, r1
    135e:	82 2b       	or	r24, r18
    1360:	8c bd       	out	0x2c, r24	; 44
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	1f 91       	pop	r17
    1368:	0f 91       	pop	r16
    136a:	08 95       	ret

0000136c <_ZN5SPI_t5shiftEh>:
    136c:	6e bd       	out	0x2e, r22	; 46
    136e:	0d b4       	in	r0, 0x2d	; 45
    1370:	07 fe       	sbrs	r0, 7
    1372:	fd cf       	rjmp	.-6      	; 0x136e <_ZN5SPI_t5shiftEh+0x2>
    1374:	8e b5       	in	r24, 0x2e	; 46
    1376:	08 95       	ret

00001378 <_ZN12SPI_Device_tC1Ev>:
    1378:	42 cf       	rjmp	.-380    	; 0x11fe <_ZN9GPIOPin_tC1Ev>
    137a:	08 95       	ret

0000137c <_ZN12SPI_Device_t5shiftEh>:
    137c:	8c e1       	ldi	r24, 0x1C	; 28
    137e:	96 e0       	ldi	r25, 0x06	; 6
    1380:	f5 cf       	rjmp	.-22     	; 0x136c <_ZN5SPI_t5shiftEh>
    1382:	08 95       	ret

00001384 <_GLOBAL__sub_I__ZN5SPI_tC2Ev>:
	while (!(SPSR & (1 << SPIF))) {
	}
    return SPDR;
}

SPI_t SPI;
    1384:	8c e1       	ldi	r24, 0x1C	; 28
    1386:	96 e0       	ldi	r25, 0x06	; 6
    1388:	b0 cf       	rjmp	.-160    	; 0x12ea <_ZN5SPI_tC1Ev>
    138a:	08 95       	ret

0000138c <vfprintf>:
    138c:	2f 92       	push	r2
    138e:	3f 92       	push	r3
    1390:	4f 92       	push	r4
    1392:	5f 92       	push	r5
    1394:	6f 92       	push	r6
    1396:	7f 92       	push	r7
    1398:	8f 92       	push	r8
    139a:	9f 92       	push	r9
    139c:	af 92       	push	r10
    139e:	bf 92       	push	r11
    13a0:	cf 92       	push	r12
    13a2:	df 92       	push	r13
    13a4:	ef 92       	push	r14
    13a6:	ff 92       	push	r15
    13a8:	0f 93       	push	r16
    13aa:	1f 93       	push	r17
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	63 97       	sbiw	r28, 0x13	; 19
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	6c 01       	movw	r12, r24
    13c2:	4b 01       	movw	r8, r22
    13c4:	2a 01       	movw	r4, r20
    13c6:	fc 01       	movw	r30, r24
    13c8:	17 82       	std	Z+7, r1	; 0x07
    13ca:	16 82       	std	Z+6, r1	; 0x06
    13cc:	83 81       	ldd	r24, Z+3	; 0x03
    13ce:	81 ff       	sbrs	r24, 1
    13d0:	29 c3       	rjmp	.+1618   	; 0x1a24 <vfprintf+0x698>
    13d2:	ae 01       	movw	r20, r28
    13d4:	4f 5f       	subi	r20, 0xFF	; 255
    13d6:	5f 4f       	sbci	r21, 0xFF	; 255
    13d8:	3a 01       	movw	r6, r20
    13da:	f6 01       	movw	r30, r12
    13dc:	93 81       	ldd	r25, Z+3	; 0x03
    13de:	f4 01       	movw	r30, r8
    13e0:	93 fd       	sbrc	r25, 3
    13e2:	85 91       	lpm	r24, Z+
    13e4:	93 ff       	sbrs	r25, 3
    13e6:	81 91       	ld	r24, Z+
    13e8:	4f 01       	movw	r8, r30
    13ea:	88 23       	and	r24, r24
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <vfprintf+0x64>
    13ee:	16 c3       	rjmp	.+1580   	; 0x1a1c <vfprintf+0x690>
    13f0:	85 32       	cpi	r24, 0x25	; 37
    13f2:	39 f4       	brne	.+14     	; 0x1402 <vfprintf+0x76>
    13f4:	93 fd       	sbrc	r25, 3
    13f6:	85 91       	lpm	r24, Z+
    13f8:	93 ff       	sbrs	r25, 3
    13fa:	81 91       	ld	r24, Z+
    13fc:	4f 01       	movw	r8, r30
    13fe:	85 32       	cpi	r24, 0x25	; 37
    1400:	31 f4       	brne	.+12     	; 0x140e <vfprintf+0x82>
    1402:	b6 01       	movw	r22, r12
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	41 d4       	rcall	.+2178   	; 0x1c8a <fputc>
    1408:	52 01       	movw	r10, r4
    140a:	25 01       	movw	r4, r10
    140c:	e6 cf       	rjmp	.-52     	; 0x13da <vfprintf+0x4e>
    140e:	10 e0       	ldi	r17, 0x00	; 0
    1410:	f1 2c       	mov	r15, r1
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	20 32       	cpi	r18, 0x20	; 32
    1416:	a0 f4       	brcc	.+40     	; 0x1440 <vfprintf+0xb4>
    1418:	8b 32       	cpi	r24, 0x2B	; 43
    141a:	69 f0       	breq	.+26     	; 0x1436 <vfprintf+0xaa>
    141c:	30 f4       	brcc	.+12     	; 0x142a <vfprintf+0x9e>
    141e:	80 32       	cpi	r24, 0x20	; 32
    1420:	59 f0       	breq	.+22     	; 0x1438 <vfprintf+0xac>
    1422:	83 32       	cpi	r24, 0x23	; 35
    1424:	69 f4       	brne	.+26     	; 0x1440 <vfprintf+0xb4>
    1426:	20 61       	ori	r18, 0x10	; 16
    1428:	2c c0       	rjmp	.+88     	; 0x1482 <vfprintf+0xf6>
    142a:	8d 32       	cpi	r24, 0x2D	; 45
    142c:	39 f0       	breq	.+14     	; 0x143c <vfprintf+0xb0>
    142e:	80 33       	cpi	r24, 0x30	; 48
    1430:	39 f4       	brne	.+14     	; 0x1440 <vfprintf+0xb4>
    1432:	21 60       	ori	r18, 0x01	; 1
    1434:	26 c0       	rjmp	.+76     	; 0x1482 <vfprintf+0xf6>
    1436:	22 60       	ori	r18, 0x02	; 2
    1438:	24 60       	ori	r18, 0x04	; 4
    143a:	23 c0       	rjmp	.+70     	; 0x1482 <vfprintf+0xf6>
    143c:	28 60       	ori	r18, 0x08	; 8
    143e:	21 c0       	rjmp	.+66     	; 0x1482 <vfprintf+0xf6>
    1440:	27 fd       	sbrc	r18, 7
    1442:	27 c0       	rjmp	.+78     	; 0x1492 <vfprintf+0x106>
    1444:	30 ed       	ldi	r19, 0xD0	; 208
    1446:	38 0f       	add	r19, r24
    1448:	3a 30       	cpi	r19, 0x0A	; 10
    144a:	78 f4       	brcc	.+30     	; 0x146a <vfprintf+0xde>
    144c:	26 ff       	sbrs	r18, 6
    144e:	06 c0       	rjmp	.+12     	; 0x145c <vfprintf+0xd0>
    1450:	fa e0       	ldi	r31, 0x0A	; 10
    1452:	1f 9f       	mul	r17, r31
    1454:	30 0d       	add	r19, r0
    1456:	11 24       	eor	r1, r1
    1458:	13 2f       	mov	r17, r19
    145a:	13 c0       	rjmp	.+38     	; 0x1482 <vfprintf+0xf6>
    145c:	4a e0       	ldi	r20, 0x0A	; 10
    145e:	f4 9e       	mul	r15, r20
    1460:	30 0d       	add	r19, r0
    1462:	11 24       	eor	r1, r1
    1464:	f3 2e       	mov	r15, r19
    1466:	20 62       	ori	r18, 0x20	; 32
    1468:	0c c0       	rjmp	.+24     	; 0x1482 <vfprintf+0xf6>
    146a:	8e 32       	cpi	r24, 0x2E	; 46
    146c:	21 f4       	brne	.+8      	; 0x1476 <vfprintf+0xea>
    146e:	26 fd       	sbrc	r18, 6
    1470:	d5 c2       	rjmp	.+1450   	; 0x1a1c <vfprintf+0x690>
    1472:	20 64       	ori	r18, 0x40	; 64
    1474:	06 c0       	rjmp	.+12     	; 0x1482 <vfprintf+0xf6>
    1476:	8c 36       	cpi	r24, 0x6C	; 108
    1478:	11 f4       	brne	.+4      	; 0x147e <vfprintf+0xf2>
    147a:	20 68       	ori	r18, 0x80	; 128
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <vfprintf+0xf6>
    147e:	88 36       	cpi	r24, 0x68	; 104
    1480:	41 f4       	brne	.+16     	; 0x1492 <vfprintf+0x106>
    1482:	f4 01       	movw	r30, r8
    1484:	93 fd       	sbrc	r25, 3
    1486:	85 91       	lpm	r24, Z+
    1488:	93 ff       	sbrs	r25, 3
    148a:	81 91       	ld	r24, Z+
    148c:	4f 01       	movw	r8, r30
    148e:	81 11       	cpse	r24, r1
    1490:	c1 cf       	rjmp	.-126    	; 0x1414 <vfprintf+0x88>
    1492:	9b eb       	ldi	r25, 0xBB	; 187
    1494:	98 0f       	add	r25, r24
    1496:	93 30       	cpi	r25, 0x03	; 3
    1498:	18 f4       	brcc	.+6      	; 0x14a0 <vfprintf+0x114>
    149a:	20 61       	ori	r18, 0x10	; 16
    149c:	80 5e       	subi	r24, 0xE0	; 224
    149e:	06 c0       	rjmp	.+12     	; 0x14ac <vfprintf+0x120>
    14a0:	9b e9       	ldi	r25, 0x9B	; 155
    14a2:	98 0f       	add	r25, r24
    14a4:	93 30       	cpi	r25, 0x03	; 3
    14a6:	08 f0       	brcs	.+2      	; 0x14aa <vfprintf+0x11e>
    14a8:	64 c1       	rjmp	.+712    	; 0x1772 <vfprintf+0x3e6>
    14aa:	2f 7e       	andi	r18, 0xEF	; 239
    14ac:	26 ff       	sbrs	r18, 6
    14ae:	16 e0       	ldi	r17, 0x06	; 6
    14b0:	2f 73       	andi	r18, 0x3F	; 63
    14b2:	32 2e       	mov	r3, r18
    14b4:	85 36       	cpi	r24, 0x65	; 101
    14b6:	19 f4       	brne	.+6      	; 0x14be <vfprintf+0x132>
    14b8:	20 64       	ori	r18, 0x40	; 64
    14ba:	32 2e       	mov	r3, r18
    14bc:	08 c0       	rjmp	.+16     	; 0x14ce <vfprintf+0x142>
    14be:	86 36       	cpi	r24, 0x66	; 102
    14c0:	21 f4       	brne	.+8      	; 0x14ca <vfprintf+0x13e>
    14c2:	f2 2f       	mov	r31, r18
    14c4:	f0 68       	ori	r31, 0x80	; 128
    14c6:	3f 2e       	mov	r3, r31
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <vfprintf+0x142>
    14ca:	11 11       	cpse	r17, r1
    14cc:	11 50       	subi	r17, 0x01	; 1
    14ce:	37 fe       	sbrs	r3, 7
    14d0:	07 c0       	rjmp	.+14     	; 0x14e0 <vfprintf+0x154>
    14d2:	1c 33       	cpi	r17, 0x3C	; 60
    14d4:	50 f4       	brcc	.+20     	; 0x14ea <vfprintf+0x15e>
    14d6:	ee 24       	eor	r14, r14
    14d8:	e3 94       	inc	r14
    14da:	e1 0e       	add	r14, r17
    14dc:	27 e0       	ldi	r18, 0x07	; 7
    14de:	0b c0       	rjmp	.+22     	; 0x14f6 <vfprintf+0x16a>
    14e0:	18 30       	cpi	r17, 0x08	; 8
    14e2:	38 f0       	brcs	.+14     	; 0x14f2 <vfprintf+0x166>
    14e4:	27 e0       	ldi	r18, 0x07	; 7
    14e6:	17 e0       	ldi	r17, 0x07	; 7
    14e8:	05 c0       	rjmp	.+10     	; 0x14f4 <vfprintf+0x168>
    14ea:	27 e0       	ldi	r18, 0x07	; 7
    14ec:	4c e3       	ldi	r20, 0x3C	; 60
    14ee:	e4 2e       	mov	r14, r20
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <vfprintf+0x16a>
    14f2:	21 2f       	mov	r18, r17
    14f4:	e1 2c       	mov	r14, r1
    14f6:	52 01       	movw	r10, r4
    14f8:	44 e0       	ldi	r20, 0x04	; 4
    14fa:	a4 0e       	add	r10, r20
    14fc:	b1 1c       	adc	r11, r1
    14fe:	f2 01       	movw	r30, r4
    1500:	60 81       	ld	r22, Z
    1502:	71 81       	ldd	r23, Z+1	; 0x01
    1504:	82 81       	ldd	r24, Z+2	; 0x02
    1506:	93 81       	ldd	r25, Z+3	; 0x03
    1508:	0e 2d       	mov	r16, r14
    150a:	a3 01       	movw	r20, r6
    150c:	d0 d2       	rcall	.+1440   	; 0x1aae <__ftoa_engine>
    150e:	2c 01       	movw	r4, r24
    1510:	09 81       	ldd	r16, Y+1	; 0x01
    1512:	00 ff       	sbrs	r16, 0
    1514:	02 c0       	rjmp	.+4      	; 0x151a <vfprintf+0x18e>
    1516:	03 ff       	sbrs	r16, 3
    1518:	07 c0       	rjmp	.+14     	; 0x1528 <vfprintf+0x19c>
    151a:	31 fc       	sbrc	r3, 1
    151c:	08 c0       	rjmp	.+16     	; 0x152e <vfprintf+0x1a2>
    151e:	32 fe       	sbrs	r3, 2
    1520:	09 c0       	rjmp	.+18     	; 0x1534 <vfprintf+0x1a8>
    1522:	30 e2       	ldi	r19, 0x20	; 32
    1524:	23 2e       	mov	r2, r19
    1526:	07 c0       	rjmp	.+14     	; 0x1536 <vfprintf+0x1aa>
    1528:	2d e2       	ldi	r18, 0x2D	; 45
    152a:	22 2e       	mov	r2, r18
    152c:	04 c0       	rjmp	.+8      	; 0x1536 <vfprintf+0x1aa>
    152e:	9b e2       	ldi	r25, 0x2B	; 43
    1530:	29 2e       	mov	r2, r25
    1532:	01 c0       	rjmp	.+2      	; 0x1536 <vfprintf+0x1aa>
    1534:	21 2c       	mov	r2, r1
    1536:	80 2f       	mov	r24, r16
    1538:	8c 70       	andi	r24, 0x0C	; 12
    153a:	19 f0       	breq	.+6      	; 0x1542 <vfprintf+0x1b6>
    153c:	21 10       	cpse	r2, r1
    153e:	51 c2       	rjmp	.+1186   	; 0x19e2 <vfprintf+0x656>
    1540:	8d c2       	rjmp	.+1306   	; 0x1a5c <vfprintf+0x6d0>
    1542:	37 fe       	sbrs	r3, 7
    1544:	0f c0       	rjmp	.+30     	; 0x1564 <vfprintf+0x1d8>
    1546:	e4 0c       	add	r14, r4
    1548:	04 ff       	sbrs	r16, 4
    154a:	04 c0       	rjmp	.+8      	; 0x1554 <vfprintf+0x1c8>
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	81 33       	cpi	r24, 0x31	; 49
    1550:	09 f4       	brne	.+2      	; 0x1554 <vfprintf+0x1c8>
    1552:	ea 94       	dec	r14
    1554:	1e 14       	cp	r1, r14
    1556:	74 f5       	brge	.+92     	; 0x15b4 <vfprintf+0x228>
    1558:	f8 e0       	ldi	r31, 0x08	; 8
    155a:	fe 15       	cp	r31, r14
    155c:	78 f5       	brcc	.+94     	; 0x15bc <vfprintf+0x230>
    155e:	88 e0       	ldi	r24, 0x08	; 8
    1560:	e8 2e       	mov	r14, r24
    1562:	2c c0       	rjmp	.+88     	; 0x15bc <vfprintf+0x230>
    1564:	36 fc       	sbrc	r3, 6
    1566:	2a c0       	rjmp	.+84     	; 0x15bc <vfprintf+0x230>
    1568:	81 2f       	mov	r24, r17
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	84 15       	cp	r24, r4
    156e:	95 05       	cpc	r25, r5
    1570:	9c f0       	brlt	.+38     	; 0x1598 <vfprintf+0x20c>
    1572:	2c ef       	ldi	r18, 0xFC	; 252
    1574:	42 16       	cp	r4, r18
    1576:	2f ef       	ldi	r18, 0xFF	; 255
    1578:	52 06       	cpc	r5, r18
    157a:	74 f0       	brlt	.+28     	; 0x1598 <vfprintf+0x20c>
    157c:	43 2d       	mov	r20, r3
    157e:	40 68       	ori	r20, 0x80	; 128
    1580:	34 2e       	mov	r3, r20
    1582:	0a c0       	rjmp	.+20     	; 0x1598 <vfprintf+0x20c>
    1584:	e2 e0       	ldi	r30, 0x02	; 2
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	ec 0f       	add	r30, r28
    158a:	fd 1f       	adc	r31, r29
    158c:	e1 0f       	add	r30, r17
    158e:	f1 1d       	adc	r31, r1
    1590:	80 81       	ld	r24, Z
    1592:	80 33       	cpi	r24, 0x30	; 48
    1594:	19 f4       	brne	.+6      	; 0x159c <vfprintf+0x210>
    1596:	11 50       	subi	r17, 0x01	; 1
    1598:	11 11       	cpse	r17, r1
    159a:	f4 cf       	rjmp	.-24     	; 0x1584 <vfprintf+0x1f8>
    159c:	37 fe       	sbrs	r3, 7
    159e:	0e c0       	rjmp	.+28     	; 0x15bc <vfprintf+0x230>
    15a0:	ee 24       	eor	r14, r14
    15a2:	e3 94       	inc	r14
    15a4:	e1 0e       	add	r14, r17
    15a6:	81 2f       	mov	r24, r17
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	48 16       	cp	r4, r24
    15ac:	59 06       	cpc	r5, r25
    15ae:	2c f4       	brge	.+10     	; 0x15ba <vfprintf+0x22e>
    15b0:	14 19       	sub	r17, r4
    15b2:	04 c0       	rjmp	.+8      	; 0x15bc <vfprintf+0x230>
    15b4:	ee 24       	eor	r14, r14
    15b6:	e3 94       	inc	r14
    15b8:	01 c0       	rjmp	.+2      	; 0x15bc <vfprintf+0x230>
    15ba:	10 e0       	ldi	r17, 0x00	; 0
    15bc:	37 fe       	sbrs	r3, 7
    15be:	06 c0       	rjmp	.+12     	; 0x15cc <vfprintf+0x240>
    15c0:	14 14       	cp	r1, r4
    15c2:	15 04       	cpc	r1, r5
    15c4:	34 f4       	brge	.+12     	; 0x15d2 <vfprintf+0x246>
    15c6:	c2 01       	movw	r24, r4
    15c8:	01 96       	adiw	r24, 0x01	; 1
    15ca:	05 c0       	rjmp	.+10     	; 0x15d6 <vfprintf+0x24a>
    15cc:	85 e0       	ldi	r24, 0x05	; 5
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <vfprintf+0x24a>
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	21 10       	cpse	r2, r1
    15d8:	01 96       	adiw	r24, 0x01	; 1
    15da:	11 23       	and	r17, r17
    15dc:	31 f0       	breq	.+12     	; 0x15ea <vfprintf+0x25e>
    15de:	21 2f       	mov	r18, r17
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	2f 5f       	subi	r18, 0xFF	; 255
    15e4:	3f 4f       	sbci	r19, 0xFF	; 255
    15e6:	82 0f       	add	r24, r18
    15e8:	93 1f       	adc	r25, r19
    15ea:	2f 2d       	mov	r18, r15
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	82 17       	cp	r24, r18
    15f0:	93 07       	cpc	r25, r19
    15f2:	14 f4       	brge	.+4      	; 0x15f8 <vfprintf+0x26c>
    15f4:	f8 1a       	sub	r15, r24
    15f6:	01 c0       	rjmp	.+2      	; 0x15fa <vfprintf+0x26e>
    15f8:	f1 2c       	mov	r15, r1
    15fa:	83 2d       	mov	r24, r3
    15fc:	89 70       	andi	r24, 0x09	; 9
    15fe:	41 f4       	brne	.+16     	; 0x1610 <vfprintf+0x284>
    1600:	ff 20       	and	r15, r15
    1602:	31 f0       	breq	.+12     	; 0x1610 <vfprintf+0x284>
    1604:	b6 01       	movw	r22, r12
    1606:	80 e2       	ldi	r24, 0x20	; 32
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	3f d3       	rcall	.+1662   	; 0x1c8a <fputc>
    160c:	fa 94       	dec	r15
    160e:	f8 cf       	rjmp	.-16     	; 0x1600 <vfprintf+0x274>
    1610:	22 20       	and	r2, r2
    1612:	21 f0       	breq	.+8      	; 0x161c <vfprintf+0x290>
    1614:	b6 01       	movw	r22, r12
    1616:	82 2d       	mov	r24, r2
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	37 d3       	rcall	.+1646   	; 0x1c8a <fputc>
    161c:	33 fc       	sbrc	r3, 3
    161e:	08 c0       	rjmp	.+16     	; 0x1630 <vfprintf+0x2a4>
    1620:	ff 20       	and	r15, r15
    1622:	31 f0       	breq	.+12     	; 0x1630 <vfprintf+0x2a4>
    1624:	b6 01       	movw	r22, r12
    1626:	80 e3       	ldi	r24, 0x30	; 48
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	2f d3       	rcall	.+1630   	; 0x1c8a <fputc>
    162c:	fa 94       	dec	r15
    162e:	f8 cf       	rjmp	.-16     	; 0x1620 <vfprintf+0x294>
    1630:	37 fe       	sbrs	r3, 7
    1632:	58 c0       	rjmp	.+176    	; 0x16e4 <vfprintf+0x358>
    1634:	94 2d       	mov	r25, r4
    1636:	85 2d       	mov	r24, r5
    1638:	57 fe       	sbrs	r5, 7
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <vfprintf+0x2b4>
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	29 2e       	mov	r2, r25
    1642:	38 2e       	mov	r3, r24
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	a2 01       	movw	r20, r4
    164a:	4e 19       	sub	r20, r14
    164c:	51 09       	sbc	r21, r1
    164e:	5d 87       	std	Y+13, r21	; 0x0d
    1650:	4c 87       	std	Y+12, r20	; 0x0c
    1652:	a2 01       	movw	r20, r4
    1654:	42 19       	sub	r20, r2
    1656:	53 09       	sbc	r21, r3
    1658:	5f 87       	std	Y+15, r21	; 0x0f
    165a:	4e 87       	std	Y+14, r20	; 0x0e
    165c:	61 2f       	mov	r22, r17
    165e:	70 e0       	ldi	r23, 0x00	; 0
    1660:	44 27       	eor	r20, r20
    1662:	55 27       	eor	r21, r21
    1664:	46 1b       	sub	r20, r22
    1666:	57 0b       	sbc	r21, r23
    1668:	59 8b       	std	Y+17, r21	; 0x11
    166a:	48 8b       	std	Y+16, r20	; 0x10
    166c:	5f ef       	ldi	r21, 0xFF	; 255
    166e:	25 16       	cp	r2, r21
    1670:	35 06       	cpc	r3, r21
    1672:	41 f4       	brne	.+16     	; 0x1684 <vfprintf+0x2f8>
    1674:	b6 01       	movw	r22, r12
    1676:	8e e2       	ldi	r24, 0x2E	; 46
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	2a 8b       	std	Y+18, r18	; 0x12
    167c:	3b 8b       	std	Y+19, r19	; 0x13
    167e:	05 d3       	rcall	.+1546   	; 0x1c8a <fputc>
    1680:	3b 89       	ldd	r19, Y+19	; 0x13
    1682:	2a 89       	ldd	r18, Y+18	; 0x12
    1684:	42 14       	cp	r4, r2
    1686:	53 04       	cpc	r5, r3
    1688:	6c f0       	brlt	.+26     	; 0x16a4 <vfprintf+0x318>
    168a:	4c 85       	ldd	r20, Y+12	; 0x0c
    168c:	5d 85       	ldd	r21, Y+13	; 0x0d
    168e:	42 15       	cp	r20, r2
    1690:	53 05       	cpc	r21, r3
    1692:	44 f4       	brge	.+16     	; 0x16a4 <vfprintf+0x318>
    1694:	ee 85       	ldd	r30, Y+14	; 0x0e
    1696:	ff 85       	ldd	r31, Y+15	; 0x0f
    1698:	e2 0f       	add	r30, r18
    169a:	f3 1f       	adc	r31, r19
    169c:	e6 0d       	add	r30, r6
    169e:	f7 1d       	adc	r31, r7
    16a0:	81 81       	ldd	r24, Z+1	; 0x01
    16a2:	01 c0       	rjmp	.+2      	; 0x16a6 <vfprintf+0x31a>
    16a4:	80 e3       	ldi	r24, 0x30	; 48
    16a6:	51 e0       	ldi	r21, 0x01	; 1
    16a8:	25 1a       	sub	r2, r21
    16aa:	31 08       	sbc	r3, r1
    16ac:	2f 5f       	subi	r18, 0xFF	; 255
    16ae:	3f 4f       	sbci	r19, 0xFF	; 255
    16b0:	48 89       	ldd	r20, Y+16	; 0x10
    16b2:	59 89       	ldd	r21, Y+17	; 0x11
    16b4:	24 16       	cp	r2, r20
    16b6:	35 06       	cpc	r3, r21
    16b8:	44 f0       	brlt	.+16     	; 0x16ca <vfprintf+0x33e>
    16ba:	b6 01       	movw	r22, r12
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	2a 8b       	std	Y+18, r18	; 0x12
    16c0:	3b 8b       	std	Y+19, r19	; 0x13
    16c2:	e3 d2       	rcall	.+1478   	; 0x1c8a <fputc>
    16c4:	2a 89       	ldd	r18, Y+18	; 0x12
    16c6:	3b 89       	ldd	r19, Y+19	; 0x13
    16c8:	d1 cf       	rjmp	.-94     	; 0x166c <vfprintf+0x2e0>
    16ca:	24 14       	cp	r2, r4
    16cc:	35 04       	cpc	r3, r5
    16ce:	39 f4       	brne	.+14     	; 0x16de <vfprintf+0x352>
    16d0:	9a 81       	ldd	r25, Y+2	; 0x02
    16d2:	96 33       	cpi	r25, 0x36	; 54
    16d4:	18 f4       	brcc	.+6      	; 0x16dc <vfprintf+0x350>
    16d6:	95 33       	cpi	r25, 0x35	; 53
    16d8:	11 f4       	brne	.+4      	; 0x16de <vfprintf+0x352>
    16da:	04 ff       	sbrs	r16, 4
    16dc:	81 e3       	ldi	r24, 0x31	; 49
    16de:	b6 01       	movw	r22, r12
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	45 c0       	rjmp	.+138    	; 0x176e <vfprintf+0x3e2>
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	81 33       	cpi	r24, 0x31	; 49
    16e8:	09 f0       	breq	.+2      	; 0x16ec <vfprintf+0x360>
    16ea:	0f 7e       	andi	r16, 0xEF	; 239
    16ec:	b6 01       	movw	r22, r12
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	cc d2       	rcall	.+1432   	; 0x1c8a <fputc>
    16f2:	11 11       	cpse	r17, r1
    16f4:	05 c0       	rjmp	.+10     	; 0x1700 <vfprintf+0x374>
    16f6:	34 fc       	sbrc	r3, 4
    16f8:	16 c0       	rjmp	.+44     	; 0x1726 <vfprintf+0x39a>
    16fa:	85 e6       	ldi	r24, 0x65	; 101
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	15 c0       	rjmp	.+42     	; 0x172a <vfprintf+0x39e>
    1700:	b6 01       	movw	r22, r12
    1702:	8e e2       	ldi	r24, 0x2E	; 46
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	c1 d2       	rcall	.+1410   	; 0x1c8a <fputc>
    1708:	82 e0       	ldi	r24, 0x02	; 2
    170a:	ee 24       	eor	r14, r14
    170c:	e3 94       	inc	r14
    170e:	e8 0e       	add	r14, r24
    1710:	f3 01       	movw	r30, r6
    1712:	e8 0f       	add	r30, r24
    1714:	f1 1d       	adc	r31, r1
    1716:	80 81       	ld	r24, Z
    1718:	b6 01       	movw	r22, r12
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	b6 d2       	rcall	.+1388   	; 0x1c8a <fputc>
    171e:	11 50       	subi	r17, 0x01	; 1
    1720:	8e 2d       	mov	r24, r14
    1722:	99 f7       	brne	.-26     	; 0x170a <vfprintf+0x37e>
    1724:	e8 cf       	rjmp	.-48     	; 0x16f6 <vfprintf+0x36a>
    1726:	85 e4       	ldi	r24, 0x45	; 69
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	b6 01       	movw	r22, r12
    172c:	ae d2       	rcall	.+1372   	; 0x1c8a <fputc>
    172e:	57 fc       	sbrc	r5, 7
    1730:	05 c0       	rjmp	.+10     	; 0x173c <vfprintf+0x3b0>
    1732:	41 14       	cp	r4, r1
    1734:	51 04       	cpc	r5, r1
    1736:	39 f4       	brne	.+14     	; 0x1746 <vfprintf+0x3ba>
    1738:	04 ff       	sbrs	r16, 4
    173a:	05 c0       	rjmp	.+10     	; 0x1746 <vfprintf+0x3ba>
    173c:	51 94       	neg	r5
    173e:	41 94       	neg	r4
    1740:	51 08       	sbc	r5, r1
    1742:	8d e2       	ldi	r24, 0x2D	; 45
    1744:	01 c0       	rjmp	.+2      	; 0x1748 <vfprintf+0x3bc>
    1746:	8b e2       	ldi	r24, 0x2B	; 43
    1748:	b6 01       	movw	r22, r12
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	9e d2       	rcall	.+1340   	; 0x1c8a <fputc>
    174e:	80 e3       	ldi	r24, 0x30	; 48
    1750:	9a e0       	ldi	r25, 0x0A	; 10
    1752:	49 16       	cp	r4, r25
    1754:	51 04       	cpc	r5, r1
    1756:	2c f0       	brlt	.+10     	; 0x1762 <vfprintf+0x3d6>
    1758:	8f 5f       	subi	r24, 0xFF	; 255
    175a:	5a e0       	ldi	r21, 0x0A	; 10
    175c:	45 1a       	sub	r4, r21
    175e:	51 08       	sbc	r5, r1
    1760:	f7 cf       	rjmp	.-18     	; 0x1750 <vfprintf+0x3c4>
    1762:	b6 01       	movw	r22, r12
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	91 d2       	rcall	.+1314   	; 0x1c8a <fputc>
    1768:	b6 01       	movw	r22, r12
    176a:	c2 01       	movw	r24, r4
    176c:	c0 96       	adiw	r24, 0x30	; 48
    176e:	8d d2       	rcall	.+1306   	; 0x1c8a <fputc>
    1770:	4c c1       	rjmp	.+664    	; 0x1a0a <vfprintf+0x67e>
    1772:	83 36       	cpi	r24, 0x63	; 99
    1774:	31 f0       	breq	.+12     	; 0x1782 <vfprintf+0x3f6>
    1776:	83 37       	cpi	r24, 0x73	; 115
    1778:	79 f0       	breq	.+30     	; 0x1798 <vfprintf+0x40c>
    177a:	83 35       	cpi	r24, 0x53	; 83
    177c:	09 f0       	breq	.+2      	; 0x1780 <vfprintf+0x3f4>
    177e:	54 c0       	rjmp	.+168    	; 0x1828 <vfprintf+0x49c>
    1780:	20 c0       	rjmp	.+64     	; 0x17c2 <vfprintf+0x436>
    1782:	52 01       	movw	r10, r4
    1784:	e2 e0       	ldi	r30, 0x02	; 2
    1786:	ae 0e       	add	r10, r30
    1788:	b1 1c       	adc	r11, r1
    178a:	f2 01       	movw	r30, r4
    178c:	80 81       	ld	r24, Z
    178e:	89 83       	std	Y+1, r24	; 0x01
    1790:	01 e0       	ldi	r16, 0x01	; 1
    1792:	10 e0       	ldi	r17, 0x00	; 0
    1794:	23 01       	movw	r4, r6
    1796:	13 c0       	rjmp	.+38     	; 0x17be <vfprintf+0x432>
    1798:	52 01       	movw	r10, r4
    179a:	f2 e0       	ldi	r31, 0x02	; 2
    179c:	af 0e       	add	r10, r31
    179e:	b1 1c       	adc	r11, r1
    17a0:	f2 01       	movw	r30, r4
    17a2:	40 80       	ld	r4, Z
    17a4:	51 80       	ldd	r5, Z+1	; 0x01
    17a6:	26 ff       	sbrs	r18, 6
    17a8:	03 c0       	rjmp	.+6      	; 0x17b0 <vfprintf+0x424>
    17aa:	61 2f       	mov	r22, r17
    17ac:	70 e0       	ldi	r23, 0x00	; 0
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <vfprintf+0x428>
    17b0:	6f ef       	ldi	r22, 0xFF	; 255
    17b2:	7f ef       	ldi	r23, 0xFF	; 255
    17b4:	c2 01       	movw	r24, r4
    17b6:	2a 8b       	std	Y+18, r18	; 0x12
    17b8:	5d d2       	rcall	.+1210   	; 0x1c74 <strnlen>
    17ba:	8c 01       	movw	r16, r24
    17bc:	2a 89       	ldd	r18, Y+18	; 0x12
    17be:	2f 77       	andi	r18, 0x7F	; 127
    17c0:	14 c0       	rjmp	.+40     	; 0x17ea <vfprintf+0x45e>
    17c2:	52 01       	movw	r10, r4
    17c4:	f2 e0       	ldi	r31, 0x02	; 2
    17c6:	af 0e       	add	r10, r31
    17c8:	b1 1c       	adc	r11, r1
    17ca:	f2 01       	movw	r30, r4
    17cc:	40 80       	ld	r4, Z
    17ce:	51 80       	ldd	r5, Z+1	; 0x01
    17d0:	26 ff       	sbrs	r18, 6
    17d2:	03 c0       	rjmp	.+6      	; 0x17da <vfprintf+0x44e>
    17d4:	61 2f       	mov	r22, r17
    17d6:	70 e0       	ldi	r23, 0x00	; 0
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <vfprintf+0x452>
    17da:	6f ef       	ldi	r22, 0xFF	; 255
    17dc:	7f ef       	ldi	r23, 0xFF	; 255
    17de:	c2 01       	movw	r24, r4
    17e0:	2a 8b       	std	Y+18, r18	; 0x12
    17e2:	3d d2       	rcall	.+1146   	; 0x1c5e <strnlen_P>
    17e4:	8c 01       	movw	r16, r24
    17e6:	2a 89       	ldd	r18, Y+18	; 0x12
    17e8:	20 68       	ori	r18, 0x80	; 128
    17ea:	32 2e       	mov	r3, r18
    17ec:	23 fd       	sbrc	r18, 3
    17ee:	18 c0       	rjmp	.+48     	; 0x1820 <vfprintf+0x494>
    17f0:	8f 2d       	mov	r24, r15
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	08 17       	cp	r16, r24
    17f6:	19 07       	cpc	r17, r25
    17f8:	98 f4       	brcc	.+38     	; 0x1820 <vfprintf+0x494>
    17fa:	b6 01       	movw	r22, r12
    17fc:	80 e2       	ldi	r24, 0x20	; 32
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	44 d2       	rcall	.+1160   	; 0x1c8a <fputc>
    1802:	fa 94       	dec	r15
    1804:	f5 cf       	rjmp	.-22     	; 0x17f0 <vfprintf+0x464>
    1806:	f2 01       	movw	r30, r4
    1808:	37 fc       	sbrc	r3, 7
    180a:	85 91       	lpm	r24, Z+
    180c:	37 fe       	sbrs	r3, 7
    180e:	81 91       	ld	r24, Z+
    1810:	2f 01       	movw	r4, r30
    1812:	b6 01       	movw	r22, r12
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	39 d2       	rcall	.+1138   	; 0x1c8a <fputc>
    1818:	f1 10       	cpse	r15, r1
    181a:	fa 94       	dec	r15
    181c:	01 50       	subi	r16, 0x01	; 1
    181e:	11 09       	sbc	r17, r1
    1820:	01 15       	cp	r16, r1
    1822:	11 05       	cpc	r17, r1
    1824:	81 f7       	brne	.-32     	; 0x1806 <vfprintf+0x47a>
    1826:	f1 c0       	rjmp	.+482    	; 0x1a0a <vfprintf+0x67e>
    1828:	84 36       	cpi	r24, 0x64	; 100
    182a:	11 f0       	breq	.+4      	; 0x1830 <vfprintf+0x4a4>
    182c:	89 36       	cpi	r24, 0x69	; 105
    182e:	51 f5       	brne	.+84     	; 0x1884 <vfprintf+0x4f8>
    1830:	52 01       	movw	r10, r4
    1832:	27 ff       	sbrs	r18, 7
    1834:	09 c0       	rjmp	.+18     	; 0x1848 <vfprintf+0x4bc>
    1836:	f4 e0       	ldi	r31, 0x04	; 4
    1838:	af 0e       	add	r10, r31
    183a:	b1 1c       	adc	r11, r1
    183c:	f2 01       	movw	r30, r4
    183e:	60 81       	ld	r22, Z
    1840:	71 81       	ldd	r23, Z+1	; 0x01
    1842:	82 81       	ldd	r24, Z+2	; 0x02
    1844:	93 81       	ldd	r25, Z+3	; 0x03
    1846:	0a c0       	rjmp	.+20     	; 0x185c <vfprintf+0x4d0>
    1848:	f2 e0       	ldi	r31, 0x02	; 2
    184a:	af 0e       	add	r10, r31
    184c:	b1 1c       	adc	r11, r1
    184e:	f2 01       	movw	r30, r4
    1850:	60 81       	ld	r22, Z
    1852:	71 81       	ldd	r23, Z+1	; 0x01
    1854:	07 2e       	mov	r0, r23
    1856:	00 0c       	add	r0, r0
    1858:	88 0b       	sbc	r24, r24
    185a:	99 0b       	sbc	r25, r25
    185c:	2f 76       	andi	r18, 0x6F	; 111
    185e:	32 2e       	mov	r3, r18
    1860:	97 ff       	sbrs	r25, 7
    1862:	09 c0       	rjmp	.+18     	; 0x1876 <vfprintf+0x4ea>
    1864:	90 95       	com	r25
    1866:	80 95       	com	r24
    1868:	70 95       	com	r23
    186a:	61 95       	neg	r22
    186c:	7f 4f       	sbci	r23, 0xFF	; 255
    186e:	8f 4f       	sbci	r24, 0xFF	; 255
    1870:	9f 4f       	sbci	r25, 0xFF	; 255
    1872:	20 68       	ori	r18, 0x80	; 128
    1874:	32 2e       	mov	r3, r18
    1876:	2a e0       	ldi	r18, 0x0A	; 10
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	a3 01       	movw	r20, r6
    187c:	76 d2       	rcall	.+1260   	; 0x1d6a <__ultoa_invert>
    187e:	e8 2e       	mov	r14, r24
    1880:	e6 18       	sub	r14, r6
    1882:	3e c0       	rjmp	.+124    	; 0x1900 <vfprintf+0x574>
    1884:	02 2f       	mov	r16, r18
    1886:	85 37       	cpi	r24, 0x75	; 117
    1888:	21 f4       	brne	.+8      	; 0x1892 <vfprintf+0x506>
    188a:	0f 7e       	andi	r16, 0xEF	; 239
    188c:	2a e0       	ldi	r18, 0x0A	; 10
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	1d c0       	rjmp	.+58     	; 0x18cc <vfprintf+0x540>
    1892:	09 7f       	andi	r16, 0xF9	; 249
    1894:	8f 36       	cpi	r24, 0x6F	; 111
    1896:	91 f0       	breq	.+36     	; 0x18bc <vfprintf+0x530>
    1898:	18 f4       	brcc	.+6      	; 0x18a0 <vfprintf+0x514>
    189a:	88 35       	cpi	r24, 0x58	; 88
    189c:	59 f0       	breq	.+22     	; 0x18b4 <vfprintf+0x528>
    189e:	be c0       	rjmp	.+380    	; 0x1a1c <vfprintf+0x690>
    18a0:	80 37       	cpi	r24, 0x70	; 112
    18a2:	19 f0       	breq	.+6      	; 0x18aa <vfprintf+0x51e>
    18a4:	88 37       	cpi	r24, 0x78	; 120
    18a6:	11 f0       	breq	.+4      	; 0x18ac <vfprintf+0x520>
    18a8:	b9 c0       	rjmp	.+370    	; 0x1a1c <vfprintf+0x690>
    18aa:	00 61       	ori	r16, 0x10	; 16
    18ac:	04 ff       	sbrs	r16, 4
    18ae:	09 c0       	rjmp	.+18     	; 0x18c2 <vfprintf+0x536>
    18b0:	04 60       	ori	r16, 0x04	; 4
    18b2:	07 c0       	rjmp	.+14     	; 0x18c2 <vfprintf+0x536>
    18b4:	24 ff       	sbrs	r18, 4
    18b6:	08 c0       	rjmp	.+16     	; 0x18c8 <vfprintf+0x53c>
    18b8:	06 60       	ori	r16, 0x06	; 6
    18ba:	06 c0       	rjmp	.+12     	; 0x18c8 <vfprintf+0x53c>
    18bc:	28 e0       	ldi	r18, 0x08	; 8
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	05 c0       	rjmp	.+10     	; 0x18cc <vfprintf+0x540>
    18c2:	20 e1       	ldi	r18, 0x10	; 16
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <vfprintf+0x540>
    18c8:	20 e1       	ldi	r18, 0x10	; 16
    18ca:	32 e0       	ldi	r19, 0x02	; 2
    18cc:	52 01       	movw	r10, r4
    18ce:	07 ff       	sbrs	r16, 7
    18d0:	09 c0       	rjmp	.+18     	; 0x18e4 <vfprintf+0x558>
    18d2:	f4 e0       	ldi	r31, 0x04	; 4
    18d4:	af 0e       	add	r10, r31
    18d6:	b1 1c       	adc	r11, r1
    18d8:	f2 01       	movw	r30, r4
    18da:	60 81       	ld	r22, Z
    18dc:	71 81       	ldd	r23, Z+1	; 0x01
    18de:	82 81       	ldd	r24, Z+2	; 0x02
    18e0:	93 81       	ldd	r25, Z+3	; 0x03
    18e2:	08 c0       	rjmp	.+16     	; 0x18f4 <vfprintf+0x568>
    18e4:	f2 e0       	ldi	r31, 0x02	; 2
    18e6:	af 0e       	add	r10, r31
    18e8:	b1 1c       	adc	r11, r1
    18ea:	f2 01       	movw	r30, r4
    18ec:	60 81       	ld	r22, Z
    18ee:	71 81       	ldd	r23, Z+1	; 0x01
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	a3 01       	movw	r20, r6
    18f6:	39 d2       	rcall	.+1138   	; 0x1d6a <__ultoa_invert>
    18f8:	e8 2e       	mov	r14, r24
    18fa:	e6 18       	sub	r14, r6
    18fc:	0f 77       	andi	r16, 0x7F	; 127
    18fe:	30 2e       	mov	r3, r16
    1900:	36 fe       	sbrs	r3, 6
    1902:	0b c0       	rjmp	.+22     	; 0x191a <vfprintf+0x58e>
    1904:	33 2d       	mov	r19, r3
    1906:	3e 7f       	andi	r19, 0xFE	; 254
    1908:	e1 16       	cp	r14, r17
    190a:	50 f4       	brcc	.+20     	; 0x1920 <vfprintf+0x594>
    190c:	34 fe       	sbrs	r3, 4
    190e:	0a c0       	rjmp	.+20     	; 0x1924 <vfprintf+0x598>
    1910:	32 fc       	sbrc	r3, 2
    1912:	08 c0       	rjmp	.+16     	; 0x1924 <vfprintf+0x598>
    1914:	33 2d       	mov	r19, r3
    1916:	3e 7e       	andi	r19, 0xEE	; 238
    1918:	05 c0       	rjmp	.+10     	; 0x1924 <vfprintf+0x598>
    191a:	0e 2d       	mov	r16, r14
    191c:	33 2d       	mov	r19, r3
    191e:	03 c0       	rjmp	.+6      	; 0x1926 <vfprintf+0x59a>
    1920:	0e 2d       	mov	r16, r14
    1922:	01 c0       	rjmp	.+2      	; 0x1926 <vfprintf+0x59a>
    1924:	01 2f       	mov	r16, r17
    1926:	34 ff       	sbrs	r19, 4
    1928:	0c c0       	rjmp	.+24     	; 0x1942 <vfprintf+0x5b6>
    192a:	fe 01       	movw	r30, r28
    192c:	ee 0d       	add	r30, r14
    192e:	f1 1d       	adc	r31, r1
    1930:	80 81       	ld	r24, Z
    1932:	80 33       	cpi	r24, 0x30	; 48
    1934:	11 f4       	brne	.+4      	; 0x193a <vfprintf+0x5ae>
    1936:	39 7e       	andi	r19, 0xE9	; 233
    1938:	08 c0       	rjmp	.+16     	; 0x194a <vfprintf+0x5be>
    193a:	32 ff       	sbrs	r19, 2
    193c:	05 c0       	rjmp	.+10     	; 0x1948 <vfprintf+0x5bc>
    193e:	0e 5f       	subi	r16, 0xFE	; 254
    1940:	04 c0       	rjmp	.+8      	; 0x194a <vfprintf+0x5be>
    1942:	83 2f       	mov	r24, r19
    1944:	86 78       	andi	r24, 0x86	; 134
    1946:	09 f0       	breq	.+2      	; 0x194a <vfprintf+0x5be>
    1948:	0f 5f       	subi	r16, 0xFF	; 255
    194a:	33 fd       	sbrc	r19, 3
    194c:	12 c0       	rjmp	.+36     	; 0x1972 <vfprintf+0x5e6>
    194e:	30 ff       	sbrs	r19, 0
    1950:	06 c0       	rjmp	.+12     	; 0x195e <vfprintf+0x5d2>
    1952:	1e 2d       	mov	r17, r14
    1954:	0f 15       	cp	r16, r15
    1956:	18 f4       	brcc	.+6      	; 0x195e <vfprintf+0x5d2>
    1958:	1f 0d       	add	r17, r15
    195a:	10 1b       	sub	r17, r16
    195c:	0f 2d       	mov	r16, r15
    195e:	0f 15       	cp	r16, r15
    1960:	60 f4       	brcc	.+24     	; 0x197a <vfprintf+0x5ee>
    1962:	b6 01       	movw	r22, r12
    1964:	80 e2       	ldi	r24, 0x20	; 32
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	3b 8b       	std	Y+19, r19	; 0x13
    196a:	8f d1       	rcall	.+798    	; 0x1c8a <fputc>
    196c:	0f 5f       	subi	r16, 0xFF	; 255
    196e:	3b 89       	ldd	r19, Y+19	; 0x13
    1970:	f6 cf       	rjmp	.-20     	; 0x195e <vfprintf+0x5d2>
    1972:	0f 15       	cp	r16, r15
    1974:	10 f4       	brcc	.+4      	; 0x197a <vfprintf+0x5ee>
    1976:	f0 1a       	sub	r15, r16
    1978:	01 c0       	rjmp	.+2      	; 0x197c <vfprintf+0x5f0>
    197a:	f1 2c       	mov	r15, r1
    197c:	34 ff       	sbrs	r19, 4
    197e:	11 c0       	rjmp	.+34     	; 0x19a2 <vfprintf+0x616>
    1980:	b6 01       	movw	r22, r12
    1982:	80 e3       	ldi	r24, 0x30	; 48
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	3b 8b       	std	Y+19, r19	; 0x13
    1988:	80 d1       	rcall	.+768    	; 0x1c8a <fputc>
    198a:	3b 89       	ldd	r19, Y+19	; 0x13
    198c:	32 ff       	sbrs	r19, 2
    198e:	16 c0       	rjmp	.+44     	; 0x19bc <vfprintf+0x630>
    1990:	31 fd       	sbrc	r19, 1
    1992:	03 c0       	rjmp	.+6      	; 0x199a <vfprintf+0x60e>
    1994:	88 e7       	ldi	r24, 0x78	; 120
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	02 c0       	rjmp	.+4      	; 0x199e <vfprintf+0x612>
    199a:	88 e5       	ldi	r24, 0x58	; 88
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	b6 01       	movw	r22, r12
    19a0:	0c c0       	rjmp	.+24     	; 0x19ba <vfprintf+0x62e>
    19a2:	83 2f       	mov	r24, r19
    19a4:	86 78       	andi	r24, 0x86	; 134
    19a6:	51 f0       	breq	.+20     	; 0x19bc <vfprintf+0x630>
    19a8:	31 ff       	sbrs	r19, 1
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <vfprintf+0x624>
    19ac:	8b e2       	ldi	r24, 0x2B	; 43
    19ae:	01 c0       	rjmp	.+2      	; 0x19b2 <vfprintf+0x626>
    19b0:	80 e2       	ldi	r24, 0x20	; 32
    19b2:	37 fd       	sbrc	r19, 7
    19b4:	8d e2       	ldi	r24, 0x2D	; 45
    19b6:	b6 01       	movw	r22, r12
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	67 d1       	rcall	.+718    	; 0x1c8a <fputc>
    19bc:	e1 16       	cp	r14, r17
    19be:	30 f4       	brcc	.+12     	; 0x19cc <vfprintf+0x640>
    19c0:	b6 01       	movw	r22, r12
    19c2:	80 e3       	ldi	r24, 0x30	; 48
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	61 d1       	rcall	.+706    	; 0x1c8a <fputc>
    19c8:	11 50       	subi	r17, 0x01	; 1
    19ca:	f8 cf       	rjmp	.-16     	; 0x19bc <vfprintf+0x630>
    19cc:	ea 94       	dec	r14
    19ce:	f3 01       	movw	r30, r6
    19d0:	ee 0d       	add	r30, r14
    19d2:	f1 1d       	adc	r31, r1
    19d4:	80 81       	ld	r24, Z
    19d6:	b6 01       	movw	r22, r12
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	57 d1       	rcall	.+686    	; 0x1c8a <fputc>
    19dc:	e1 10       	cpse	r14, r1
    19de:	f6 cf       	rjmp	.-20     	; 0x19cc <vfprintf+0x640>
    19e0:	14 c0       	rjmp	.+40     	; 0x1a0a <vfprintf+0x67e>
    19e2:	f4 e0       	ldi	r31, 0x04	; 4
    19e4:	ff 15       	cp	r31, r15
    19e6:	48 f5       	brcc	.+82     	; 0x1a3a <vfprintf+0x6ae>
    19e8:	84 e0       	ldi	r24, 0x04	; 4
    19ea:	f8 1a       	sub	r15, r24
    19ec:	33 fe       	sbrs	r3, 3
    19ee:	1d c0       	rjmp	.+58     	; 0x1a2a <vfprintf+0x69e>
    19f0:	21 10       	cpse	r2, r1
    19f2:	24 c0       	rjmp	.+72     	; 0x1a3c <vfprintf+0x6b0>
    19f4:	03 ff       	sbrs	r16, 3
    19f6:	27 c0       	rjmp	.+78     	; 0x1a46 <vfprintf+0x6ba>
    19f8:	07 ea       	ldi	r16, 0xA7	; 167
    19fa:	13 e0       	ldi	r17, 0x03	; 3
    19fc:	f3 2d       	mov	r31, r3
    19fe:	f0 71       	andi	r31, 0x10	; 16
    1a00:	3f 2e       	mov	r3, r31
    1a02:	f8 01       	movw	r30, r16
    1a04:	84 91       	lpm	r24, Z
    1a06:	81 11       	cpse	r24, r1
    1a08:	21 c0       	rjmp	.+66     	; 0x1a4c <vfprintf+0x6c0>
    1a0a:	ff 20       	and	r15, r15
    1a0c:	09 f4       	brne	.+2      	; 0x1a10 <vfprintf+0x684>
    1a0e:	fd cc       	rjmp	.-1542   	; 0x140a <vfprintf+0x7e>
    1a10:	b6 01       	movw	r22, r12
    1a12:	80 e2       	ldi	r24, 0x20	; 32
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	39 d1       	rcall	.+626    	; 0x1c8a <fputc>
    1a18:	fa 94       	dec	r15
    1a1a:	f7 cf       	rjmp	.-18     	; 0x1a0a <vfprintf+0x67e>
    1a1c:	f6 01       	movw	r30, r12
    1a1e:	86 81       	ldd	r24, Z+6	; 0x06
    1a20:	97 81       	ldd	r25, Z+7	; 0x07
    1a22:	23 c0       	rjmp	.+70     	; 0x1a6a <vfprintf+0x6de>
    1a24:	8f ef       	ldi	r24, 0xFF	; 255
    1a26:	9f ef       	ldi	r25, 0xFF	; 255
    1a28:	20 c0       	rjmp	.+64     	; 0x1a6a <vfprintf+0x6de>
    1a2a:	b6 01       	movw	r22, r12
    1a2c:	80 e2       	ldi	r24, 0x20	; 32
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	2c d1       	rcall	.+600    	; 0x1c8a <fputc>
    1a32:	fa 94       	dec	r15
    1a34:	f1 10       	cpse	r15, r1
    1a36:	f9 cf       	rjmp	.-14     	; 0x1a2a <vfprintf+0x69e>
    1a38:	db cf       	rjmp	.-74     	; 0x19f0 <vfprintf+0x664>
    1a3a:	f1 2c       	mov	r15, r1
    1a3c:	b6 01       	movw	r22, r12
    1a3e:	82 2d       	mov	r24, r2
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	23 d1       	rcall	.+582    	; 0x1c8a <fputc>
    1a44:	d7 cf       	rjmp	.-82     	; 0x19f4 <vfprintf+0x668>
    1a46:	0b ea       	ldi	r16, 0xAB	; 171
    1a48:	13 e0       	ldi	r17, 0x03	; 3
    1a4a:	d8 cf       	rjmp	.-80     	; 0x19fc <vfprintf+0x670>
    1a4c:	31 10       	cpse	r3, r1
    1a4e:	80 52       	subi	r24, 0x20	; 32
    1a50:	b6 01       	movw	r22, r12
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	1a d1       	rcall	.+564    	; 0x1c8a <fputc>
    1a56:	0f 5f       	subi	r16, 0xFF	; 255
    1a58:	1f 4f       	sbci	r17, 0xFF	; 255
    1a5a:	d3 cf       	rjmp	.-90     	; 0x1a02 <vfprintf+0x676>
    1a5c:	23 e0       	ldi	r18, 0x03	; 3
    1a5e:	2f 15       	cp	r18, r15
    1a60:	10 f4       	brcc	.+4      	; 0x1a66 <vfprintf+0x6da>
    1a62:	83 e0       	ldi	r24, 0x03	; 3
    1a64:	c2 cf       	rjmp	.-124    	; 0x19ea <vfprintf+0x65e>
    1a66:	f1 2c       	mov	r15, r1
    1a68:	c5 cf       	rjmp	.-118    	; 0x19f4 <vfprintf+0x668>
    1a6a:	63 96       	adiw	r28, 0x13	; 19
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	f8 94       	cli
    1a70:	de bf       	out	0x3e, r29	; 62
    1a72:	0f be       	out	0x3f, r0	; 63
    1a74:	cd bf       	out	0x3d, r28	; 61
    1a76:	df 91       	pop	r29
    1a78:	cf 91       	pop	r28
    1a7a:	1f 91       	pop	r17
    1a7c:	0f 91       	pop	r16
    1a7e:	ff 90       	pop	r15
    1a80:	ef 90       	pop	r14
    1a82:	df 90       	pop	r13
    1a84:	cf 90       	pop	r12
    1a86:	bf 90       	pop	r11
    1a88:	af 90       	pop	r10
    1a8a:	9f 90       	pop	r9
    1a8c:	8f 90       	pop	r8
    1a8e:	7f 90       	pop	r7
    1a90:	6f 90       	pop	r6
    1a92:	5f 90       	pop	r5
    1a94:	4f 90       	pop	r4
    1a96:	3f 90       	pop	r3
    1a98:	2f 90       	pop	r2
    1a9a:	08 95       	ret

00001a9c <__tablejump2__>:
    1a9c:	ee 0f       	add	r30, r30
    1a9e:	ff 1f       	adc	r31, r31
    1aa0:	00 24       	eor	r0, r0
    1aa2:	00 1c       	adc	r0, r0
    1aa4:	0b be       	out	0x3b, r0	; 59
    1aa6:	07 90       	elpm	r0, Z+
    1aa8:	f6 91       	elpm	r31, Z
    1aaa:	e0 2d       	mov	r30, r0
    1aac:	09 94       	ijmp

00001aae <__ftoa_engine>:
    1aae:	28 30       	cpi	r18, 0x08	; 8
    1ab0:	08 f0       	brcs	.+2      	; 0x1ab4 <__ftoa_engine+0x6>
    1ab2:	27 e0       	ldi	r18, 0x07	; 7
    1ab4:	33 27       	eor	r19, r19
    1ab6:	da 01       	movw	r26, r20
    1ab8:	99 0f       	add	r25, r25
    1aba:	31 1d       	adc	r19, r1
    1abc:	87 fd       	sbrc	r24, 7
    1abe:	91 60       	ori	r25, 0x01	; 1
    1ac0:	00 96       	adiw	r24, 0x00	; 0
    1ac2:	61 05       	cpc	r22, r1
    1ac4:	71 05       	cpc	r23, r1
    1ac6:	39 f4       	brne	.+14     	; 0x1ad6 <__ftoa_engine+0x28>
    1ac8:	32 60       	ori	r19, 0x02	; 2
    1aca:	2e 5f       	subi	r18, 0xFE	; 254
    1acc:	3d 93       	st	X+, r19
    1ace:	30 e3       	ldi	r19, 0x30	; 48
    1ad0:	2a 95       	dec	r18
    1ad2:	e1 f7       	brne	.-8      	; 0x1acc <__ftoa_engine+0x1e>
    1ad4:	08 95       	ret
    1ad6:	9f 3f       	cpi	r25, 0xFF	; 255
    1ad8:	30 f0       	brcs	.+12     	; 0x1ae6 <__ftoa_engine+0x38>
    1ada:	80 38       	cpi	r24, 0x80	; 128
    1adc:	71 05       	cpc	r23, r1
    1ade:	61 05       	cpc	r22, r1
    1ae0:	09 f0       	breq	.+2      	; 0x1ae4 <__ftoa_engine+0x36>
    1ae2:	3c 5f       	subi	r19, 0xFC	; 252
    1ae4:	3c 5f       	subi	r19, 0xFC	; 252
    1ae6:	3d 93       	st	X+, r19
    1ae8:	91 30       	cpi	r25, 0x01	; 1
    1aea:	08 f0       	brcs	.+2      	; 0x1aee <__ftoa_engine+0x40>
    1aec:	80 68       	ori	r24, 0x80	; 128
    1aee:	91 1d       	adc	r25, r1
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	1f 93       	push	r17
    1af6:	0f 93       	push	r16
    1af8:	ff 92       	push	r15
    1afa:	ef 92       	push	r14
    1afc:	19 2f       	mov	r17, r25
    1afe:	98 7f       	andi	r25, 0xF8	; 248
    1b00:	96 95       	lsr	r25
    1b02:	e9 2f       	mov	r30, r25
    1b04:	96 95       	lsr	r25
    1b06:	96 95       	lsr	r25
    1b08:	e9 0f       	add	r30, r25
    1b0a:	ff 27       	eor	r31, r31
    1b0c:	e7 5f       	subi	r30, 0xF7	; 247
    1b0e:	fb 4f       	sbci	r31, 0xFB	; 251
    1b10:	99 27       	eor	r25, r25
    1b12:	33 27       	eor	r19, r19
    1b14:	ee 24       	eor	r14, r14
    1b16:	ff 24       	eor	r15, r15
    1b18:	a7 01       	movw	r20, r14
    1b1a:	e7 01       	movw	r28, r14
    1b1c:	05 90       	lpm	r0, Z+
    1b1e:	08 94       	sec
    1b20:	07 94       	ror	r0
    1b22:	28 f4       	brcc	.+10     	; 0x1b2e <__ftoa_engine+0x80>
    1b24:	36 0f       	add	r19, r22
    1b26:	e7 1e       	adc	r14, r23
    1b28:	f8 1e       	adc	r15, r24
    1b2a:	49 1f       	adc	r20, r25
    1b2c:	51 1d       	adc	r21, r1
    1b2e:	66 0f       	add	r22, r22
    1b30:	77 1f       	adc	r23, r23
    1b32:	88 1f       	adc	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	06 94       	lsr	r0
    1b38:	a1 f7       	brne	.-24     	; 0x1b22 <__ftoa_engine+0x74>
    1b3a:	05 90       	lpm	r0, Z+
    1b3c:	07 94       	ror	r0
    1b3e:	28 f4       	brcc	.+10     	; 0x1b4a <__ftoa_engine+0x9c>
    1b40:	e7 0e       	add	r14, r23
    1b42:	f8 1e       	adc	r15, r24
    1b44:	49 1f       	adc	r20, r25
    1b46:	56 1f       	adc	r21, r22
    1b48:	c1 1d       	adc	r28, r1
    1b4a:	77 0f       	add	r23, r23
    1b4c:	88 1f       	adc	r24, r24
    1b4e:	99 1f       	adc	r25, r25
    1b50:	66 1f       	adc	r22, r22
    1b52:	06 94       	lsr	r0
    1b54:	a1 f7       	brne	.-24     	; 0x1b3e <__ftoa_engine+0x90>
    1b56:	05 90       	lpm	r0, Z+
    1b58:	07 94       	ror	r0
    1b5a:	28 f4       	brcc	.+10     	; 0x1b66 <__ftoa_engine+0xb8>
    1b5c:	f8 0e       	add	r15, r24
    1b5e:	49 1f       	adc	r20, r25
    1b60:	56 1f       	adc	r21, r22
    1b62:	c7 1f       	adc	r28, r23
    1b64:	d1 1d       	adc	r29, r1
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	66 1f       	adc	r22, r22
    1b6c:	77 1f       	adc	r23, r23
    1b6e:	06 94       	lsr	r0
    1b70:	a1 f7       	brne	.-24     	; 0x1b5a <__ftoa_engine+0xac>
    1b72:	05 90       	lpm	r0, Z+
    1b74:	07 94       	ror	r0
    1b76:	20 f4       	brcc	.+8      	; 0x1b80 <__ftoa_engine+0xd2>
    1b78:	49 0f       	add	r20, r25
    1b7a:	56 1f       	adc	r21, r22
    1b7c:	c7 1f       	adc	r28, r23
    1b7e:	d8 1f       	adc	r29, r24
    1b80:	99 0f       	add	r25, r25
    1b82:	66 1f       	adc	r22, r22
    1b84:	77 1f       	adc	r23, r23
    1b86:	88 1f       	adc	r24, r24
    1b88:	06 94       	lsr	r0
    1b8a:	a9 f7       	brne	.-22     	; 0x1b76 <__ftoa_engine+0xc8>
    1b8c:	84 91       	lpm	r24, Z
    1b8e:	10 95       	com	r17
    1b90:	17 70       	andi	r17, 0x07	; 7
    1b92:	41 f0       	breq	.+16     	; 0x1ba4 <__ftoa_engine+0xf6>
    1b94:	d6 95       	lsr	r29
    1b96:	c7 95       	ror	r28
    1b98:	57 95       	ror	r21
    1b9a:	47 95       	ror	r20
    1b9c:	f7 94       	ror	r15
    1b9e:	e7 94       	ror	r14
    1ba0:	1a 95       	dec	r17
    1ba2:	c1 f7       	brne	.-16     	; 0x1b94 <__ftoa_engine+0xe6>
    1ba4:	ef ea       	ldi	r30, 0xAF	; 175
    1ba6:	f3 e0       	ldi	r31, 0x03	; 3
    1ba8:	68 94       	set
    1baa:	15 90       	lpm	r1, Z+
    1bac:	15 91       	lpm	r17, Z+
    1bae:	35 91       	lpm	r19, Z+
    1bb0:	65 91       	lpm	r22, Z+
    1bb2:	95 91       	lpm	r25, Z+
    1bb4:	05 90       	lpm	r0, Z+
    1bb6:	7f e2       	ldi	r23, 0x2F	; 47
    1bb8:	73 95       	inc	r23
    1bba:	e1 18       	sub	r14, r1
    1bbc:	f1 0a       	sbc	r15, r17
    1bbe:	43 0b       	sbc	r20, r19
    1bc0:	56 0b       	sbc	r21, r22
    1bc2:	c9 0b       	sbc	r28, r25
    1bc4:	d0 09       	sbc	r29, r0
    1bc6:	c0 f7       	brcc	.-16     	; 0x1bb8 <__ftoa_engine+0x10a>
    1bc8:	e1 0c       	add	r14, r1
    1bca:	f1 1e       	adc	r15, r17
    1bcc:	43 1f       	adc	r20, r19
    1bce:	56 1f       	adc	r21, r22
    1bd0:	c9 1f       	adc	r28, r25
    1bd2:	d0 1d       	adc	r29, r0
    1bd4:	7e f4       	brtc	.+30     	; 0x1bf4 <__ftoa_engine+0x146>
    1bd6:	70 33       	cpi	r23, 0x30	; 48
    1bd8:	11 f4       	brne	.+4      	; 0x1bde <__ftoa_engine+0x130>
    1bda:	8a 95       	dec	r24
    1bdc:	e6 cf       	rjmp	.-52     	; 0x1baa <__ftoa_engine+0xfc>
    1bde:	e8 94       	clt
    1be0:	01 50       	subi	r16, 0x01	; 1
    1be2:	30 f0       	brcs	.+12     	; 0x1bf0 <__ftoa_engine+0x142>
    1be4:	08 0f       	add	r16, r24
    1be6:	0a f4       	brpl	.+2      	; 0x1bea <__ftoa_engine+0x13c>
    1be8:	00 27       	eor	r16, r16
    1bea:	02 17       	cp	r16, r18
    1bec:	08 f4       	brcc	.+2      	; 0x1bf0 <__ftoa_engine+0x142>
    1bee:	20 2f       	mov	r18, r16
    1bf0:	23 95       	inc	r18
    1bf2:	02 2f       	mov	r16, r18
    1bf4:	7a 33       	cpi	r23, 0x3A	; 58
    1bf6:	28 f0       	brcs	.+10     	; 0x1c02 <__ftoa_engine+0x154>
    1bf8:	79 e3       	ldi	r23, 0x39	; 57
    1bfa:	7d 93       	st	X+, r23
    1bfc:	2a 95       	dec	r18
    1bfe:	e9 f7       	brne	.-6      	; 0x1bfa <__ftoa_engine+0x14c>
    1c00:	10 c0       	rjmp	.+32     	; 0x1c22 <__ftoa_engine+0x174>
    1c02:	7d 93       	st	X+, r23
    1c04:	2a 95       	dec	r18
    1c06:	89 f6       	brne	.-94     	; 0x1baa <__ftoa_engine+0xfc>
    1c08:	06 94       	lsr	r0
    1c0a:	97 95       	ror	r25
    1c0c:	67 95       	ror	r22
    1c0e:	37 95       	ror	r19
    1c10:	17 95       	ror	r17
    1c12:	17 94       	ror	r1
    1c14:	e1 18       	sub	r14, r1
    1c16:	f1 0a       	sbc	r15, r17
    1c18:	43 0b       	sbc	r20, r19
    1c1a:	56 0b       	sbc	r21, r22
    1c1c:	c9 0b       	sbc	r28, r25
    1c1e:	d0 09       	sbc	r29, r0
    1c20:	98 f0       	brcs	.+38     	; 0x1c48 <__ftoa_engine+0x19a>
    1c22:	23 95       	inc	r18
    1c24:	7e 91       	ld	r23, -X
    1c26:	73 95       	inc	r23
    1c28:	7a 33       	cpi	r23, 0x3A	; 58
    1c2a:	08 f0       	brcs	.+2      	; 0x1c2e <__ftoa_engine+0x180>
    1c2c:	70 e3       	ldi	r23, 0x30	; 48
    1c2e:	7c 93       	st	X, r23
    1c30:	20 13       	cpse	r18, r16
    1c32:	b8 f7       	brcc	.-18     	; 0x1c22 <__ftoa_engine+0x174>
    1c34:	7e 91       	ld	r23, -X
    1c36:	70 61       	ori	r23, 0x10	; 16
    1c38:	7d 93       	st	X+, r23
    1c3a:	30 f0       	brcs	.+12     	; 0x1c48 <__ftoa_engine+0x19a>
    1c3c:	83 95       	inc	r24
    1c3e:	71 e3       	ldi	r23, 0x31	; 49
    1c40:	7d 93       	st	X+, r23
    1c42:	70 e3       	ldi	r23, 0x30	; 48
    1c44:	2a 95       	dec	r18
    1c46:	e1 f7       	brne	.-8      	; 0x1c40 <__ftoa_engine+0x192>
    1c48:	11 24       	eor	r1, r1
    1c4a:	ef 90       	pop	r14
    1c4c:	ff 90       	pop	r15
    1c4e:	0f 91       	pop	r16
    1c50:	1f 91       	pop	r17
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	99 27       	eor	r25, r25
    1c58:	87 fd       	sbrc	r24, 7
    1c5a:	90 95       	com	r25
    1c5c:	08 95       	ret

00001c5e <strnlen_P>:
    1c5e:	fc 01       	movw	r30, r24
    1c60:	05 90       	lpm	r0, Z+
    1c62:	61 50       	subi	r22, 0x01	; 1
    1c64:	70 40       	sbci	r23, 0x00	; 0
    1c66:	01 10       	cpse	r0, r1
    1c68:	d8 f7       	brcc	.-10     	; 0x1c60 <strnlen_P+0x2>
    1c6a:	80 95       	com	r24
    1c6c:	90 95       	com	r25
    1c6e:	8e 0f       	add	r24, r30
    1c70:	9f 1f       	adc	r25, r31
    1c72:	08 95       	ret

00001c74 <strnlen>:
    1c74:	fc 01       	movw	r30, r24
    1c76:	61 50       	subi	r22, 0x01	; 1
    1c78:	70 40       	sbci	r23, 0x00	; 0
    1c7a:	01 90       	ld	r0, Z+
    1c7c:	01 10       	cpse	r0, r1
    1c7e:	d8 f7       	brcc	.-10     	; 0x1c76 <strnlen+0x2>
    1c80:	80 95       	com	r24
    1c82:	90 95       	com	r25
    1c84:	8e 0f       	add	r24, r30
    1c86:	9f 1f       	adc	r25, r31
    1c88:	08 95       	ret

00001c8a <fputc>:
    1c8a:	0f 93       	push	r16
    1c8c:	1f 93       	push	r17
    1c8e:	cf 93       	push	r28
    1c90:	df 93       	push	r29
    1c92:	fb 01       	movw	r30, r22
    1c94:	23 81       	ldd	r18, Z+3	; 0x03
    1c96:	21 fd       	sbrc	r18, 1
    1c98:	03 c0       	rjmp	.+6      	; 0x1ca0 <fputc+0x16>
    1c9a:	8f ef       	ldi	r24, 0xFF	; 255
    1c9c:	9f ef       	ldi	r25, 0xFF	; 255
    1c9e:	28 c0       	rjmp	.+80     	; 0x1cf0 <fputc+0x66>
    1ca0:	22 ff       	sbrs	r18, 2
    1ca2:	16 c0       	rjmp	.+44     	; 0x1cd0 <fputc+0x46>
    1ca4:	46 81       	ldd	r20, Z+6	; 0x06
    1ca6:	57 81       	ldd	r21, Z+7	; 0x07
    1ca8:	24 81       	ldd	r18, Z+4	; 0x04
    1caa:	35 81       	ldd	r19, Z+5	; 0x05
    1cac:	42 17       	cp	r20, r18
    1cae:	53 07       	cpc	r21, r19
    1cb0:	44 f4       	brge	.+16     	; 0x1cc2 <fputc+0x38>
    1cb2:	a0 81       	ld	r26, Z
    1cb4:	b1 81       	ldd	r27, Z+1	; 0x01
    1cb6:	9d 01       	movw	r18, r26
    1cb8:	2f 5f       	subi	r18, 0xFF	; 255
    1cba:	3f 4f       	sbci	r19, 0xFF	; 255
    1cbc:	31 83       	std	Z+1, r19	; 0x01
    1cbe:	20 83       	st	Z, r18
    1cc0:	8c 93       	st	X, r24
    1cc2:	26 81       	ldd	r18, Z+6	; 0x06
    1cc4:	37 81       	ldd	r19, Z+7	; 0x07
    1cc6:	2f 5f       	subi	r18, 0xFF	; 255
    1cc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cca:	37 83       	std	Z+7, r19	; 0x07
    1ccc:	26 83       	std	Z+6, r18	; 0x06
    1cce:	10 c0       	rjmp	.+32     	; 0x1cf0 <fputc+0x66>
    1cd0:	eb 01       	movw	r28, r22
    1cd2:	09 2f       	mov	r16, r25
    1cd4:	18 2f       	mov	r17, r24
    1cd6:	00 84       	ldd	r0, Z+8	; 0x08
    1cd8:	f1 85       	ldd	r31, Z+9	; 0x09
    1cda:	e0 2d       	mov	r30, r0
    1cdc:	09 95       	icall
    1cde:	89 2b       	or	r24, r25
    1ce0:	e1 f6       	brne	.-72     	; 0x1c9a <fputc+0x10>
    1ce2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ce4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ce6:	01 96       	adiw	r24, 0x01	; 1
    1ce8:	9f 83       	std	Y+7, r25	; 0x07
    1cea:	8e 83       	std	Y+6, r24	; 0x06
    1cec:	81 2f       	mov	r24, r17
    1cee:	90 2f       	mov	r25, r16
    1cf0:	df 91       	pop	r29
    1cf2:	cf 91       	pop	r28
    1cf4:	1f 91       	pop	r17
    1cf6:	0f 91       	pop	r16
    1cf8:	08 95       	ret

00001cfa <vsnprintf>:
    1cfa:	0f 93       	push	r16
    1cfc:	1f 93       	push	r17
    1cfe:	cf 93       	push	r28
    1d00:	df 93       	push	r29
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	2e 97       	sbiw	r28, 0x0e	; 14
    1d08:	0f b6       	in	r0, 0x3f	; 63
    1d0a:	f8 94       	cli
    1d0c:	de bf       	out	0x3e, r29	; 62
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	cd bf       	out	0x3d, r28	; 61
    1d12:	8c 01       	movw	r16, r24
    1d14:	ca 01       	movw	r24, r20
    1d16:	46 e0       	ldi	r20, 0x06	; 6
    1d18:	4c 83       	std	Y+4, r20	; 0x04
    1d1a:	1a 83       	std	Y+2, r17	; 0x02
    1d1c:	09 83       	std	Y+1, r16	; 0x01
    1d1e:	77 ff       	sbrs	r23, 7
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <vsnprintf+0x2c>
    1d22:	60 e0       	ldi	r22, 0x00	; 0
    1d24:	70 e8       	ldi	r23, 0x80	; 128
    1d26:	fb 01       	movw	r30, r22
    1d28:	31 97       	sbiw	r30, 0x01	; 1
    1d2a:	fe 83       	std	Y+6, r31	; 0x06
    1d2c:	ed 83       	std	Y+5, r30	; 0x05
    1d2e:	a9 01       	movw	r20, r18
    1d30:	bc 01       	movw	r22, r24
    1d32:	ce 01       	movw	r24, r28
    1d34:	01 96       	adiw	r24, 0x01	; 1
    1d36:	2a db       	rcall	.-2476   	; 0x138c <vfprintf>
    1d38:	4d 81       	ldd	r20, Y+5	; 0x05
    1d3a:	5e 81       	ldd	r21, Y+6	; 0x06
    1d3c:	57 fd       	sbrc	r21, 7
    1d3e:	0a c0       	rjmp	.+20     	; 0x1d54 <vsnprintf+0x5a>
    1d40:	2f 81       	ldd	r18, Y+7	; 0x07
    1d42:	38 85       	ldd	r19, Y+8	; 0x08
    1d44:	42 17       	cp	r20, r18
    1d46:	53 07       	cpc	r21, r19
    1d48:	0c f4       	brge	.+2      	; 0x1d4c <vsnprintf+0x52>
    1d4a:	9a 01       	movw	r18, r20
    1d4c:	f8 01       	movw	r30, r16
    1d4e:	e2 0f       	add	r30, r18
    1d50:	f3 1f       	adc	r31, r19
    1d52:	10 82       	st	Z, r1
    1d54:	2e 96       	adiw	r28, 0x0e	; 14
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	f8 94       	cli
    1d5a:	de bf       	out	0x3e, r29	; 62
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	cd bf       	out	0x3d, r28	; 61
    1d60:	df 91       	pop	r29
    1d62:	cf 91       	pop	r28
    1d64:	1f 91       	pop	r17
    1d66:	0f 91       	pop	r16
    1d68:	08 95       	ret

00001d6a <__ultoa_invert>:
    1d6a:	fa 01       	movw	r30, r20
    1d6c:	aa 27       	eor	r26, r26
    1d6e:	28 30       	cpi	r18, 0x08	; 8
    1d70:	51 f1       	breq	.+84     	; 0x1dc6 <__ultoa_invert+0x5c>
    1d72:	20 31       	cpi	r18, 0x10	; 16
    1d74:	81 f1       	breq	.+96     	; 0x1dd6 <__ultoa_invert+0x6c>
    1d76:	e8 94       	clt
    1d78:	6f 93       	push	r22
    1d7a:	6e 7f       	andi	r22, 0xFE	; 254
    1d7c:	6e 5f       	subi	r22, 0xFE	; 254
    1d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d80:	8f 4f       	sbci	r24, 0xFF	; 255
    1d82:	9f 4f       	sbci	r25, 0xFF	; 255
    1d84:	af 4f       	sbci	r26, 0xFF	; 255
    1d86:	b1 e0       	ldi	r27, 0x01	; 1
    1d88:	3e d0       	rcall	.+124    	; 0x1e06 <__ultoa_invert+0x9c>
    1d8a:	b4 e0       	ldi	r27, 0x04	; 4
    1d8c:	3c d0       	rcall	.+120    	; 0x1e06 <__ultoa_invert+0x9c>
    1d8e:	67 0f       	add	r22, r23
    1d90:	78 1f       	adc	r23, r24
    1d92:	89 1f       	adc	r24, r25
    1d94:	9a 1f       	adc	r25, r26
    1d96:	a1 1d       	adc	r26, r1
    1d98:	68 0f       	add	r22, r24
    1d9a:	79 1f       	adc	r23, r25
    1d9c:	8a 1f       	adc	r24, r26
    1d9e:	91 1d       	adc	r25, r1
    1da0:	a1 1d       	adc	r26, r1
    1da2:	6a 0f       	add	r22, r26
    1da4:	71 1d       	adc	r23, r1
    1da6:	81 1d       	adc	r24, r1
    1da8:	91 1d       	adc	r25, r1
    1daa:	a1 1d       	adc	r26, r1
    1dac:	20 d0       	rcall	.+64     	; 0x1dee <__ultoa_invert+0x84>
    1dae:	09 f4       	brne	.+2      	; 0x1db2 <__ultoa_invert+0x48>
    1db0:	68 94       	set
    1db2:	3f 91       	pop	r19
    1db4:	2a e0       	ldi	r18, 0x0A	; 10
    1db6:	26 9f       	mul	r18, r22
    1db8:	11 24       	eor	r1, r1
    1dba:	30 19       	sub	r19, r0
    1dbc:	30 5d       	subi	r19, 0xD0	; 208
    1dbe:	31 93       	st	Z+, r19
    1dc0:	de f6       	brtc	.-74     	; 0x1d78 <__ultoa_invert+0xe>
    1dc2:	cf 01       	movw	r24, r30
    1dc4:	08 95       	ret
    1dc6:	46 2f       	mov	r20, r22
    1dc8:	47 70       	andi	r20, 0x07	; 7
    1dca:	40 5d       	subi	r20, 0xD0	; 208
    1dcc:	41 93       	st	Z+, r20
    1dce:	b3 e0       	ldi	r27, 0x03	; 3
    1dd0:	0f d0       	rcall	.+30     	; 0x1df0 <__ultoa_invert+0x86>
    1dd2:	c9 f7       	brne	.-14     	; 0x1dc6 <__ultoa_invert+0x5c>
    1dd4:	f6 cf       	rjmp	.-20     	; 0x1dc2 <__ultoa_invert+0x58>
    1dd6:	46 2f       	mov	r20, r22
    1dd8:	4f 70       	andi	r20, 0x0F	; 15
    1dda:	40 5d       	subi	r20, 0xD0	; 208
    1ddc:	4a 33       	cpi	r20, 0x3A	; 58
    1dde:	18 f0       	brcs	.+6      	; 0x1de6 <__ultoa_invert+0x7c>
    1de0:	49 5d       	subi	r20, 0xD9	; 217
    1de2:	31 fd       	sbrc	r19, 1
    1de4:	40 52       	subi	r20, 0x20	; 32
    1de6:	41 93       	st	Z+, r20
    1de8:	02 d0       	rcall	.+4      	; 0x1dee <__ultoa_invert+0x84>
    1dea:	a9 f7       	brne	.-22     	; 0x1dd6 <__ultoa_invert+0x6c>
    1dec:	ea cf       	rjmp	.-44     	; 0x1dc2 <__ultoa_invert+0x58>
    1dee:	b4 e0       	ldi	r27, 0x04	; 4
    1df0:	a6 95       	lsr	r26
    1df2:	97 95       	ror	r25
    1df4:	87 95       	ror	r24
    1df6:	77 95       	ror	r23
    1df8:	67 95       	ror	r22
    1dfa:	ba 95       	dec	r27
    1dfc:	c9 f7       	brne	.-14     	; 0x1df0 <__ultoa_invert+0x86>
    1dfe:	00 97       	sbiw	r24, 0x00	; 0
    1e00:	61 05       	cpc	r22, r1
    1e02:	71 05       	cpc	r23, r1
    1e04:	08 95       	ret
    1e06:	9b 01       	movw	r18, r22
    1e08:	ac 01       	movw	r20, r24
    1e0a:	0a 2e       	mov	r0, r26
    1e0c:	06 94       	lsr	r0
    1e0e:	57 95       	ror	r21
    1e10:	47 95       	ror	r20
    1e12:	37 95       	ror	r19
    1e14:	27 95       	ror	r18
    1e16:	ba 95       	dec	r27
    1e18:	c9 f7       	brne	.-14     	; 0x1e0c <__ultoa_invert+0xa2>
    1e1a:	62 0f       	add	r22, r18
    1e1c:	73 1f       	adc	r23, r19
    1e1e:	84 1f       	adc	r24, r20
    1e20:	95 1f       	adc	r25, r21
    1e22:	a0 1d       	adc	r26, r0
    1e24:	08 95       	ret

00001e26 <_exit>:
    1e26:	f8 94       	cli

00001e28 <__stop_program>:
    1e28:	ff cf       	rjmp	.-2      	; 0x1e28 <__stop_program>
